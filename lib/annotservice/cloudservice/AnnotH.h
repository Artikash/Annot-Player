/* AnnotH.h
   Generated by gSOAP 2.8.15 from cloudservice.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef AnnotH_H
#define AnnotH_H
#include "AnnotStub.h"

namespace Annot {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 Annot_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 Annot_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 Annot_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_byte
#define SOAP_TYPE_Annot_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( Annot::soap_serialize_byte(soap, data), soap_begin_send(soap) || Annot::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_int
#define SOAP_TYPE_Annot_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( Annot::soap_serialize_int(soap, data), soap_begin_send(soap) || Annot::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_LONG64
#define SOAP_TYPE_Annot_LONG64 (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( Annot::soap_serialize_LONG64(soap, data), soap_begin_send(soap) || Annot::soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_bool
#define SOAP_TYPE_Annot_bool (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( Annot::soap_serialize_bool(soap, data), soap_begin_send(soap) || Annot::soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_std__string
#define SOAP_TYPE_Annot_std__string (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateMediaAnnotationUserIdWithIdResponse
#define SOAP_TYPE_Annot_tns__updateMediaAnnotationUserIdWithIdResponse (111)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, const char*, int, const tns__updateMediaAnnotationUserIdWithIdResponse *, const char*);
SOAP_FMAC3 tns__updateMediaAnnotationUserIdWithIdResponse * SOAP_FMAC4 soap_in_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, const char*, tns__updateMediaAnnotationUserIdWithIdResponse *, const char*);

#ifndef soap_write_tns__updateMediaAnnotationUserIdWithIdResponse
#define soap_write_tns__updateMediaAnnotationUserIdWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateMediaAnnotationUserIdWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationUserIdWithIdResponse * SOAP_FMAC4 soap_get_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, tns__updateMediaAnnotationUserIdWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__updateMediaAnnotationUserIdWithIdResponse
#define soap_read_tns__updateMediaAnnotationUserIdWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateMediaAnnotationUserIdWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateMediaAnnotationUserIdWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateMediaAnnotationUserIdWithIdResponse * soap_new_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateMediaAnnotationUserIdWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__updateMediaAnnotationUserIdWithIdResponse * soap_new_req_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap *soap, bool return_) { tns__updateMediaAnnotationUserIdWithIdResponse *_p = soap_instantiate_tns__updateMediaAnnotationUserIdWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationUserIdWithIdResponse::return_ = return_; } return _p; }

inline tns__updateMediaAnnotationUserIdWithIdResponse * soap_new_set_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap *soap, bool return_) { tns__updateMediaAnnotationUserIdWithIdResponse *_p = soap_instantiate_tns__updateMediaAnnotationUserIdWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationUserIdWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap *soap, tns__updateMediaAnnotationUserIdWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateMediaAnnotationUserIdWithId
#define SOAP_TYPE_Annot_tns__updateMediaAnnotationUserIdWithId (110)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateMediaAnnotationUserIdWithId(struct soap*, const char*, int, const tns__updateMediaAnnotationUserIdWithId *, const char*);
SOAP_FMAC3 tns__updateMediaAnnotationUserIdWithId * SOAP_FMAC4 soap_in_tns__updateMediaAnnotationUserIdWithId(struct soap*, const char*, tns__updateMediaAnnotationUserIdWithId *, const char*);

#ifndef soap_write_tns__updateMediaAnnotationUserIdWithId
#define soap_write_tns__updateMediaAnnotationUserIdWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateMediaAnnotationUserIdWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationUserIdWithId * SOAP_FMAC4 soap_get_tns__updateMediaAnnotationUserIdWithId(struct soap*, tns__updateMediaAnnotationUserIdWithId *, const char*, const char*);

#ifndef soap_read_tns__updateMediaAnnotationUserIdWithId
#define soap_read_tns__updateMediaAnnotationUserIdWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateMediaAnnotationUserIdWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateMediaAnnotationUserIdWithId * SOAP_FMAC2 soap_instantiate_tns__updateMediaAnnotationUserIdWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateMediaAnnotationUserIdWithId * soap_new_tns__updateMediaAnnotationUserIdWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateMediaAnnotationUserIdWithId(soap, n, NULL, NULL, NULL); }

inline tns__updateMediaAnnotationUserIdWithId * soap_new_req_tns__updateMediaAnnotationUserIdWithId(struct soap *soap, LONG64 userId, LONG64 id) { tns__updateMediaAnnotationUserIdWithId *_p = soap_instantiate_tns__updateMediaAnnotationUserIdWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationUserIdWithId::userId = userId; _p->tns__updateMediaAnnotationUserIdWithId::id = id; } return _p; }

inline tns__updateMediaAnnotationUserIdWithId * soap_new_set_tns__updateMediaAnnotationUserIdWithId(struct soap *soap, LONG64 userId, LONG64 id) { tns__updateMediaAnnotationUserIdWithId *_p = soap_instantiate_tns__updateMediaAnnotationUserIdWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationUserIdWithId::userId = userId; _p->tns__updateMediaAnnotationUserIdWithId::id = id; } return _p; }

inline void soap_delete_tns__updateMediaAnnotationUserIdWithId(struct soap *soap, tns__updateMediaAnnotationUserIdWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateMediaAnnotationUserIdWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateMediaAnnotationTextWithIdResponse
#define SOAP_TYPE_Annot_tns__updateMediaAnnotationTextWithIdResponse (109)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateMediaAnnotationTextWithIdResponse(struct soap*, const char*, int, const tns__updateMediaAnnotationTextWithIdResponse *, const char*);
SOAP_FMAC3 tns__updateMediaAnnotationTextWithIdResponse * SOAP_FMAC4 soap_in_tns__updateMediaAnnotationTextWithIdResponse(struct soap*, const char*, tns__updateMediaAnnotationTextWithIdResponse *, const char*);

#ifndef soap_write_tns__updateMediaAnnotationTextWithIdResponse
#define soap_write_tns__updateMediaAnnotationTextWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateMediaAnnotationTextWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationTextWithIdResponse * SOAP_FMAC4 soap_get_tns__updateMediaAnnotationTextWithIdResponse(struct soap*, tns__updateMediaAnnotationTextWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__updateMediaAnnotationTextWithIdResponse
#define soap_read_tns__updateMediaAnnotationTextWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateMediaAnnotationTextWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateMediaAnnotationTextWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__updateMediaAnnotationTextWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateMediaAnnotationTextWithIdResponse * soap_new_tns__updateMediaAnnotationTextWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateMediaAnnotationTextWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__updateMediaAnnotationTextWithIdResponse * soap_new_req_tns__updateMediaAnnotationTextWithIdResponse(struct soap *soap, bool return_) { tns__updateMediaAnnotationTextWithIdResponse *_p = soap_instantiate_tns__updateMediaAnnotationTextWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationTextWithIdResponse::return_ = return_; } return _p; }

inline tns__updateMediaAnnotationTextWithIdResponse * soap_new_set_tns__updateMediaAnnotationTextWithIdResponse(struct soap *soap, bool return_) { tns__updateMediaAnnotationTextWithIdResponse *_p = soap_instantiate_tns__updateMediaAnnotationTextWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationTextWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__updateMediaAnnotationTextWithIdResponse(struct soap *soap, tns__updateMediaAnnotationTextWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateMediaAnnotationTextWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateMediaAnnotationTextWithId
#define SOAP_TYPE_Annot_tns__updateMediaAnnotationTextWithId (108)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateMediaAnnotationTextWithId(struct soap*, const char*, int, const tns__updateMediaAnnotationTextWithId *, const char*);
SOAP_FMAC3 tns__updateMediaAnnotationTextWithId * SOAP_FMAC4 soap_in_tns__updateMediaAnnotationTextWithId(struct soap*, const char*, tns__updateMediaAnnotationTextWithId *, const char*);

#ifndef soap_write_tns__updateMediaAnnotationTextWithId
#define soap_write_tns__updateMediaAnnotationTextWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateMediaAnnotationTextWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationTextWithId * SOAP_FMAC4 soap_get_tns__updateMediaAnnotationTextWithId(struct soap*, tns__updateMediaAnnotationTextWithId *, const char*, const char*);

#ifndef soap_read_tns__updateMediaAnnotationTextWithId
#define soap_read_tns__updateMediaAnnotationTextWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateMediaAnnotationTextWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateMediaAnnotationTextWithId * SOAP_FMAC2 soap_instantiate_tns__updateMediaAnnotationTextWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateMediaAnnotationTextWithId * soap_new_tns__updateMediaAnnotationTextWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateMediaAnnotationTextWithId(soap, n, NULL, NULL, NULL); }

inline tns__updateMediaAnnotationTextWithId * soap_new_req_tns__updateMediaAnnotationTextWithId(struct soap *soap, LONG64 id) { tns__updateMediaAnnotationTextWithId *_p = soap_instantiate_tns__updateMediaAnnotationTextWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationTextWithId::id = id; } return _p; }

inline tns__updateMediaAnnotationTextWithId * soap_new_set_tns__updateMediaAnnotationTextWithId(struct soap *soap, std::string *text, LONG64 id) { tns__updateMediaAnnotationTextWithId *_p = soap_instantiate_tns__updateMediaAnnotationTextWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationTextWithId::text = text; _p->tns__updateMediaAnnotationTextWithId::id = id; } return _p; }

inline void soap_delete_tns__updateMediaAnnotationTextWithId(struct soap *soap, tns__updateMediaAnnotationTextWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateMediaAnnotationTextWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateMediaAnnotationLanguageWithIdResponse
#define SOAP_TYPE_Annot_tns__updateMediaAnnotationLanguageWithIdResponse (107)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, const char*, int, const tns__updateMediaAnnotationLanguageWithIdResponse *, const char*);
SOAP_FMAC3 tns__updateMediaAnnotationLanguageWithIdResponse * SOAP_FMAC4 soap_in_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, const char*, tns__updateMediaAnnotationLanguageWithIdResponse *, const char*);

#ifndef soap_write_tns__updateMediaAnnotationLanguageWithIdResponse
#define soap_write_tns__updateMediaAnnotationLanguageWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateMediaAnnotationLanguageWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationLanguageWithIdResponse * SOAP_FMAC4 soap_get_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, tns__updateMediaAnnotationLanguageWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__updateMediaAnnotationLanguageWithIdResponse
#define soap_read_tns__updateMediaAnnotationLanguageWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateMediaAnnotationLanguageWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateMediaAnnotationLanguageWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateMediaAnnotationLanguageWithIdResponse * soap_new_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateMediaAnnotationLanguageWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__updateMediaAnnotationLanguageWithIdResponse * soap_new_req_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap *soap, bool return_) { tns__updateMediaAnnotationLanguageWithIdResponse *_p = soap_instantiate_tns__updateMediaAnnotationLanguageWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationLanguageWithIdResponse::return_ = return_; } return _p; }

inline tns__updateMediaAnnotationLanguageWithIdResponse * soap_new_set_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap *soap, bool return_) { tns__updateMediaAnnotationLanguageWithIdResponse *_p = soap_instantiate_tns__updateMediaAnnotationLanguageWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationLanguageWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap *soap, tns__updateMediaAnnotationLanguageWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateMediaAnnotationLanguageWithId
#define SOAP_TYPE_Annot_tns__updateMediaAnnotationLanguageWithId (106)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateMediaAnnotationLanguageWithId(struct soap*, const char*, int, const tns__updateMediaAnnotationLanguageWithId *, const char*);
SOAP_FMAC3 tns__updateMediaAnnotationLanguageWithId * SOAP_FMAC4 soap_in_tns__updateMediaAnnotationLanguageWithId(struct soap*, const char*, tns__updateMediaAnnotationLanguageWithId *, const char*);

#ifndef soap_write_tns__updateMediaAnnotationLanguageWithId
#define soap_write_tns__updateMediaAnnotationLanguageWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateMediaAnnotationLanguageWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationLanguageWithId * SOAP_FMAC4 soap_get_tns__updateMediaAnnotationLanguageWithId(struct soap*, tns__updateMediaAnnotationLanguageWithId *, const char*, const char*);

#ifndef soap_read_tns__updateMediaAnnotationLanguageWithId
#define soap_read_tns__updateMediaAnnotationLanguageWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateMediaAnnotationLanguageWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateMediaAnnotationLanguageWithId * SOAP_FMAC2 soap_instantiate_tns__updateMediaAnnotationLanguageWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateMediaAnnotationLanguageWithId * soap_new_tns__updateMediaAnnotationLanguageWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateMediaAnnotationLanguageWithId(soap, n, NULL, NULL, NULL); }

inline tns__updateMediaAnnotationLanguageWithId * soap_new_req_tns__updateMediaAnnotationLanguageWithId(struct soap *soap, int language, LONG64 id) { tns__updateMediaAnnotationLanguageWithId *_p = soap_instantiate_tns__updateMediaAnnotationLanguageWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationLanguageWithId::language = language; _p->tns__updateMediaAnnotationLanguageWithId::id = id; } return _p; }

inline tns__updateMediaAnnotationLanguageWithId * soap_new_set_tns__updateMediaAnnotationLanguageWithId(struct soap *soap, int language, LONG64 id) { tns__updateMediaAnnotationLanguageWithId *_p = soap_instantiate_tns__updateMediaAnnotationLanguageWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateMediaAnnotationLanguageWithId::language = language; _p->tns__updateMediaAnnotationLanguageWithId::id = id; } return _p; }

inline void soap_delete_tns__updateMediaAnnotationLanguageWithId(struct soap *soap, tns__updateMediaAnnotationLanguageWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateMediaAnnotationLanguageWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateGameThreadResponse
#define SOAP_TYPE_Annot_tns__updateGameThreadResponse (105)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateGameThreadResponse(struct soap*, const char*, int, const tns__updateGameThreadResponse *, const char*);
SOAP_FMAC3 tns__updateGameThreadResponse * SOAP_FMAC4 soap_in_tns__updateGameThreadResponse(struct soap*, const char*, tns__updateGameThreadResponse *, const char*);

#ifndef soap_write_tns__updateGameThreadResponse
#define soap_write_tns__updateGameThreadResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateGameThreadResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateGameThreadResponse * SOAP_FMAC4 soap_get_tns__updateGameThreadResponse(struct soap*, tns__updateGameThreadResponse *, const char*, const char*);

#ifndef soap_read_tns__updateGameThreadResponse
#define soap_read_tns__updateGameThreadResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateGameThreadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateGameThreadResponse * SOAP_FMAC2 soap_instantiate_tns__updateGameThreadResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateGameThreadResponse * soap_new_tns__updateGameThreadResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateGameThreadResponse(soap, n, NULL, NULL, NULL); }

inline tns__updateGameThreadResponse * soap_new_req_tns__updateGameThreadResponse(struct soap *soap, bool return_) { tns__updateGameThreadResponse *_p = soap_instantiate_tns__updateGameThreadResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateGameThreadResponse::return_ = return_; } return _p; }

inline tns__updateGameThreadResponse * soap_new_set_tns__updateGameThreadResponse(struct soap *soap, bool return_) { tns__updateGameThreadResponse *_p = soap_instantiate_tns__updateGameThreadResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateGameThreadResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__updateGameThreadResponse(struct soap *soap, tns__updateGameThreadResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateGameThreadResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateGameThread
#define SOAP_TYPE_Annot_tns__updateGameThread (104)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateGameThread(struct soap*, const char*, int, const tns__updateGameThread *, const char*);
SOAP_FMAC3 tns__updateGameThread * SOAP_FMAC4 soap_in_tns__updateGameThread(struct soap*, const char*, tns__updateGameThread *, const char*);

#ifndef soap_write_tns__updateGameThread
#define soap_write_tns__updateGameThread(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateGameThread", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateGameThread * SOAP_FMAC4 soap_get_tns__updateGameThread(struct soap*, tns__updateGameThread *, const char*, const char*);

#ifndef soap_read_tns__updateGameThread
#define soap_read_tns__updateGameThread(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateGameThread(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateGameThread * SOAP_FMAC2 soap_instantiate_tns__updateGameThread(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateGameThread * soap_new_tns__updateGameThread(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateGameThread(soap, n, NULL, NULL, NULL); }

inline tns__updateGameThread * soap_new_req_tns__updateGameThread(struct soap *soap) { tns__updateGameThread *_p = soap_instantiate_tns__updateGameThread(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__updateGameThread * soap_new_set_tns__updateGameThread(struct soap *soap, tns__gameThread *thread) { tns__updateGameThread *_p = soap_instantiate_tns__updateGameThread(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateGameThread::thread = thread; } return _p; }

inline void soap_delete_tns__updateGameThread(struct soap *soap, tns__updateGameThread *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateGameThread(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateGameHookTextWithIdResponse
#define SOAP_TYPE_Annot_tns__updateGameHookTextWithIdResponse (103)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateGameHookTextWithIdResponse(struct soap*, const char*, int, const tns__updateGameHookTextWithIdResponse *, const char*);
SOAP_FMAC3 tns__updateGameHookTextWithIdResponse * SOAP_FMAC4 soap_in_tns__updateGameHookTextWithIdResponse(struct soap*, const char*, tns__updateGameHookTextWithIdResponse *, const char*);

#ifndef soap_write_tns__updateGameHookTextWithIdResponse
#define soap_write_tns__updateGameHookTextWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateGameHookTextWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateGameHookTextWithIdResponse * SOAP_FMAC4 soap_get_tns__updateGameHookTextWithIdResponse(struct soap*, tns__updateGameHookTextWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__updateGameHookTextWithIdResponse
#define soap_read_tns__updateGameHookTextWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateGameHookTextWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateGameHookTextWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__updateGameHookTextWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateGameHookTextWithIdResponse * soap_new_tns__updateGameHookTextWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateGameHookTextWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__updateGameHookTextWithIdResponse * soap_new_req_tns__updateGameHookTextWithIdResponse(struct soap *soap, bool return_) { tns__updateGameHookTextWithIdResponse *_p = soap_instantiate_tns__updateGameHookTextWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateGameHookTextWithIdResponse::return_ = return_; } return _p; }

inline tns__updateGameHookTextWithIdResponse * soap_new_set_tns__updateGameHookTextWithIdResponse(struct soap *soap, bool return_) { tns__updateGameHookTextWithIdResponse *_p = soap_instantiate_tns__updateGameHookTextWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateGameHookTextWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__updateGameHookTextWithIdResponse(struct soap *soap, tns__updateGameHookTextWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateGameHookTextWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__updateGameHookTextWithId
#define SOAP_TYPE_Annot_tns__updateGameHookTextWithId (102)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__updateGameHookTextWithId(struct soap*, const char*, int, const tns__updateGameHookTextWithId *, const char*);
SOAP_FMAC3 tns__updateGameHookTextWithId * SOAP_FMAC4 soap_in_tns__updateGameHookTextWithId(struct soap*, const char*, tns__updateGameHookTextWithId *, const char*);

#ifndef soap_write_tns__updateGameHookTextWithId
#define soap_write_tns__updateGameHookTextWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:updateGameHookTextWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateGameHookTextWithId * SOAP_FMAC4 soap_get_tns__updateGameHookTextWithId(struct soap*, tns__updateGameHookTextWithId *, const char*, const char*);

#ifndef soap_read_tns__updateGameHookTextWithId
#define soap_read_tns__updateGameHookTextWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__updateGameHookTextWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__updateGameHookTextWithId * SOAP_FMAC2 soap_instantiate_tns__updateGameHookTextWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__updateGameHookTextWithId * soap_new_tns__updateGameHookTextWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__updateGameHookTextWithId(soap, n, NULL, NULL, NULL); }

inline tns__updateGameHookTextWithId * soap_new_req_tns__updateGameHookTextWithId(struct soap *soap, LONG64 id) { tns__updateGameHookTextWithId *_p = soap_instantiate_tns__updateGameHookTextWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateGameHookTextWithId::id = id; } return _p; }

inline tns__updateGameHookTextWithId * soap_new_set_tns__updateGameHookTextWithId(struct soap *soap, std::string *text, LONG64 id) { tns__updateGameHookTextWithId *_p = soap_instantiate_tns__updateGameHookTextWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__updateGameHookTextWithId::text = text; _p->tns__updateGameHookTextWithId::id = id; } return _p; }

inline void soap_delete_tns__updateGameHookTextWithId(struct soap *soap, tns__updateGameHookTextWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__updateGameHookTextWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaTokenUrlResponse
#define SOAP_TYPE_Annot_tns__submitMediaTokenUrlResponse (101)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaTokenUrlResponse(struct soap*, const char*, int, const tns__submitMediaTokenUrlResponse *, const char*);
SOAP_FMAC3 tns__submitMediaTokenUrlResponse * SOAP_FMAC4 soap_in_tns__submitMediaTokenUrlResponse(struct soap*, const char*, tns__submitMediaTokenUrlResponse *, const char*);

#ifndef soap_write_tns__submitMediaTokenUrlResponse
#define soap_write_tns__submitMediaTokenUrlResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaTokenUrlResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenUrlResponse * SOAP_FMAC4 soap_get_tns__submitMediaTokenUrlResponse(struct soap*, tns__submitMediaTokenUrlResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaTokenUrlResponse
#define soap_read_tns__submitMediaTokenUrlResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaTokenUrlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaTokenUrlResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaTokenUrlResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaTokenUrlResponse * soap_new_tns__submitMediaTokenUrlResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaTokenUrlResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaTokenUrlResponse * soap_new_req_tns__submitMediaTokenUrlResponse(struct soap *soap, LONG64 return_) { tns__submitMediaTokenUrlResponse *_p = soap_instantiate_tns__submitMediaTokenUrlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenUrlResponse::return_ = return_; } return _p; }

inline tns__submitMediaTokenUrlResponse * soap_new_set_tns__submitMediaTokenUrlResponse(struct soap *soap, LONG64 return_) { tns__submitMediaTokenUrlResponse *_p = soap_instantiate_tns__submitMediaTokenUrlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenUrlResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaTokenUrlResponse(struct soap *soap, tns__submitMediaTokenUrlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaTokenUrlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaTokenUrl
#define SOAP_TYPE_Annot_tns__submitMediaTokenUrl (100)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaTokenUrl(struct soap*, const char*, int, const tns__submitMediaTokenUrl *, const char*);
SOAP_FMAC3 tns__submitMediaTokenUrl * SOAP_FMAC4 soap_in_tns__submitMediaTokenUrl(struct soap*, const char*, tns__submitMediaTokenUrl *, const char*);

#ifndef soap_write_tns__submitMediaTokenUrl
#define soap_write_tns__submitMediaTokenUrl(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaTokenUrl", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenUrl * SOAP_FMAC4 soap_get_tns__submitMediaTokenUrl(struct soap*, tns__submitMediaTokenUrl *, const char*, const char*);

#ifndef soap_read_tns__submitMediaTokenUrl
#define soap_read_tns__submitMediaTokenUrl(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaTokenUrl(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaTokenUrl * SOAP_FMAC2 soap_instantiate_tns__submitMediaTokenUrl(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaTokenUrl * soap_new_tns__submitMediaTokenUrl(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaTokenUrl(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaTokenUrl * soap_new_req_tns__submitMediaTokenUrl(struct soap *soap, int section, int type) { tns__submitMediaTokenUrl *_p = soap_instantiate_tns__submitMediaTokenUrl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenUrl::section = section; _p->tns__submitMediaTokenUrl::type = type; } return _p; }

inline tns__submitMediaTokenUrl * soap_new_set_tns__submitMediaTokenUrl(struct soap *soap, std::string *url, int section, int type) { tns__submitMediaTokenUrl *_p = soap_instantiate_tns__submitMediaTokenUrl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenUrl::url = url; _p->tns__submitMediaTokenUrl::section = section; _p->tns__submitMediaTokenUrl::type = type; } return _p; }

inline void soap_delete_tns__submitMediaTokenUrl(struct soap *soap, tns__submitMediaTokenUrl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaTokenUrl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaTokenDigestResponse
#define SOAP_TYPE_Annot_tns__submitMediaTokenDigestResponse (99)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaTokenDigestResponse(struct soap*, const char*, int, const tns__submitMediaTokenDigestResponse *, const char*);
SOAP_FMAC3 tns__submitMediaTokenDigestResponse * SOAP_FMAC4 soap_in_tns__submitMediaTokenDigestResponse(struct soap*, const char*, tns__submitMediaTokenDigestResponse *, const char*);

#ifndef soap_write_tns__submitMediaTokenDigestResponse
#define soap_write_tns__submitMediaTokenDigestResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenDigestResponse * SOAP_FMAC4 soap_get_tns__submitMediaTokenDigestResponse(struct soap*, tns__submitMediaTokenDigestResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaTokenDigestResponse
#define soap_read_tns__submitMediaTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaTokenDigestResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaTokenDigestResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaTokenDigestResponse * soap_new_tns__submitMediaTokenDigestResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaTokenDigestResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaTokenDigestResponse * soap_new_req_tns__submitMediaTokenDigestResponse(struct soap *soap, LONG64 return_) { tns__submitMediaTokenDigestResponse *_p = soap_instantiate_tns__submitMediaTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenDigestResponse::return_ = return_; } return _p; }

inline tns__submitMediaTokenDigestResponse * soap_new_set_tns__submitMediaTokenDigestResponse(struct soap *soap, LONG64 return_) { tns__submitMediaTokenDigestResponse *_p = soap_instantiate_tns__submitMediaTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenDigestResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaTokenDigestResponse(struct soap *soap, tns__submitMediaTokenDigestResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaTokenDigestResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaTokenDigest
#define SOAP_TYPE_Annot_tns__submitMediaTokenDigest (98)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaTokenDigest(struct soap*, const char*, int, const tns__submitMediaTokenDigest *, const char*);
SOAP_FMAC3 tns__submitMediaTokenDigest * SOAP_FMAC4 soap_in_tns__submitMediaTokenDigest(struct soap*, const char*, tns__submitMediaTokenDigest *, const char*);

#ifndef soap_write_tns__submitMediaTokenDigest
#define soap_write_tns__submitMediaTokenDigest(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenDigest * SOAP_FMAC4 soap_get_tns__submitMediaTokenDigest(struct soap*, tns__submitMediaTokenDigest *, const char*, const char*);

#ifndef soap_read_tns__submitMediaTokenDigest
#define soap_read_tns__submitMediaTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaTokenDigest * SOAP_FMAC2 soap_instantiate_tns__submitMediaTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaTokenDigest * soap_new_tns__submitMediaTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaTokenDigest(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaTokenDigest * soap_new_req_tns__submitMediaTokenDigest(struct soap *soap, int section, int type) { tns__submitMediaTokenDigest *_p = soap_instantiate_tns__submitMediaTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenDigest::section = section; _p->tns__submitMediaTokenDigest::type = type; } return _p; }

inline tns__submitMediaTokenDigest * soap_new_set_tns__submitMediaTokenDigest(struct soap *soap, std::string *digest, int section, int type) { tns__submitMediaTokenDigest *_p = soap_instantiate_tns__submitMediaTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenDigest::digest = digest; _p->tns__submitMediaTokenDigest::section = section; _p->tns__submitMediaTokenDigest::type = type; } return _p; }

inline void soap_delete_tns__submitMediaTokenDigest(struct soap *soap, tns__submitMediaTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaTokenResponse
#define SOAP_TYPE_Annot_tns__submitMediaTokenResponse (97)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaTokenResponse(struct soap*, const char*, int, const tns__submitMediaTokenResponse *, const char*);
SOAP_FMAC3 tns__submitMediaTokenResponse * SOAP_FMAC4 soap_in_tns__submitMediaTokenResponse(struct soap*, const char*, tns__submitMediaTokenResponse *, const char*);

#ifndef soap_write_tns__submitMediaTokenResponse
#define soap_write_tns__submitMediaTokenResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaTokenResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenResponse * SOAP_FMAC4 soap_get_tns__submitMediaTokenResponse(struct soap*, tns__submitMediaTokenResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaTokenResponse
#define soap_read_tns__submitMediaTokenResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaTokenResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaTokenResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaTokenResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaTokenResponse * soap_new_tns__submitMediaTokenResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaTokenResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaTokenResponse * soap_new_req_tns__submitMediaTokenResponse(struct soap *soap, LONG64 return_) { tns__submitMediaTokenResponse *_p = soap_instantiate_tns__submitMediaTokenResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenResponse::return_ = return_; } return _p; }

inline tns__submitMediaTokenResponse * soap_new_set_tns__submitMediaTokenResponse(struct soap *soap, LONG64 return_) { tns__submitMediaTokenResponse *_p = soap_instantiate_tns__submitMediaTokenResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaTokenResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaTokenResponse(struct soap *soap, tns__submitMediaTokenResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaTokenResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaToken
#define SOAP_TYPE_Annot_tns__submitMediaToken (96)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaToken(struct soap*, const char*, int, const tns__submitMediaToken *, const char*);
SOAP_FMAC3 tns__submitMediaToken * SOAP_FMAC4 soap_in_tns__submitMediaToken(struct soap*, const char*, tns__submitMediaToken *, const char*);

#ifndef soap_write_tns__submitMediaToken
#define soap_write_tns__submitMediaToken(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaToken", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaToken * SOAP_FMAC4 soap_get_tns__submitMediaToken(struct soap*, tns__submitMediaToken *, const char*, const char*);

#ifndef soap_read_tns__submitMediaToken
#define soap_read_tns__submitMediaToken(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaToken(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaToken * SOAP_FMAC2 soap_instantiate_tns__submitMediaToken(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaToken * soap_new_tns__submitMediaToken(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaToken(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaToken * soap_new_req_tns__submitMediaToken(struct soap *soap) { tns__submitMediaToken *_p = soap_instantiate_tns__submitMediaToken(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__submitMediaToken * soap_new_set_tns__submitMediaToken(struct soap *soap, tns__mediaToken *token) { tns__submitMediaToken *_p = soap_instantiate_tns__submitMediaToken(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaToken::token = token; } return _p; }

inline void soap_delete_tns__submitMediaToken(struct soap *soap, tns__submitMediaToken *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaToken(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAnnotationTextWithTokenIdResponse
#define SOAP_TYPE_Annot_tns__submitMediaAnnotationTextWithTokenIdResponse (95)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, const char*, int, const tns__submitMediaAnnotationTextWithTokenIdResponse *, const char*);
SOAP_FMAC3 tns__submitMediaAnnotationTextWithTokenIdResponse * SOAP_FMAC4 soap_in_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, const char*, tns__submitMediaAnnotationTextWithTokenIdResponse *, const char*);

#ifndef soap_write_tns__submitMediaAnnotationTextWithTokenIdResponse
#define soap_write_tns__submitMediaAnnotationTextWithTokenIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAnnotationTextWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationTextWithTokenIdResponse * SOAP_FMAC4 soap_get_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, tns__submitMediaAnnotationTextWithTokenIdResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAnnotationTextWithTokenIdResponse
#define soap_read_tns__submitMediaAnnotationTextWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAnnotationTextWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAnnotationTextWithTokenIdResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAnnotationTextWithTokenIdResponse * soap_new_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAnnotationTextWithTokenIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAnnotationTextWithTokenIdResponse * soap_new_req_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAnnotationTextWithTokenIdResponse *_p = soap_instantiate_tns__submitMediaAnnotationTextWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationTextWithTokenIdResponse::return_ = return_; } return _p; }

inline tns__submitMediaAnnotationTextWithTokenIdResponse * soap_new_set_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAnnotationTextWithTokenIdResponse *_p = soap_instantiate_tns__submitMediaAnnotationTextWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationTextWithTokenIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap *soap, tns__submitMediaAnnotationTextWithTokenIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAnnotationTextWithTokenId
#define SOAP_TYPE_Annot_tns__submitMediaAnnotationTextWithTokenId (94)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAnnotationTextWithTokenId(struct soap*, const char*, int, const tns__submitMediaAnnotationTextWithTokenId *, const char*);
SOAP_FMAC3 tns__submitMediaAnnotationTextWithTokenId * SOAP_FMAC4 soap_in_tns__submitMediaAnnotationTextWithTokenId(struct soap*, const char*, tns__submitMediaAnnotationTextWithTokenId *, const char*);

#ifndef soap_write_tns__submitMediaAnnotationTextWithTokenId
#define soap_write_tns__submitMediaAnnotationTextWithTokenId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAnnotationTextWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationTextWithTokenId * SOAP_FMAC4 soap_get_tns__submitMediaAnnotationTextWithTokenId(struct soap*, tns__submitMediaAnnotationTextWithTokenId *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAnnotationTextWithTokenId
#define soap_read_tns__submitMediaAnnotationTextWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAnnotationTextWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAnnotationTextWithTokenId * SOAP_FMAC2 soap_instantiate_tns__submitMediaAnnotationTextWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAnnotationTextWithTokenId * soap_new_tns__submitMediaAnnotationTextWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAnnotationTextWithTokenId(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAnnotationTextWithTokenId * soap_new_req_tns__submitMediaAnnotationTextWithTokenId(struct soap *soap, LONG64 pos, int posType, LONG64 tokenId) { tns__submitMediaAnnotationTextWithTokenId *_p = soap_instantiate_tns__submitMediaAnnotationTextWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationTextWithTokenId::pos = pos; _p->tns__submitMediaAnnotationTextWithTokenId::posType = posType; _p->tns__submitMediaAnnotationTextWithTokenId::tokenId = tokenId; } return _p; }

inline tns__submitMediaAnnotationTextWithTokenId * soap_new_set_tns__submitMediaAnnotationTextWithTokenId(struct soap *soap, std::string *text, LONG64 pos, int posType, LONG64 tokenId) { tns__submitMediaAnnotationTextWithTokenId *_p = soap_instantiate_tns__submitMediaAnnotationTextWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationTextWithTokenId::text = text; _p->tns__submitMediaAnnotationTextWithTokenId::pos = pos; _p->tns__submitMediaAnnotationTextWithTokenId::posType = posType; _p->tns__submitMediaAnnotationTextWithTokenId::tokenId = tokenId; } return _p; }

inline void soap_delete_tns__submitMediaAnnotationTextWithTokenId(struct soap *soap, tns__submitMediaAnnotationTextWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAnnotationTextWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAnnotationTextAndTokenDigestResponse
#define SOAP_TYPE_Annot_tns__submitMediaAnnotationTextAndTokenDigestResponse (93)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, const char*, int, const tns__submitMediaAnnotationTextAndTokenDigestResponse *, const char*);
SOAP_FMAC3 tns__submitMediaAnnotationTextAndTokenDigestResponse * SOAP_FMAC4 soap_in_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, const char*, tns__submitMediaAnnotationTextAndTokenDigestResponse *, const char*);

#ifndef soap_write_tns__submitMediaAnnotationTextAndTokenDigestResponse
#define soap_write_tns__submitMediaAnnotationTextAndTokenDigestResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAnnotationTextAndTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationTextAndTokenDigestResponse * SOAP_FMAC4 soap_get_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, tns__submitMediaAnnotationTextAndTokenDigestResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAnnotationTextAndTokenDigestResponse
#define soap_read_tns__submitMediaAnnotationTextAndTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAnnotationTextAndTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAnnotationTextAndTokenDigestResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAnnotationTextAndTokenDigestResponse * soap_new_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAnnotationTextAndTokenDigestResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAnnotationTextAndTokenDigestResponse * soap_new_req_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAnnotationTextAndTokenDigestResponse *_p = soap_instantiate_tns__submitMediaAnnotationTextAndTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationTextAndTokenDigestResponse::return_ = return_; } return _p; }

inline tns__submitMediaAnnotationTextAndTokenDigestResponse * soap_new_set_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAnnotationTextAndTokenDigestResponse *_p = soap_instantiate_tns__submitMediaAnnotationTextAndTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationTextAndTokenDigestResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap *soap, tns__submitMediaAnnotationTextAndTokenDigestResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAnnotationTextAndTokenDigest
#define SOAP_TYPE_Annot_tns__submitMediaAnnotationTextAndTokenDigest (92)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, const char*, int, const tns__submitMediaAnnotationTextAndTokenDigest *, const char*);
SOAP_FMAC3 tns__submitMediaAnnotationTextAndTokenDigest * SOAP_FMAC4 soap_in_tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, const char*, tns__submitMediaAnnotationTextAndTokenDigest *, const char*);

#ifndef soap_write_tns__submitMediaAnnotationTextAndTokenDigest
#define soap_write_tns__submitMediaAnnotationTextAndTokenDigest(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAnnotationTextAndTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationTextAndTokenDigest * SOAP_FMAC4 soap_get_tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, tns__submitMediaAnnotationTextAndTokenDigest *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAnnotationTextAndTokenDigest
#define soap_read_tns__submitMediaAnnotationTextAndTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAnnotationTextAndTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAnnotationTextAndTokenDigest * SOAP_FMAC2 soap_instantiate_tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAnnotationTextAndTokenDigest * soap_new_tns__submitMediaAnnotationTextAndTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAnnotationTextAndTokenDigest(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAnnotationTextAndTokenDigest * soap_new_req_tns__submitMediaAnnotationTextAndTokenDigest(struct soap *soap, LONG64 pos, int posType, int tokenSection) { tns__submitMediaAnnotationTextAndTokenDigest *_p = soap_instantiate_tns__submitMediaAnnotationTextAndTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationTextAndTokenDigest::pos = pos; _p->tns__submitMediaAnnotationTextAndTokenDigest::posType = posType; _p->tns__submitMediaAnnotationTextAndTokenDigest::tokenSection = tokenSection; } return _p; }

inline tns__submitMediaAnnotationTextAndTokenDigest * soap_new_set_tns__submitMediaAnnotationTextAndTokenDigest(struct soap *soap, std::string *text, LONG64 pos, int posType, std::string *tokenDigest, int tokenSection) { tns__submitMediaAnnotationTextAndTokenDigest *_p = soap_instantiate_tns__submitMediaAnnotationTextAndTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationTextAndTokenDigest::text = text; _p->tns__submitMediaAnnotationTextAndTokenDigest::pos = pos; _p->tns__submitMediaAnnotationTextAndTokenDigest::posType = posType; _p->tns__submitMediaAnnotationTextAndTokenDigest::tokenDigest = tokenDigest; _p->tns__submitMediaAnnotationTextAndTokenDigest::tokenSection = tokenSection; } return _p; }

inline void soap_delete_tns__submitMediaAnnotationTextAndTokenDigest(struct soap *soap, tns__submitMediaAnnotationTextAndTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAnnotationResponse
#define SOAP_TYPE_Annot_tns__submitMediaAnnotationResponse (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAnnotationResponse(struct soap*, const char*, int, const tns__submitMediaAnnotationResponse *, const char*);
SOAP_FMAC3 tns__submitMediaAnnotationResponse * SOAP_FMAC4 soap_in_tns__submitMediaAnnotationResponse(struct soap*, const char*, tns__submitMediaAnnotationResponse *, const char*);

#ifndef soap_write_tns__submitMediaAnnotationResponse
#define soap_write_tns__submitMediaAnnotationResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAnnotationResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationResponse * SOAP_FMAC4 soap_get_tns__submitMediaAnnotationResponse(struct soap*, tns__submitMediaAnnotationResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAnnotationResponse
#define soap_read_tns__submitMediaAnnotationResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAnnotationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAnnotationResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaAnnotationResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAnnotationResponse * soap_new_tns__submitMediaAnnotationResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAnnotationResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAnnotationResponse * soap_new_req_tns__submitMediaAnnotationResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAnnotationResponse *_p = soap_instantiate_tns__submitMediaAnnotationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationResponse::return_ = return_; } return _p; }

inline tns__submitMediaAnnotationResponse * soap_new_set_tns__submitMediaAnnotationResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAnnotationResponse *_p = soap_instantiate_tns__submitMediaAnnotationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotationResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaAnnotationResponse(struct soap *soap, tns__submitMediaAnnotationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAnnotationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAnnotation
#define SOAP_TYPE_Annot_tns__submitMediaAnnotation (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAnnotation(struct soap*, const char*, int, const tns__submitMediaAnnotation *, const char*);
SOAP_FMAC3 tns__submitMediaAnnotation * SOAP_FMAC4 soap_in_tns__submitMediaAnnotation(struct soap*, const char*, tns__submitMediaAnnotation *, const char*);

#ifndef soap_write_tns__submitMediaAnnotation
#define soap_write_tns__submitMediaAnnotation(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotation * SOAP_FMAC4 soap_get_tns__submitMediaAnnotation(struct soap*, tns__submitMediaAnnotation *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAnnotation
#define soap_read_tns__submitMediaAnnotation(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAnnotation * SOAP_FMAC2 soap_instantiate_tns__submitMediaAnnotation(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAnnotation * soap_new_tns__submitMediaAnnotation(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAnnotation(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAnnotation * soap_new_req_tns__submitMediaAnnotation(struct soap *soap) { tns__submitMediaAnnotation *_p = soap_instantiate_tns__submitMediaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__submitMediaAnnotation * soap_new_set_tns__submitMediaAnnotation(struct soap *soap, tns__mediaAnnotation *annot) { tns__submitMediaAnnotation *_p = soap_instantiate_tns__submitMediaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAnnotation::annot = annot; } return _p; }

inline void soap_delete_tns__submitMediaAnnotation(struct soap *soap, tns__submitMediaAnnotation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAnnotation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAliasTextWithTokenIdResponse
#define SOAP_TYPE_Annot_tns__submitMediaAliasTextWithTokenIdResponse (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAliasTextWithTokenIdResponse(struct soap*, const char*, int, const tns__submitMediaAliasTextWithTokenIdResponse *, const char*);
SOAP_FMAC3 tns__submitMediaAliasTextWithTokenIdResponse * SOAP_FMAC4 soap_in_tns__submitMediaAliasTextWithTokenIdResponse(struct soap*, const char*, tns__submitMediaAliasTextWithTokenIdResponse *, const char*);

#ifndef soap_write_tns__submitMediaAliasTextWithTokenIdResponse
#define soap_write_tns__submitMediaAliasTextWithTokenIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAliasTextWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasTextWithTokenIdResponse * SOAP_FMAC4 soap_get_tns__submitMediaAliasTextWithTokenIdResponse(struct soap*, tns__submitMediaAliasTextWithTokenIdResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAliasTextWithTokenIdResponse
#define soap_read_tns__submitMediaAliasTextWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAliasTextWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAliasTextWithTokenIdResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaAliasTextWithTokenIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAliasTextWithTokenIdResponse * soap_new_tns__submitMediaAliasTextWithTokenIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAliasTextWithTokenIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAliasTextWithTokenIdResponse * soap_new_req_tns__submitMediaAliasTextWithTokenIdResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAliasTextWithTokenIdResponse *_p = soap_instantiate_tns__submitMediaAliasTextWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasTextWithTokenIdResponse::return_ = return_; } return _p; }

inline tns__submitMediaAliasTextWithTokenIdResponse * soap_new_set_tns__submitMediaAliasTextWithTokenIdResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAliasTextWithTokenIdResponse *_p = soap_instantiate_tns__submitMediaAliasTextWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasTextWithTokenIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaAliasTextWithTokenIdResponse(struct soap *soap, tns__submitMediaAliasTextWithTokenIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAliasTextWithTokenIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAliasTextWithTokenId
#define SOAP_TYPE_Annot_tns__submitMediaAliasTextWithTokenId (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAliasTextWithTokenId(struct soap*, const char*, int, const tns__submitMediaAliasTextWithTokenId *, const char*);
SOAP_FMAC3 tns__submitMediaAliasTextWithTokenId * SOAP_FMAC4 soap_in_tns__submitMediaAliasTextWithTokenId(struct soap*, const char*, tns__submitMediaAliasTextWithTokenId *, const char*);

#ifndef soap_write_tns__submitMediaAliasTextWithTokenId
#define soap_write_tns__submitMediaAliasTextWithTokenId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAliasTextWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasTextWithTokenId * SOAP_FMAC4 soap_get_tns__submitMediaAliasTextWithTokenId(struct soap*, tns__submitMediaAliasTextWithTokenId *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAliasTextWithTokenId
#define soap_read_tns__submitMediaAliasTextWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAliasTextWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAliasTextWithTokenId * SOAP_FMAC2 soap_instantiate_tns__submitMediaAliasTextWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAliasTextWithTokenId * soap_new_tns__submitMediaAliasTextWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAliasTextWithTokenId(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAliasTextWithTokenId * soap_new_req_tns__submitMediaAliasTextWithTokenId(struct soap *soap, int type, LONG64 tokenId) { tns__submitMediaAliasTextWithTokenId *_p = soap_instantiate_tns__submitMediaAliasTextWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasTextWithTokenId::type = type; _p->tns__submitMediaAliasTextWithTokenId::tokenId = tokenId; } return _p; }

inline tns__submitMediaAliasTextWithTokenId * soap_new_set_tns__submitMediaAliasTextWithTokenId(struct soap *soap, std::string *text, int type, LONG64 tokenId) { tns__submitMediaAliasTextWithTokenId *_p = soap_instantiate_tns__submitMediaAliasTextWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasTextWithTokenId::text = text; _p->tns__submitMediaAliasTextWithTokenId::type = type; _p->tns__submitMediaAliasTextWithTokenId::tokenId = tokenId; } return _p; }

inline void soap_delete_tns__submitMediaAliasTextWithTokenId(struct soap *soap, tns__submitMediaAliasTextWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAliasTextWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAliasTextAndTokenDigestResponse
#define SOAP_TYPE_Annot_tns__submitMediaAliasTextAndTokenDigestResponse (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, const char*, int, const tns__submitMediaAliasTextAndTokenDigestResponse *, const char*);
SOAP_FMAC3 tns__submitMediaAliasTextAndTokenDigestResponse * SOAP_FMAC4 soap_in_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, const char*, tns__submitMediaAliasTextAndTokenDigestResponse *, const char*);

#ifndef soap_write_tns__submitMediaAliasTextAndTokenDigestResponse
#define soap_write_tns__submitMediaAliasTextAndTokenDigestResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAliasTextAndTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasTextAndTokenDigestResponse * SOAP_FMAC4 soap_get_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, tns__submitMediaAliasTextAndTokenDigestResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAliasTextAndTokenDigestResponse
#define soap_read_tns__submitMediaAliasTextAndTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAliasTextAndTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAliasTextAndTokenDigestResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAliasTextAndTokenDigestResponse * soap_new_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAliasTextAndTokenDigestResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAliasTextAndTokenDigestResponse * soap_new_req_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAliasTextAndTokenDigestResponse *_p = soap_instantiate_tns__submitMediaAliasTextAndTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasTextAndTokenDigestResponse::return_ = return_; } return _p; }

inline tns__submitMediaAliasTextAndTokenDigestResponse * soap_new_set_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAliasTextAndTokenDigestResponse *_p = soap_instantiate_tns__submitMediaAliasTextAndTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasTextAndTokenDigestResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap *soap, tns__submitMediaAliasTextAndTokenDigestResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAliasTextAndTokenDigest
#define SOAP_TYPE_Annot_tns__submitMediaAliasTextAndTokenDigest (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAliasTextAndTokenDigest(struct soap*, const char*, int, const tns__submitMediaAliasTextAndTokenDigest *, const char*);
SOAP_FMAC3 tns__submitMediaAliasTextAndTokenDigest * SOAP_FMAC4 soap_in_tns__submitMediaAliasTextAndTokenDigest(struct soap*, const char*, tns__submitMediaAliasTextAndTokenDigest *, const char*);

#ifndef soap_write_tns__submitMediaAliasTextAndTokenDigest
#define soap_write_tns__submitMediaAliasTextAndTokenDigest(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAliasTextAndTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasTextAndTokenDigest * SOAP_FMAC4 soap_get_tns__submitMediaAliasTextAndTokenDigest(struct soap*, tns__submitMediaAliasTextAndTokenDigest *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAliasTextAndTokenDigest
#define soap_read_tns__submitMediaAliasTextAndTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAliasTextAndTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAliasTextAndTokenDigest * SOAP_FMAC2 soap_instantiate_tns__submitMediaAliasTextAndTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAliasTextAndTokenDigest * soap_new_tns__submitMediaAliasTextAndTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAliasTextAndTokenDigest(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAliasTextAndTokenDigest * soap_new_req_tns__submitMediaAliasTextAndTokenDigest(struct soap *soap, int type, int tokenSection) { tns__submitMediaAliasTextAndTokenDigest *_p = soap_instantiate_tns__submitMediaAliasTextAndTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasTextAndTokenDigest::type = type; _p->tns__submitMediaAliasTextAndTokenDigest::tokenSection = tokenSection; } return _p; }

inline tns__submitMediaAliasTextAndTokenDigest * soap_new_set_tns__submitMediaAliasTextAndTokenDigest(struct soap *soap, std::string *text, int type, std::string *tokenDigest, int tokenSection) { tns__submitMediaAliasTextAndTokenDigest *_p = soap_instantiate_tns__submitMediaAliasTextAndTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasTextAndTokenDigest::text = text; _p->tns__submitMediaAliasTextAndTokenDigest::type = type; _p->tns__submitMediaAliasTextAndTokenDigest::tokenDigest = tokenDigest; _p->tns__submitMediaAliasTextAndTokenDigest::tokenSection = tokenSection; } return _p; }

inline void soap_delete_tns__submitMediaAliasTextAndTokenDigest(struct soap *soap, tns__submitMediaAliasTextAndTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAliasTextAndTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAliasResponse
#define SOAP_TYPE_Annot_tns__submitMediaAliasResponse (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAliasResponse(struct soap*, const char*, int, const tns__submitMediaAliasResponse *, const char*);
SOAP_FMAC3 tns__submitMediaAliasResponse * SOAP_FMAC4 soap_in_tns__submitMediaAliasResponse(struct soap*, const char*, tns__submitMediaAliasResponse *, const char*);

#ifndef soap_write_tns__submitMediaAliasResponse
#define soap_write_tns__submitMediaAliasResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAliasResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasResponse * SOAP_FMAC4 soap_get_tns__submitMediaAliasResponse(struct soap*, tns__submitMediaAliasResponse *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAliasResponse
#define soap_read_tns__submitMediaAliasResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAliasResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAliasResponse * SOAP_FMAC2 soap_instantiate_tns__submitMediaAliasResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAliasResponse * soap_new_tns__submitMediaAliasResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAliasResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAliasResponse * soap_new_req_tns__submitMediaAliasResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAliasResponse *_p = soap_instantiate_tns__submitMediaAliasResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasResponse::return_ = return_; } return _p; }

inline tns__submitMediaAliasResponse * soap_new_set_tns__submitMediaAliasResponse(struct soap *soap, LONG64 return_) { tns__submitMediaAliasResponse *_p = soap_instantiate_tns__submitMediaAliasResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAliasResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitMediaAliasResponse(struct soap *soap, tns__submitMediaAliasResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAliasResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitMediaAlias
#define SOAP_TYPE_Annot_tns__submitMediaAlias (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitMediaAlias(struct soap*, const char*, int, const tns__submitMediaAlias *, const char*);
SOAP_FMAC3 tns__submitMediaAlias * SOAP_FMAC4 soap_in_tns__submitMediaAlias(struct soap*, const char*, tns__submitMediaAlias *, const char*);

#ifndef soap_write_tns__submitMediaAlias
#define soap_write_tns__submitMediaAlias(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitMediaAlias", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAlias * SOAP_FMAC4 soap_get_tns__submitMediaAlias(struct soap*, tns__submitMediaAlias *, const char*, const char*);

#ifndef soap_read_tns__submitMediaAlias
#define soap_read_tns__submitMediaAlias(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitMediaAlias(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitMediaAlias * SOAP_FMAC2 soap_instantiate_tns__submitMediaAlias(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitMediaAlias * soap_new_tns__submitMediaAlias(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitMediaAlias(soap, n, NULL, NULL, NULL); }

inline tns__submitMediaAlias * soap_new_req_tns__submitMediaAlias(struct soap *soap) { tns__submitMediaAlias *_p = soap_instantiate_tns__submitMediaAlias(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__submitMediaAlias * soap_new_set_tns__submitMediaAlias(struct soap *soap, tns__mediaAlias *alias) { tns__submitMediaAlias *_p = soap_instantiate_tns__submitMediaAlias(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitMediaAlias::alias = alias; } return _p; }

inline void soap_delete_tns__submitMediaAlias(struct soap *soap, tns__submitMediaAlias *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitMediaAlias(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitGameThreadResponse
#define SOAP_TYPE_Annot_tns__submitGameThreadResponse (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitGameThreadResponse(struct soap*, const char*, int, const tns__submitGameThreadResponse *, const char*);
SOAP_FMAC3 tns__submitGameThreadResponse * SOAP_FMAC4 soap_in_tns__submitGameThreadResponse(struct soap*, const char*, tns__submitGameThreadResponse *, const char*);

#ifndef soap_write_tns__submitGameThreadResponse
#define soap_write_tns__submitGameThreadResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitGameThreadResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitGameThreadResponse * SOAP_FMAC4 soap_get_tns__submitGameThreadResponse(struct soap*, tns__submitGameThreadResponse *, const char*, const char*);

#ifndef soap_read_tns__submitGameThreadResponse
#define soap_read_tns__submitGameThreadResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitGameThreadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitGameThreadResponse * SOAP_FMAC2 soap_instantiate_tns__submitGameThreadResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitGameThreadResponse * soap_new_tns__submitGameThreadResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitGameThreadResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitGameThreadResponse * soap_new_req_tns__submitGameThreadResponse(struct soap *soap, LONG64 return_) { tns__submitGameThreadResponse *_p = soap_instantiate_tns__submitGameThreadResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitGameThreadResponse::return_ = return_; } return _p; }

inline tns__submitGameThreadResponse * soap_new_set_tns__submitGameThreadResponse(struct soap *soap, LONG64 return_) { tns__submitGameThreadResponse *_p = soap_instantiate_tns__submitGameThreadResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitGameThreadResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitGameThreadResponse(struct soap *soap, tns__submitGameThreadResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitGameThreadResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitGameThread
#define SOAP_TYPE_Annot_tns__submitGameThread (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitGameThread(struct soap*, const char*, int, const tns__submitGameThread *, const char*);
SOAP_FMAC3 tns__submitGameThread * SOAP_FMAC4 soap_in_tns__submitGameThread(struct soap*, const char*, tns__submitGameThread *, const char*);

#ifndef soap_write_tns__submitGameThread
#define soap_write_tns__submitGameThread(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitGameThread", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitGameThread * SOAP_FMAC4 soap_get_tns__submitGameThread(struct soap*, tns__submitGameThread *, const char*, const char*);

#ifndef soap_read_tns__submitGameThread
#define soap_read_tns__submitGameThread(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitGameThread(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitGameThread * SOAP_FMAC2 soap_instantiate_tns__submitGameThread(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitGameThread * soap_new_tns__submitGameThread(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitGameThread(soap, n, NULL, NULL, NULL); }

inline tns__submitGameThread * soap_new_req_tns__submitGameThread(struct soap *soap) { tns__submitGameThread *_p = soap_instantiate_tns__submitGameThread(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__submitGameThread * soap_new_set_tns__submitGameThread(struct soap *soap, tns__gameThread *thread) { tns__submitGameThread *_p = soap_instantiate_tns__submitGameThread(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitGameThread::thread = thread; } return _p; }

inline void soap_delete_tns__submitGameThread(struct soap *soap, tns__submitGameThread *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitGameThread(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitGameHookResponse
#define SOAP_TYPE_Annot_tns__submitGameHookResponse (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitGameHookResponse(struct soap*, const char*, int, const tns__submitGameHookResponse *, const char*);
SOAP_FMAC3 tns__submitGameHookResponse * SOAP_FMAC4 soap_in_tns__submitGameHookResponse(struct soap*, const char*, tns__submitGameHookResponse *, const char*);

#ifndef soap_write_tns__submitGameHookResponse
#define soap_write_tns__submitGameHookResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitGameHookResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitGameHookResponse * SOAP_FMAC4 soap_get_tns__submitGameHookResponse(struct soap*, tns__submitGameHookResponse *, const char*, const char*);

#ifndef soap_read_tns__submitGameHookResponse
#define soap_read_tns__submitGameHookResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitGameHookResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitGameHookResponse * SOAP_FMAC2 soap_instantiate_tns__submitGameHookResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitGameHookResponse * soap_new_tns__submitGameHookResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitGameHookResponse(soap, n, NULL, NULL, NULL); }

inline tns__submitGameHookResponse * soap_new_req_tns__submitGameHookResponse(struct soap *soap, LONG64 return_) { tns__submitGameHookResponse *_p = soap_instantiate_tns__submitGameHookResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitGameHookResponse::return_ = return_; } return _p; }

inline tns__submitGameHookResponse * soap_new_set_tns__submitGameHookResponse(struct soap *soap, LONG64 return_) { tns__submitGameHookResponse *_p = soap_instantiate_tns__submitGameHookResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitGameHookResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__submitGameHookResponse(struct soap *soap, tns__submitGameHookResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitGameHookResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__submitGameHook
#define SOAP_TYPE_Annot_tns__submitGameHook (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__submitGameHook(struct soap*, const char*, int, const tns__submitGameHook *, const char*);
SOAP_FMAC3 tns__submitGameHook * SOAP_FMAC4 soap_in_tns__submitGameHook(struct soap*, const char*, tns__submitGameHook *, const char*);

#ifndef soap_write_tns__submitGameHook
#define soap_write_tns__submitGameHook(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:submitGameHook", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitGameHook * SOAP_FMAC4 soap_get_tns__submitGameHook(struct soap*, tns__submitGameHook *, const char*, const char*);

#ifndef soap_read_tns__submitGameHook
#define soap_read_tns__submitGameHook(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__submitGameHook(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__submitGameHook * SOAP_FMAC2 soap_instantiate_tns__submitGameHook(struct soap*, int, const char*, const char*, size_t*);

inline tns__submitGameHook * soap_new_tns__submitGameHook(struct soap *soap, int n = -1) { return soap_instantiate_tns__submitGameHook(soap, n, NULL, NULL, NULL); }

inline tns__submitGameHook * soap_new_req_tns__submitGameHook(struct soap *soap) { tns__submitGameHook *_p = soap_instantiate_tns__submitGameHook(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__submitGameHook * soap_new_set_tns__submitGameHook(struct soap *soap, tns__gameHook *hook) { tns__submitGameHook *_p = soap_instantiate_tns__submitGameHook(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__submitGameHook::hook = hook; } return _p; }

inline void soap_delete_tns__submitGameHook(struct soap *soap, tns__submitGameHook *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__submitGameHook(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__setUserLanguageResponse
#define SOAP_TYPE_Annot_tns__setUserLanguageResponse (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__setUserLanguageResponse(struct soap*, const char*, int, const tns__setUserLanguageResponse *, const char*);
SOAP_FMAC3 tns__setUserLanguageResponse * SOAP_FMAC4 soap_in_tns__setUserLanguageResponse(struct soap*, const char*, tns__setUserLanguageResponse *, const char*);

#ifndef soap_write_tns__setUserLanguageResponse
#define soap_write_tns__setUserLanguageResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:setUserLanguageResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__setUserLanguageResponse * SOAP_FMAC4 soap_get_tns__setUserLanguageResponse(struct soap*, tns__setUserLanguageResponse *, const char*, const char*);

#ifndef soap_read_tns__setUserLanguageResponse
#define soap_read_tns__setUserLanguageResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__setUserLanguageResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__setUserLanguageResponse * SOAP_FMAC2 soap_instantiate_tns__setUserLanguageResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__setUserLanguageResponse * soap_new_tns__setUserLanguageResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__setUserLanguageResponse(soap, n, NULL, NULL, NULL); }

inline tns__setUserLanguageResponse * soap_new_req_tns__setUserLanguageResponse(struct soap *soap, bool return_) { tns__setUserLanguageResponse *_p = soap_instantiate_tns__setUserLanguageResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__setUserLanguageResponse::return_ = return_; } return _p; }

inline tns__setUserLanguageResponse * soap_new_set_tns__setUserLanguageResponse(struct soap *soap, bool return_) { tns__setUserLanguageResponse *_p = soap_instantiate_tns__setUserLanguageResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__setUserLanguageResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__setUserLanguageResponse(struct soap *soap, tns__setUserLanguageResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__setUserLanguageResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__setUserLanguage
#define SOAP_TYPE_Annot_tns__setUserLanguage (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__setUserLanguage(struct soap*, const char*, int, const tns__setUserLanguage *, const char*);
SOAP_FMAC3 tns__setUserLanguage * SOAP_FMAC4 soap_in_tns__setUserLanguage(struct soap*, const char*, tns__setUserLanguage *, const char*);

#ifndef soap_write_tns__setUserLanguage
#define soap_write_tns__setUserLanguage(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:setUserLanguage", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__setUserLanguage * SOAP_FMAC4 soap_get_tns__setUserLanguage(struct soap*, tns__setUserLanguage *, const char*, const char*);

#ifndef soap_read_tns__setUserLanguage
#define soap_read_tns__setUserLanguage(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__setUserLanguage(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__setUserLanguage * SOAP_FMAC2 soap_instantiate_tns__setUserLanguage(struct soap*, int, const char*, const char*, size_t*);

inline tns__setUserLanguage * soap_new_tns__setUserLanguage(struct soap *soap, int n = -1) { return soap_instantiate_tns__setUserLanguage(soap, n, NULL, NULL, NULL); }

inline tns__setUserLanguage * soap_new_req_tns__setUserLanguage(struct soap *soap, int value) { tns__setUserLanguage *_p = soap_instantiate_tns__setUserLanguage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__setUserLanguage::value = value; } return _p; }

inline tns__setUserLanguage * soap_new_set_tns__setUserLanguage(struct soap *soap, int value) { tns__setUserLanguage *_p = soap_instantiate_tns__setUserLanguage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__setUserLanguage::value = value; } return _p; }

inline void soap_delete_tns__setUserLanguage(struct soap *soap, tns__setUserLanguage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__setUserLanguage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__setUserAnonymousResponse
#define SOAP_TYPE_Annot_tns__setUserAnonymousResponse (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__setUserAnonymousResponse(struct soap*, const char*, int, const tns__setUserAnonymousResponse *, const char*);
SOAP_FMAC3 tns__setUserAnonymousResponse * SOAP_FMAC4 soap_in_tns__setUserAnonymousResponse(struct soap*, const char*, tns__setUserAnonymousResponse *, const char*);

#ifndef soap_write_tns__setUserAnonymousResponse
#define soap_write_tns__setUserAnonymousResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:setUserAnonymousResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__setUserAnonymousResponse * SOAP_FMAC4 soap_get_tns__setUserAnonymousResponse(struct soap*, tns__setUserAnonymousResponse *, const char*, const char*);

#ifndef soap_read_tns__setUserAnonymousResponse
#define soap_read_tns__setUserAnonymousResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__setUserAnonymousResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__setUserAnonymousResponse * SOAP_FMAC2 soap_instantiate_tns__setUserAnonymousResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__setUserAnonymousResponse * soap_new_tns__setUserAnonymousResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__setUserAnonymousResponse(soap, n, NULL, NULL, NULL); }

inline tns__setUserAnonymousResponse * soap_new_req_tns__setUserAnonymousResponse(struct soap *soap, bool return_) { tns__setUserAnonymousResponse *_p = soap_instantiate_tns__setUserAnonymousResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__setUserAnonymousResponse::return_ = return_; } return _p; }

inline tns__setUserAnonymousResponse * soap_new_set_tns__setUserAnonymousResponse(struct soap *soap, bool return_) { tns__setUserAnonymousResponse *_p = soap_instantiate_tns__setUserAnonymousResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__setUserAnonymousResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__setUserAnonymousResponse(struct soap *soap, tns__setUserAnonymousResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__setUserAnonymousResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__setUserAnonymous
#define SOAP_TYPE_Annot_tns__setUserAnonymous (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__setUserAnonymous(struct soap*, const char*, int, const tns__setUserAnonymous *, const char*);
SOAP_FMAC3 tns__setUserAnonymous * SOAP_FMAC4 soap_in_tns__setUserAnonymous(struct soap*, const char*, tns__setUserAnonymous *, const char*);

#ifndef soap_write_tns__setUserAnonymous
#define soap_write_tns__setUserAnonymous(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:setUserAnonymous", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__setUserAnonymous * SOAP_FMAC4 soap_get_tns__setUserAnonymous(struct soap*, tns__setUserAnonymous *, const char*, const char*);

#ifndef soap_read_tns__setUserAnonymous
#define soap_read_tns__setUserAnonymous(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__setUserAnonymous(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__setUserAnonymous * SOAP_FMAC2 soap_instantiate_tns__setUserAnonymous(struct soap*, int, const char*, const char*, size_t*);

inline tns__setUserAnonymous * soap_new_tns__setUserAnonymous(struct soap *soap, int n = -1) { return soap_instantiate_tns__setUserAnonymous(soap, n, NULL, NULL, NULL); }

inline tns__setUserAnonymous * soap_new_req_tns__setUserAnonymous(struct soap *soap, bool value) { tns__setUserAnonymous *_p = soap_instantiate_tns__setUserAnonymous(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__setUserAnonymous::value = value; } return _p; }

inline tns__setUserAnonymous * soap_new_set_tns__setUserAnonymous(struct soap *soap, bool value) { tns__setUserAnonymous *_p = soap_instantiate_tns__setUserAnonymous(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__setUserAnonymous::value = value; } return _p; }

inline void soap_delete_tns__setUserAnonymous(struct soap *soap, tns__setUserAnonymous *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__setUserAnonymous(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectRelatedMediaAnnotationsWithTokenIdResponse
#define SOAP_TYPE_Annot_tns__selectRelatedMediaAnnotationsWithTokenIdResponse (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, const char*, int, const tns__selectRelatedMediaAnnotationsWithTokenIdResponse *, const char*);
SOAP_FMAC3 tns__selectRelatedMediaAnnotationsWithTokenIdResponse * SOAP_FMAC4 soap_in_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, const char*, tns__selectRelatedMediaAnnotationsWithTokenIdResponse *, const char*);

#ifndef soap_write_tns__selectRelatedMediaAnnotationsWithTokenIdResponse
#define soap_write_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectRelatedMediaAnnotationsWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectRelatedMediaAnnotationsWithTokenIdResponse * SOAP_FMAC4 soap_get_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, tns__selectRelatedMediaAnnotationsWithTokenIdResponse *, const char*, const char*);

#ifndef soap_read_tns__selectRelatedMediaAnnotationsWithTokenIdResponse
#define soap_read_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectRelatedMediaAnnotationsWithTokenIdResponse * SOAP_FMAC2 soap_instantiate_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectRelatedMediaAnnotationsWithTokenIdResponse * soap_new_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectRelatedMediaAnnotationsWithTokenIdResponse * soap_new_req_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap *soap) { tns__selectRelatedMediaAnnotationsWithTokenIdResponse *_p = soap_instantiate_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectRelatedMediaAnnotationsWithTokenIdResponse * soap_new_set_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap *soap, std::vector<tns__mediaAnnotation * >& return_) { tns__selectRelatedMediaAnnotationsWithTokenIdResponse *_p = soap_instantiate_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectRelatedMediaAnnotationsWithTokenIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap *soap, tns__selectRelatedMediaAnnotationsWithTokenIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectRelatedMediaAnnotationsWithTokenId
#define SOAP_TYPE_Annot_tns__selectRelatedMediaAnnotationsWithTokenId (74)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, const char*, int, const tns__selectRelatedMediaAnnotationsWithTokenId *, const char*);
SOAP_FMAC3 tns__selectRelatedMediaAnnotationsWithTokenId * SOAP_FMAC4 soap_in_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, const char*, tns__selectRelatedMediaAnnotationsWithTokenId *, const char*);

#ifndef soap_write_tns__selectRelatedMediaAnnotationsWithTokenId
#define soap_write_tns__selectRelatedMediaAnnotationsWithTokenId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectRelatedMediaAnnotationsWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectRelatedMediaAnnotationsWithTokenId * SOAP_FMAC4 soap_get_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, tns__selectRelatedMediaAnnotationsWithTokenId *, const char*, const char*);

#ifndef soap_read_tns__selectRelatedMediaAnnotationsWithTokenId
#define soap_read_tns__selectRelatedMediaAnnotationsWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectRelatedMediaAnnotationsWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectRelatedMediaAnnotationsWithTokenId * SOAP_FMAC2 soap_instantiate_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectRelatedMediaAnnotationsWithTokenId * soap_new_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectRelatedMediaAnnotationsWithTokenId(soap, n, NULL, NULL, NULL); }

inline tns__selectRelatedMediaAnnotationsWithTokenId * soap_new_req_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectRelatedMediaAnnotationsWithTokenId *_p = soap_instantiate_tns__selectRelatedMediaAnnotationsWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectRelatedMediaAnnotationsWithTokenId::tokenId = tokenId; } return _p; }

inline tns__selectRelatedMediaAnnotationsWithTokenId * soap_new_set_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectRelatedMediaAnnotationsWithTokenId *_p = soap_instantiate_tns__selectRelatedMediaAnnotationsWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectRelatedMediaAnnotationsWithTokenId::tokenId = tokenId; } return _p; }

inline void soap_delete_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap *soap, tns__selectRelatedMediaAnnotationsWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectRelatedMediaAliasesWithTokenIdResponse
#define SOAP_TYPE_Annot_tns__selectRelatedMediaAliasesWithTokenIdResponse (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, const char*, int, const tns__selectRelatedMediaAliasesWithTokenIdResponse *, const char*);
SOAP_FMAC3 tns__selectRelatedMediaAliasesWithTokenIdResponse * SOAP_FMAC4 soap_in_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, const char*, tns__selectRelatedMediaAliasesWithTokenIdResponse *, const char*);

#ifndef soap_write_tns__selectRelatedMediaAliasesWithTokenIdResponse
#define soap_write_tns__selectRelatedMediaAliasesWithTokenIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectRelatedMediaAliasesWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectRelatedMediaAliasesWithTokenIdResponse * SOAP_FMAC4 soap_get_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, tns__selectRelatedMediaAliasesWithTokenIdResponse *, const char*, const char*);

#ifndef soap_read_tns__selectRelatedMediaAliasesWithTokenIdResponse
#define soap_read_tns__selectRelatedMediaAliasesWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectRelatedMediaAliasesWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectRelatedMediaAliasesWithTokenIdResponse * SOAP_FMAC2 soap_instantiate_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectRelatedMediaAliasesWithTokenIdResponse * soap_new_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectRelatedMediaAliasesWithTokenIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectRelatedMediaAliasesWithTokenIdResponse * soap_new_req_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap *soap) { tns__selectRelatedMediaAliasesWithTokenIdResponse *_p = soap_instantiate_tns__selectRelatedMediaAliasesWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectRelatedMediaAliasesWithTokenIdResponse * soap_new_set_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap *soap, std::vector<tns__mediaAlias * >& return_) { tns__selectRelatedMediaAliasesWithTokenIdResponse *_p = soap_instantiate_tns__selectRelatedMediaAliasesWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectRelatedMediaAliasesWithTokenIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap *soap, tns__selectRelatedMediaAliasesWithTokenIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectRelatedMediaAliasesWithTokenId
#define SOAP_TYPE_Annot_tns__selectRelatedMediaAliasesWithTokenId (72)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectRelatedMediaAliasesWithTokenId(struct soap*, const char*, int, const tns__selectRelatedMediaAliasesWithTokenId *, const char*);
SOAP_FMAC3 tns__selectRelatedMediaAliasesWithTokenId * SOAP_FMAC4 soap_in_tns__selectRelatedMediaAliasesWithTokenId(struct soap*, const char*, tns__selectRelatedMediaAliasesWithTokenId *, const char*);

#ifndef soap_write_tns__selectRelatedMediaAliasesWithTokenId
#define soap_write_tns__selectRelatedMediaAliasesWithTokenId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectRelatedMediaAliasesWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectRelatedMediaAliasesWithTokenId * SOAP_FMAC4 soap_get_tns__selectRelatedMediaAliasesWithTokenId(struct soap*, tns__selectRelatedMediaAliasesWithTokenId *, const char*, const char*);

#ifndef soap_read_tns__selectRelatedMediaAliasesWithTokenId
#define soap_read_tns__selectRelatedMediaAliasesWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectRelatedMediaAliasesWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectRelatedMediaAliasesWithTokenId * SOAP_FMAC2 soap_instantiate_tns__selectRelatedMediaAliasesWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectRelatedMediaAliasesWithTokenId * soap_new_tns__selectRelatedMediaAliasesWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectRelatedMediaAliasesWithTokenId(soap, n, NULL, NULL, NULL); }

inline tns__selectRelatedMediaAliasesWithTokenId * soap_new_req_tns__selectRelatedMediaAliasesWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectRelatedMediaAliasesWithTokenId *_p = soap_instantiate_tns__selectRelatedMediaAliasesWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectRelatedMediaAliasesWithTokenId::tokenId = tokenId; } return _p; }

inline tns__selectRelatedMediaAliasesWithTokenId * soap_new_set_tns__selectRelatedMediaAliasesWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectRelatedMediaAliasesWithTokenId *_p = soap_instantiate_tns__selectRelatedMediaAliasesWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectRelatedMediaAliasesWithTokenId::tokenId = tokenId; } return _p; }

inline void soap_delete_tns__selectRelatedMediaAliasesWithTokenId(struct soap *soap, tns__selectRelatedMediaAliasesWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectRelatedMediaAliasesWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaTokenWithIdResponse
#define SOAP_TYPE_Annot_tns__selectMediaTokenWithIdResponse (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaTokenWithIdResponse(struct soap*, const char*, int, const tns__selectMediaTokenWithIdResponse *, const char*);
SOAP_FMAC3 tns__selectMediaTokenWithIdResponse * SOAP_FMAC4 soap_in_tns__selectMediaTokenWithIdResponse(struct soap*, const char*, tns__selectMediaTokenWithIdResponse *, const char*);

#ifndef soap_write_tns__selectMediaTokenWithIdResponse
#define soap_write_tns__selectMediaTokenWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaTokenWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenWithIdResponse * SOAP_FMAC4 soap_get_tns__selectMediaTokenWithIdResponse(struct soap*, tns__selectMediaTokenWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__selectMediaTokenWithIdResponse
#define soap_read_tns__selectMediaTokenWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaTokenWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaTokenWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__selectMediaTokenWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaTokenWithIdResponse * soap_new_tns__selectMediaTokenWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaTokenWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaTokenWithIdResponse * soap_new_req_tns__selectMediaTokenWithIdResponse(struct soap *soap) { tns__selectMediaTokenWithIdResponse *_p = soap_instantiate_tns__selectMediaTokenWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectMediaTokenWithIdResponse * soap_new_set_tns__selectMediaTokenWithIdResponse(struct soap *soap, tns__mediaToken *return_) { tns__selectMediaTokenWithIdResponse *_p = soap_instantiate_tns__selectMediaTokenWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectMediaTokenWithIdResponse(struct soap *soap, tns__selectMediaTokenWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaTokenWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaTokenWithId
#define SOAP_TYPE_Annot_tns__selectMediaTokenWithId (70)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaTokenWithId(struct soap*, const char*, int, const tns__selectMediaTokenWithId *, const char*);
SOAP_FMAC3 tns__selectMediaTokenWithId * SOAP_FMAC4 soap_in_tns__selectMediaTokenWithId(struct soap*, const char*, tns__selectMediaTokenWithId *, const char*);

#ifndef soap_write_tns__selectMediaTokenWithId
#define soap_write_tns__selectMediaTokenWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenWithId * SOAP_FMAC4 soap_get_tns__selectMediaTokenWithId(struct soap*, tns__selectMediaTokenWithId *, const char*, const char*);

#ifndef soap_read_tns__selectMediaTokenWithId
#define soap_read_tns__selectMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaTokenWithId * SOAP_FMAC2 soap_instantiate_tns__selectMediaTokenWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaTokenWithId * soap_new_tns__selectMediaTokenWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaTokenWithId(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaTokenWithId * soap_new_req_tns__selectMediaTokenWithId(struct soap *soap, LONG64 id) { tns__selectMediaTokenWithId *_p = soap_instantiate_tns__selectMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenWithId::id = id; } return _p; }

inline tns__selectMediaTokenWithId * soap_new_set_tns__selectMediaTokenWithId(struct soap *soap, LONG64 id) { tns__selectMediaTokenWithId *_p = soap_instantiate_tns__selectMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenWithId::id = id; } return _p; }

inline void soap_delete_tns__selectMediaTokenWithId(struct soap *soap, tns__selectMediaTokenWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaTokenWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaTokenWithDigestResponse
#define SOAP_TYPE_Annot_tns__selectMediaTokenWithDigestResponse (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaTokenWithDigestResponse(struct soap*, const char*, int, const tns__selectMediaTokenWithDigestResponse *, const char*);
SOAP_FMAC3 tns__selectMediaTokenWithDigestResponse * SOAP_FMAC4 soap_in_tns__selectMediaTokenWithDigestResponse(struct soap*, const char*, tns__selectMediaTokenWithDigestResponse *, const char*);

#ifndef soap_write_tns__selectMediaTokenWithDigestResponse
#define soap_write_tns__selectMediaTokenWithDigestResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaTokenWithDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenWithDigestResponse * SOAP_FMAC4 soap_get_tns__selectMediaTokenWithDigestResponse(struct soap*, tns__selectMediaTokenWithDigestResponse *, const char*, const char*);

#ifndef soap_read_tns__selectMediaTokenWithDigestResponse
#define soap_read_tns__selectMediaTokenWithDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaTokenWithDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaTokenWithDigestResponse * SOAP_FMAC2 soap_instantiate_tns__selectMediaTokenWithDigestResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaTokenWithDigestResponse * soap_new_tns__selectMediaTokenWithDigestResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaTokenWithDigestResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaTokenWithDigestResponse * soap_new_req_tns__selectMediaTokenWithDigestResponse(struct soap *soap) { tns__selectMediaTokenWithDigestResponse *_p = soap_instantiate_tns__selectMediaTokenWithDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectMediaTokenWithDigestResponse * soap_new_set_tns__selectMediaTokenWithDigestResponse(struct soap *soap, tns__mediaToken *return_) { tns__selectMediaTokenWithDigestResponse *_p = soap_instantiate_tns__selectMediaTokenWithDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenWithDigestResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectMediaTokenWithDigestResponse(struct soap *soap, tns__selectMediaTokenWithDigestResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaTokenWithDigestResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaTokenWithDigest
#define SOAP_TYPE_Annot_tns__selectMediaTokenWithDigest (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaTokenWithDigest(struct soap*, const char*, int, const tns__selectMediaTokenWithDigest *, const char*);
SOAP_FMAC3 tns__selectMediaTokenWithDigest * SOAP_FMAC4 soap_in_tns__selectMediaTokenWithDigest(struct soap*, const char*, tns__selectMediaTokenWithDigest *, const char*);

#ifndef soap_write_tns__selectMediaTokenWithDigest
#define soap_write_tns__selectMediaTokenWithDigest(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaTokenWithDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenWithDigest * SOAP_FMAC4 soap_get_tns__selectMediaTokenWithDigest(struct soap*, tns__selectMediaTokenWithDigest *, const char*, const char*);

#ifndef soap_read_tns__selectMediaTokenWithDigest
#define soap_read_tns__selectMediaTokenWithDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaTokenWithDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaTokenWithDigest * SOAP_FMAC2 soap_instantiate_tns__selectMediaTokenWithDigest(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaTokenWithDigest * soap_new_tns__selectMediaTokenWithDigest(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaTokenWithDigest(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaTokenWithDigest * soap_new_req_tns__selectMediaTokenWithDigest(struct soap *soap, int section) { tns__selectMediaTokenWithDigest *_p = soap_instantiate_tns__selectMediaTokenWithDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenWithDigest::section = section; } return _p; }

inline tns__selectMediaTokenWithDigest * soap_new_set_tns__selectMediaTokenWithDigest(struct soap *soap, std::string *digest, int section) { tns__selectMediaTokenWithDigest *_p = soap_instantiate_tns__selectMediaTokenWithDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenWithDigest::digest = digest; _p->tns__selectMediaTokenWithDigest::section = section; } return _p; }

inline void soap_delete_tns__selectMediaTokenWithDigest(struct soap *soap, tns__selectMediaTokenWithDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaTokenWithDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaTokenIdWithUrlResponse
#define SOAP_TYPE_Annot_tns__selectMediaTokenIdWithUrlResponse (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaTokenIdWithUrlResponse(struct soap*, const char*, int, const tns__selectMediaTokenIdWithUrlResponse *, const char*);
SOAP_FMAC3 tns__selectMediaTokenIdWithUrlResponse * SOAP_FMAC4 soap_in_tns__selectMediaTokenIdWithUrlResponse(struct soap*, const char*, tns__selectMediaTokenIdWithUrlResponse *, const char*);

#ifndef soap_write_tns__selectMediaTokenIdWithUrlResponse
#define soap_write_tns__selectMediaTokenIdWithUrlResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaTokenIdWithUrlResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenIdWithUrlResponse * SOAP_FMAC4 soap_get_tns__selectMediaTokenIdWithUrlResponse(struct soap*, tns__selectMediaTokenIdWithUrlResponse *, const char*, const char*);

#ifndef soap_read_tns__selectMediaTokenIdWithUrlResponse
#define soap_read_tns__selectMediaTokenIdWithUrlResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaTokenIdWithUrlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaTokenIdWithUrlResponse * SOAP_FMAC2 soap_instantiate_tns__selectMediaTokenIdWithUrlResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaTokenIdWithUrlResponse * soap_new_tns__selectMediaTokenIdWithUrlResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaTokenIdWithUrlResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaTokenIdWithUrlResponse * soap_new_req_tns__selectMediaTokenIdWithUrlResponse(struct soap *soap, LONG64 return_) { tns__selectMediaTokenIdWithUrlResponse *_p = soap_instantiate_tns__selectMediaTokenIdWithUrlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenIdWithUrlResponse::return_ = return_; } return _p; }

inline tns__selectMediaTokenIdWithUrlResponse * soap_new_set_tns__selectMediaTokenIdWithUrlResponse(struct soap *soap, LONG64 return_) { tns__selectMediaTokenIdWithUrlResponse *_p = soap_instantiate_tns__selectMediaTokenIdWithUrlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenIdWithUrlResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectMediaTokenIdWithUrlResponse(struct soap *soap, tns__selectMediaTokenIdWithUrlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaTokenIdWithUrlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaTokenIdWithUrl
#define SOAP_TYPE_Annot_tns__selectMediaTokenIdWithUrl (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaTokenIdWithUrl(struct soap*, const char*, int, const tns__selectMediaTokenIdWithUrl *, const char*);
SOAP_FMAC3 tns__selectMediaTokenIdWithUrl * SOAP_FMAC4 soap_in_tns__selectMediaTokenIdWithUrl(struct soap*, const char*, tns__selectMediaTokenIdWithUrl *, const char*);

#ifndef soap_write_tns__selectMediaTokenIdWithUrl
#define soap_write_tns__selectMediaTokenIdWithUrl(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaTokenIdWithUrl", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenIdWithUrl * SOAP_FMAC4 soap_get_tns__selectMediaTokenIdWithUrl(struct soap*, tns__selectMediaTokenIdWithUrl *, const char*, const char*);

#ifndef soap_read_tns__selectMediaTokenIdWithUrl
#define soap_read_tns__selectMediaTokenIdWithUrl(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaTokenIdWithUrl(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaTokenIdWithUrl * SOAP_FMAC2 soap_instantiate_tns__selectMediaTokenIdWithUrl(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaTokenIdWithUrl * soap_new_tns__selectMediaTokenIdWithUrl(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaTokenIdWithUrl(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaTokenIdWithUrl * soap_new_req_tns__selectMediaTokenIdWithUrl(struct soap *soap, int section) { tns__selectMediaTokenIdWithUrl *_p = soap_instantiate_tns__selectMediaTokenIdWithUrl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenIdWithUrl::section = section; } return _p; }

inline tns__selectMediaTokenIdWithUrl * soap_new_set_tns__selectMediaTokenIdWithUrl(struct soap *soap, std::string *url, int section) { tns__selectMediaTokenIdWithUrl *_p = soap_instantiate_tns__selectMediaTokenIdWithUrl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenIdWithUrl::url = url; _p->tns__selectMediaTokenIdWithUrl::section = section; } return _p; }

inline void soap_delete_tns__selectMediaTokenIdWithUrl(struct soap *soap, tns__selectMediaTokenIdWithUrl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaTokenIdWithUrl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaTokenIdWithDigestResponse
#define SOAP_TYPE_Annot_tns__selectMediaTokenIdWithDigestResponse (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaTokenIdWithDigestResponse(struct soap*, const char*, int, const tns__selectMediaTokenIdWithDigestResponse *, const char*);
SOAP_FMAC3 tns__selectMediaTokenIdWithDigestResponse * SOAP_FMAC4 soap_in_tns__selectMediaTokenIdWithDigestResponse(struct soap*, const char*, tns__selectMediaTokenIdWithDigestResponse *, const char*);

#ifndef soap_write_tns__selectMediaTokenIdWithDigestResponse
#define soap_write_tns__selectMediaTokenIdWithDigestResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaTokenIdWithDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenIdWithDigestResponse * SOAP_FMAC4 soap_get_tns__selectMediaTokenIdWithDigestResponse(struct soap*, tns__selectMediaTokenIdWithDigestResponse *, const char*, const char*);

#ifndef soap_read_tns__selectMediaTokenIdWithDigestResponse
#define soap_read_tns__selectMediaTokenIdWithDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaTokenIdWithDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaTokenIdWithDigestResponse * SOAP_FMAC2 soap_instantiate_tns__selectMediaTokenIdWithDigestResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaTokenIdWithDigestResponse * soap_new_tns__selectMediaTokenIdWithDigestResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaTokenIdWithDigestResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaTokenIdWithDigestResponse * soap_new_req_tns__selectMediaTokenIdWithDigestResponse(struct soap *soap, LONG64 return_) { tns__selectMediaTokenIdWithDigestResponse *_p = soap_instantiate_tns__selectMediaTokenIdWithDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenIdWithDigestResponse::return_ = return_; } return _p; }

inline tns__selectMediaTokenIdWithDigestResponse * soap_new_set_tns__selectMediaTokenIdWithDigestResponse(struct soap *soap, LONG64 return_) { tns__selectMediaTokenIdWithDigestResponse *_p = soap_instantiate_tns__selectMediaTokenIdWithDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenIdWithDigestResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectMediaTokenIdWithDigestResponse(struct soap *soap, tns__selectMediaTokenIdWithDigestResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaTokenIdWithDigestResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaTokenIdWithDigest
#define SOAP_TYPE_Annot_tns__selectMediaTokenIdWithDigest (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaTokenIdWithDigest(struct soap*, const char*, int, const tns__selectMediaTokenIdWithDigest *, const char*);
SOAP_FMAC3 tns__selectMediaTokenIdWithDigest * SOAP_FMAC4 soap_in_tns__selectMediaTokenIdWithDigest(struct soap*, const char*, tns__selectMediaTokenIdWithDigest *, const char*);

#ifndef soap_write_tns__selectMediaTokenIdWithDigest
#define soap_write_tns__selectMediaTokenIdWithDigest(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaTokenIdWithDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenIdWithDigest * SOAP_FMAC4 soap_get_tns__selectMediaTokenIdWithDigest(struct soap*, tns__selectMediaTokenIdWithDigest *, const char*, const char*);

#ifndef soap_read_tns__selectMediaTokenIdWithDigest
#define soap_read_tns__selectMediaTokenIdWithDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaTokenIdWithDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaTokenIdWithDigest * SOAP_FMAC2 soap_instantiate_tns__selectMediaTokenIdWithDigest(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaTokenIdWithDigest * soap_new_tns__selectMediaTokenIdWithDigest(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaTokenIdWithDigest(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaTokenIdWithDigest * soap_new_req_tns__selectMediaTokenIdWithDigest(struct soap *soap, int section) { tns__selectMediaTokenIdWithDigest *_p = soap_instantiate_tns__selectMediaTokenIdWithDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenIdWithDigest::section = section; } return _p; }

inline tns__selectMediaTokenIdWithDigest * soap_new_set_tns__selectMediaTokenIdWithDigest(struct soap *soap, std::string *digest, int section) { tns__selectMediaTokenIdWithDigest *_p = soap_instantiate_tns__selectMediaTokenIdWithDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaTokenIdWithDigest::digest = digest; _p->tns__selectMediaTokenIdWithDigest::section = section; } return _p; }

inline void soap_delete_tns__selectMediaTokenIdWithDigest(struct soap *soap, tns__selectMediaTokenIdWithDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaTokenIdWithDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaAnnotationsWithTokenIdResponse
#define SOAP_TYPE_Annot_tns__selectMediaAnnotationsWithTokenIdResponse (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, const char*, int, const tns__selectMediaAnnotationsWithTokenIdResponse *, const char*);
SOAP_FMAC3 tns__selectMediaAnnotationsWithTokenIdResponse * SOAP_FMAC4 soap_in_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, const char*, tns__selectMediaAnnotationsWithTokenIdResponse *, const char*);

#ifndef soap_write_tns__selectMediaAnnotationsWithTokenIdResponse
#define soap_write_tns__selectMediaAnnotationsWithTokenIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaAnnotationsWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaAnnotationsWithTokenIdResponse * SOAP_FMAC4 soap_get_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, tns__selectMediaAnnotationsWithTokenIdResponse *, const char*, const char*);

#ifndef soap_read_tns__selectMediaAnnotationsWithTokenIdResponse
#define soap_read_tns__selectMediaAnnotationsWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaAnnotationsWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaAnnotationsWithTokenIdResponse * SOAP_FMAC2 soap_instantiate_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaAnnotationsWithTokenIdResponse * soap_new_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaAnnotationsWithTokenIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaAnnotationsWithTokenIdResponse * soap_new_req_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap *soap) { tns__selectMediaAnnotationsWithTokenIdResponse *_p = soap_instantiate_tns__selectMediaAnnotationsWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectMediaAnnotationsWithTokenIdResponse * soap_new_set_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap *soap, std::vector<tns__mediaAnnotation * >& return_) { tns__selectMediaAnnotationsWithTokenIdResponse *_p = soap_instantiate_tns__selectMediaAnnotationsWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaAnnotationsWithTokenIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap *soap, tns__selectMediaAnnotationsWithTokenIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaAnnotationsWithTokenId
#define SOAP_TYPE_Annot_tns__selectMediaAnnotationsWithTokenId (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaAnnotationsWithTokenId(struct soap*, const char*, int, const tns__selectMediaAnnotationsWithTokenId *, const char*);
SOAP_FMAC3 tns__selectMediaAnnotationsWithTokenId * SOAP_FMAC4 soap_in_tns__selectMediaAnnotationsWithTokenId(struct soap*, const char*, tns__selectMediaAnnotationsWithTokenId *, const char*);

#ifndef soap_write_tns__selectMediaAnnotationsWithTokenId
#define soap_write_tns__selectMediaAnnotationsWithTokenId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaAnnotationsWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaAnnotationsWithTokenId * SOAP_FMAC4 soap_get_tns__selectMediaAnnotationsWithTokenId(struct soap*, tns__selectMediaAnnotationsWithTokenId *, const char*, const char*);

#ifndef soap_read_tns__selectMediaAnnotationsWithTokenId
#define soap_read_tns__selectMediaAnnotationsWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaAnnotationsWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaAnnotationsWithTokenId * SOAP_FMAC2 soap_instantiate_tns__selectMediaAnnotationsWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaAnnotationsWithTokenId * soap_new_tns__selectMediaAnnotationsWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaAnnotationsWithTokenId(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaAnnotationsWithTokenId * soap_new_req_tns__selectMediaAnnotationsWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectMediaAnnotationsWithTokenId *_p = soap_instantiate_tns__selectMediaAnnotationsWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaAnnotationsWithTokenId::tokenId = tokenId; } return _p; }

inline tns__selectMediaAnnotationsWithTokenId * soap_new_set_tns__selectMediaAnnotationsWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectMediaAnnotationsWithTokenId *_p = soap_instantiate_tns__selectMediaAnnotationsWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaAnnotationsWithTokenId::tokenId = tokenId; } return _p; }

inline void soap_delete_tns__selectMediaAnnotationsWithTokenId(struct soap *soap, tns__selectMediaAnnotationsWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaAnnotationsWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaAliasesWithTokenIdResponse
#define SOAP_TYPE_Annot_tns__selectMediaAliasesWithTokenIdResponse (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaAliasesWithTokenIdResponse(struct soap*, const char*, int, const tns__selectMediaAliasesWithTokenIdResponse *, const char*);
SOAP_FMAC3 tns__selectMediaAliasesWithTokenIdResponse * SOAP_FMAC4 soap_in_tns__selectMediaAliasesWithTokenIdResponse(struct soap*, const char*, tns__selectMediaAliasesWithTokenIdResponse *, const char*);

#ifndef soap_write_tns__selectMediaAliasesWithTokenIdResponse
#define soap_write_tns__selectMediaAliasesWithTokenIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaAliasesWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaAliasesWithTokenIdResponse * SOAP_FMAC4 soap_get_tns__selectMediaAliasesWithTokenIdResponse(struct soap*, tns__selectMediaAliasesWithTokenIdResponse *, const char*, const char*);

#ifndef soap_read_tns__selectMediaAliasesWithTokenIdResponse
#define soap_read_tns__selectMediaAliasesWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaAliasesWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaAliasesWithTokenIdResponse * SOAP_FMAC2 soap_instantiate_tns__selectMediaAliasesWithTokenIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaAliasesWithTokenIdResponse * soap_new_tns__selectMediaAliasesWithTokenIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaAliasesWithTokenIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaAliasesWithTokenIdResponse * soap_new_req_tns__selectMediaAliasesWithTokenIdResponse(struct soap *soap) { tns__selectMediaAliasesWithTokenIdResponse *_p = soap_instantiate_tns__selectMediaAliasesWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectMediaAliasesWithTokenIdResponse * soap_new_set_tns__selectMediaAliasesWithTokenIdResponse(struct soap *soap, std::vector<tns__mediaAlias * >& return_) { tns__selectMediaAliasesWithTokenIdResponse *_p = soap_instantiate_tns__selectMediaAliasesWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaAliasesWithTokenIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectMediaAliasesWithTokenIdResponse(struct soap *soap, tns__selectMediaAliasesWithTokenIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaAliasesWithTokenIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectMediaAliasesWithTokenId
#define SOAP_TYPE_Annot_tns__selectMediaAliasesWithTokenId (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectMediaAliasesWithTokenId(struct soap*, const char*, int, const tns__selectMediaAliasesWithTokenId *, const char*);
SOAP_FMAC3 tns__selectMediaAliasesWithTokenId * SOAP_FMAC4 soap_in_tns__selectMediaAliasesWithTokenId(struct soap*, const char*, tns__selectMediaAliasesWithTokenId *, const char*);

#ifndef soap_write_tns__selectMediaAliasesWithTokenId
#define soap_write_tns__selectMediaAliasesWithTokenId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectMediaAliasesWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaAliasesWithTokenId * SOAP_FMAC4 soap_get_tns__selectMediaAliasesWithTokenId(struct soap*, tns__selectMediaAliasesWithTokenId *, const char*, const char*);

#ifndef soap_read_tns__selectMediaAliasesWithTokenId
#define soap_read_tns__selectMediaAliasesWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectMediaAliasesWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectMediaAliasesWithTokenId * SOAP_FMAC2 soap_instantiate_tns__selectMediaAliasesWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectMediaAliasesWithTokenId * soap_new_tns__selectMediaAliasesWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectMediaAliasesWithTokenId(soap, n, NULL, NULL, NULL); }

inline tns__selectMediaAliasesWithTokenId * soap_new_req_tns__selectMediaAliasesWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectMediaAliasesWithTokenId *_p = soap_instantiate_tns__selectMediaAliasesWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaAliasesWithTokenId::tokenId = tokenId; } return _p; }

inline tns__selectMediaAliasesWithTokenId * soap_new_set_tns__selectMediaAliasesWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectMediaAliasesWithTokenId *_p = soap_instantiate_tns__selectMediaAliasesWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectMediaAliasesWithTokenId::tokenId = tokenId; } return _p; }

inline void soap_delete_tns__selectMediaAliasesWithTokenId(struct soap *soap, tns__selectMediaAliasesWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectMediaAliasesWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectGameThreadWithTokenIdResponse
#define SOAP_TYPE_Annot_tns__selectGameThreadWithTokenIdResponse (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectGameThreadWithTokenIdResponse(struct soap*, const char*, int, const tns__selectGameThreadWithTokenIdResponse *, const char*);
SOAP_FMAC3 tns__selectGameThreadWithTokenIdResponse * SOAP_FMAC4 soap_in_tns__selectGameThreadWithTokenIdResponse(struct soap*, const char*, tns__selectGameThreadWithTokenIdResponse *, const char*);

#ifndef soap_write_tns__selectGameThreadWithTokenIdResponse
#define soap_write_tns__selectGameThreadWithTokenIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectGameThreadWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameThreadWithTokenIdResponse * SOAP_FMAC4 soap_get_tns__selectGameThreadWithTokenIdResponse(struct soap*, tns__selectGameThreadWithTokenIdResponse *, const char*, const char*);

#ifndef soap_read_tns__selectGameThreadWithTokenIdResponse
#define soap_read_tns__selectGameThreadWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectGameThreadWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectGameThreadWithTokenIdResponse * SOAP_FMAC2 soap_instantiate_tns__selectGameThreadWithTokenIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectGameThreadWithTokenIdResponse * soap_new_tns__selectGameThreadWithTokenIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectGameThreadWithTokenIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectGameThreadWithTokenIdResponse * soap_new_req_tns__selectGameThreadWithTokenIdResponse(struct soap *soap) { tns__selectGameThreadWithTokenIdResponse *_p = soap_instantiate_tns__selectGameThreadWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectGameThreadWithTokenIdResponse * soap_new_set_tns__selectGameThreadWithTokenIdResponse(struct soap *soap, tns__gameThread *return_) { tns__selectGameThreadWithTokenIdResponse *_p = soap_instantiate_tns__selectGameThreadWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameThreadWithTokenIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectGameThreadWithTokenIdResponse(struct soap *soap, tns__selectGameThreadWithTokenIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectGameThreadWithTokenIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectGameThreadWithTokenId
#define SOAP_TYPE_Annot_tns__selectGameThreadWithTokenId (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectGameThreadWithTokenId(struct soap*, const char*, int, const tns__selectGameThreadWithTokenId *, const char*);
SOAP_FMAC3 tns__selectGameThreadWithTokenId * SOAP_FMAC4 soap_in_tns__selectGameThreadWithTokenId(struct soap*, const char*, tns__selectGameThreadWithTokenId *, const char*);

#ifndef soap_write_tns__selectGameThreadWithTokenId
#define soap_write_tns__selectGameThreadWithTokenId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectGameThreadWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameThreadWithTokenId * SOAP_FMAC4 soap_get_tns__selectGameThreadWithTokenId(struct soap*, tns__selectGameThreadWithTokenId *, const char*, const char*);

#ifndef soap_read_tns__selectGameThreadWithTokenId
#define soap_read_tns__selectGameThreadWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectGameThreadWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectGameThreadWithTokenId * SOAP_FMAC2 soap_instantiate_tns__selectGameThreadWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectGameThreadWithTokenId * soap_new_tns__selectGameThreadWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectGameThreadWithTokenId(soap, n, NULL, NULL, NULL); }

inline tns__selectGameThreadWithTokenId * soap_new_req_tns__selectGameThreadWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectGameThreadWithTokenId *_p = soap_instantiate_tns__selectGameThreadWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameThreadWithTokenId::tokenId = tokenId; } return _p; }

inline tns__selectGameThreadWithTokenId * soap_new_set_tns__selectGameThreadWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectGameThreadWithTokenId *_p = soap_instantiate_tns__selectGameThreadWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameThreadWithTokenId::tokenId = tokenId; } return _p; }

inline void soap_delete_tns__selectGameThreadWithTokenId(struct soap *soap, tns__selectGameThreadWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectGameThreadWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectGameThreadWithTokenDigestResponse
#define SOAP_TYPE_Annot_tns__selectGameThreadWithTokenDigestResponse (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectGameThreadWithTokenDigestResponse(struct soap*, const char*, int, const tns__selectGameThreadWithTokenDigestResponse *, const char*);
SOAP_FMAC3 tns__selectGameThreadWithTokenDigestResponse * SOAP_FMAC4 soap_in_tns__selectGameThreadWithTokenDigestResponse(struct soap*, const char*, tns__selectGameThreadWithTokenDigestResponse *, const char*);

#ifndef soap_write_tns__selectGameThreadWithTokenDigestResponse
#define soap_write_tns__selectGameThreadWithTokenDigestResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectGameThreadWithTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameThreadWithTokenDigestResponse * SOAP_FMAC4 soap_get_tns__selectGameThreadWithTokenDigestResponse(struct soap*, tns__selectGameThreadWithTokenDigestResponse *, const char*, const char*);

#ifndef soap_read_tns__selectGameThreadWithTokenDigestResponse
#define soap_read_tns__selectGameThreadWithTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectGameThreadWithTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectGameThreadWithTokenDigestResponse * SOAP_FMAC2 soap_instantiate_tns__selectGameThreadWithTokenDigestResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectGameThreadWithTokenDigestResponse * soap_new_tns__selectGameThreadWithTokenDigestResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectGameThreadWithTokenDigestResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectGameThreadWithTokenDigestResponse * soap_new_req_tns__selectGameThreadWithTokenDigestResponse(struct soap *soap) { tns__selectGameThreadWithTokenDigestResponse *_p = soap_instantiate_tns__selectGameThreadWithTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectGameThreadWithTokenDigestResponse * soap_new_set_tns__selectGameThreadWithTokenDigestResponse(struct soap *soap, tns__gameThread *return_) { tns__selectGameThreadWithTokenDigestResponse *_p = soap_instantiate_tns__selectGameThreadWithTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameThreadWithTokenDigestResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectGameThreadWithTokenDigestResponse(struct soap *soap, tns__selectGameThreadWithTokenDigestResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectGameThreadWithTokenDigestResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectGameThreadWithTokenDigest
#define SOAP_TYPE_Annot_tns__selectGameThreadWithTokenDigest (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectGameThreadWithTokenDigest(struct soap*, const char*, int, const tns__selectGameThreadWithTokenDigest *, const char*);
SOAP_FMAC3 tns__selectGameThreadWithTokenDigest * SOAP_FMAC4 soap_in_tns__selectGameThreadWithTokenDigest(struct soap*, const char*, tns__selectGameThreadWithTokenDigest *, const char*);

#ifndef soap_write_tns__selectGameThreadWithTokenDigest
#define soap_write_tns__selectGameThreadWithTokenDigest(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectGameThreadWithTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameThreadWithTokenDigest * SOAP_FMAC4 soap_get_tns__selectGameThreadWithTokenDigest(struct soap*, tns__selectGameThreadWithTokenDigest *, const char*, const char*);

#ifndef soap_read_tns__selectGameThreadWithTokenDigest
#define soap_read_tns__selectGameThreadWithTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectGameThreadWithTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectGameThreadWithTokenDigest * SOAP_FMAC2 soap_instantiate_tns__selectGameThreadWithTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectGameThreadWithTokenDigest * soap_new_tns__selectGameThreadWithTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectGameThreadWithTokenDigest(soap, n, NULL, NULL, NULL); }

inline tns__selectGameThreadWithTokenDigest * soap_new_req_tns__selectGameThreadWithTokenDigest(struct soap *soap) { tns__selectGameThreadWithTokenDigest *_p = soap_instantiate_tns__selectGameThreadWithTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectGameThreadWithTokenDigest * soap_new_set_tns__selectGameThreadWithTokenDigest(struct soap *soap, std::string *tokenDigest) { tns__selectGameThreadWithTokenDigest *_p = soap_instantiate_tns__selectGameThreadWithTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameThreadWithTokenDigest::tokenDigest = tokenDigest; } return _p; }

inline void soap_delete_tns__selectGameThreadWithTokenDigest(struct soap *soap, tns__selectGameThreadWithTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectGameThreadWithTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectGameHookWithTokenIdResponse
#define SOAP_TYPE_Annot_tns__selectGameHookWithTokenIdResponse (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectGameHookWithTokenIdResponse(struct soap*, const char*, int, const tns__selectGameHookWithTokenIdResponse *, const char*);
SOAP_FMAC3 tns__selectGameHookWithTokenIdResponse * SOAP_FMAC4 soap_in_tns__selectGameHookWithTokenIdResponse(struct soap*, const char*, tns__selectGameHookWithTokenIdResponse *, const char*);

#ifndef soap_write_tns__selectGameHookWithTokenIdResponse
#define soap_write_tns__selectGameHookWithTokenIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectGameHookWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameHookWithTokenIdResponse * SOAP_FMAC4 soap_get_tns__selectGameHookWithTokenIdResponse(struct soap*, tns__selectGameHookWithTokenIdResponse *, const char*, const char*);

#ifndef soap_read_tns__selectGameHookWithTokenIdResponse
#define soap_read_tns__selectGameHookWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectGameHookWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectGameHookWithTokenIdResponse * SOAP_FMAC2 soap_instantiate_tns__selectGameHookWithTokenIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectGameHookWithTokenIdResponse * soap_new_tns__selectGameHookWithTokenIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectGameHookWithTokenIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectGameHookWithTokenIdResponse * soap_new_req_tns__selectGameHookWithTokenIdResponse(struct soap *soap) { tns__selectGameHookWithTokenIdResponse *_p = soap_instantiate_tns__selectGameHookWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectGameHookWithTokenIdResponse * soap_new_set_tns__selectGameHookWithTokenIdResponse(struct soap *soap, tns__gameHook *return_) { tns__selectGameHookWithTokenIdResponse *_p = soap_instantiate_tns__selectGameHookWithTokenIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameHookWithTokenIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectGameHookWithTokenIdResponse(struct soap *soap, tns__selectGameHookWithTokenIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectGameHookWithTokenIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectGameHookWithTokenId
#define SOAP_TYPE_Annot_tns__selectGameHookWithTokenId (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectGameHookWithTokenId(struct soap*, const char*, int, const tns__selectGameHookWithTokenId *, const char*);
SOAP_FMAC3 tns__selectGameHookWithTokenId * SOAP_FMAC4 soap_in_tns__selectGameHookWithTokenId(struct soap*, const char*, tns__selectGameHookWithTokenId *, const char*);

#ifndef soap_write_tns__selectGameHookWithTokenId
#define soap_write_tns__selectGameHookWithTokenId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectGameHookWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameHookWithTokenId * SOAP_FMAC4 soap_get_tns__selectGameHookWithTokenId(struct soap*, tns__selectGameHookWithTokenId *, const char*, const char*);

#ifndef soap_read_tns__selectGameHookWithTokenId
#define soap_read_tns__selectGameHookWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectGameHookWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectGameHookWithTokenId * SOAP_FMAC2 soap_instantiate_tns__selectGameHookWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectGameHookWithTokenId * soap_new_tns__selectGameHookWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectGameHookWithTokenId(soap, n, NULL, NULL, NULL); }

inline tns__selectGameHookWithTokenId * soap_new_req_tns__selectGameHookWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectGameHookWithTokenId *_p = soap_instantiate_tns__selectGameHookWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameHookWithTokenId::tokenId = tokenId; } return _p; }

inline tns__selectGameHookWithTokenId * soap_new_set_tns__selectGameHookWithTokenId(struct soap *soap, LONG64 tokenId) { tns__selectGameHookWithTokenId *_p = soap_instantiate_tns__selectGameHookWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameHookWithTokenId::tokenId = tokenId; } return _p; }

inline void soap_delete_tns__selectGameHookWithTokenId(struct soap *soap, tns__selectGameHookWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectGameHookWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectGameHookWithTokenDigestResponse
#define SOAP_TYPE_Annot_tns__selectGameHookWithTokenDigestResponse (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectGameHookWithTokenDigestResponse(struct soap*, const char*, int, const tns__selectGameHookWithTokenDigestResponse *, const char*);
SOAP_FMAC3 tns__selectGameHookWithTokenDigestResponse * SOAP_FMAC4 soap_in_tns__selectGameHookWithTokenDigestResponse(struct soap*, const char*, tns__selectGameHookWithTokenDigestResponse *, const char*);

#ifndef soap_write_tns__selectGameHookWithTokenDigestResponse
#define soap_write_tns__selectGameHookWithTokenDigestResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectGameHookWithTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameHookWithTokenDigestResponse * SOAP_FMAC4 soap_get_tns__selectGameHookWithTokenDigestResponse(struct soap*, tns__selectGameHookWithTokenDigestResponse *, const char*, const char*);

#ifndef soap_read_tns__selectGameHookWithTokenDigestResponse
#define soap_read_tns__selectGameHookWithTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectGameHookWithTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectGameHookWithTokenDigestResponse * SOAP_FMAC2 soap_instantiate_tns__selectGameHookWithTokenDigestResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectGameHookWithTokenDigestResponse * soap_new_tns__selectGameHookWithTokenDigestResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectGameHookWithTokenDigestResponse(soap, n, NULL, NULL, NULL); }

inline tns__selectGameHookWithTokenDigestResponse * soap_new_req_tns__selectGameHookWithTokenDigestResponse(struct soap *soap) { tns__selectGameHookWithTokenDigestResponse *_p = soap_instantiate_tns__selectGameHookWithTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectGameHookWithTokenDigestResponse * soap_new_set_tns__selectGameHookWithTokenDigestResponse(struct soap *soap, tns__gameHook *return_) { tns__selectGameHookWithTokenDigestResponse *_p = soap_instantiate_tns__selectGameHookWithTokenDigestResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameHookWithTokenDigestResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__selectGameHookWithTokenDigestResponse(struct soap *soap, tns__selectGameHookWithTokenDigestResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectGameHookWithTokenDigestResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__selectGameHookWithTokenDigest
#define SOAP_TYPE_Annot_tns__selectGameHookWithTokenDigest (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__selectGameHookWithTokenDigest(struct soap*, const char*, int, const tns__selectGameHookWithTokenDigest *, const char*);
SOAP_FMAC3 tns__selectGameHookWithTokenDigest * SOAP_FMAC4 soap_in_tns__selectGameHookWithTokenDigest(struct soap*, const char*, tns__selectGameHookWithTokenDigest *, const char*);

#ifndef soap_write_tns__selectGameHookWithTokenDigest
#define soap_write_tns__selectGameHookWithTokenDigest(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:selectGameHookWithTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameHookWithTokenDigest * SOAP_FMAC4 soap_get_tns__selectGameHookWithTokenDigest(struct soap*, tns__selectGameHookWithTokenDigest *, const char*, const char*);

#ifndef soap_read_tns__selectGameHookWithTokenDigest
#define soap_read_tns__selectGameHookWithTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__selectGameHookWithTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__selectGameHookWithTokenDigest * SOAP_FMAC2 soap_instantiate_tns__selectGameHookWithTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline tns__selectGameHookWithTokenDigest * soap_new_tns__selectGameHookWithTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate_tns__selectGameHookWithTokenDigest(soap, n, NULL, NULL, NULL); }

inline tns__selectGameHookWithTokenDigest * soap_new_req_tns__selectGameHookWithTokenDigest(struct soap *soap) { tns__selectGameHookWithTokenDigest *_p = soap_instantiate_tns__selectGameHookWithTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__selectGameHookWithTokenDigest * soap_new_set_tns__selectGameHookWithTokenDigest(struct soap *soap, std::string *tokenDigest) { tns__selectGameHookWithTokenDigest *_p = soap_instantiate_tns__selectGameHookWithTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__selectGameHookWithTokenDigest::tokenDigest = tokenDigest; } return _p; }

inline void soap_delete_tns__selectGameHookWithTokenDigest(struct soap *soap, tns__selectGameHookWithTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__selectGameHookWithTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__loginResponse
#define SOAP_TYPE_Annot_tns__loginResponse (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__loginResponse(struct soap*, const char*, int, const tns__loginResponse *, const char*);
SOAP_FMAC3 tns__loginResponse * SOAP_FMAC4 soap_in_tns__loginResponse(struct soap*, const char*, tns__loginResponse *, const char*);

#ifndef soap_write_tns__loginResponse
#define soap_write_tns__loginResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:loginResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__loginResponse * SOAP_FMAC4 soap_get_tns__loginResponse(struct soap*, tns__loginResponse *, const char*, const char*);

#ifndef soap_read_tns__loginResponse
#define soap_read_tns__loginResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__loginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__loginResponse * SOAP_FMAC2 soap_instantiate_tns__loginResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__loginResponse * soap_new_tns__loginResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__loginResponse(soap, n, NULL, NULL, NULL); }

inline tns__loginResponse * soap_new_req_tns__loginResponse(struct soap *soap, bool return_) { tns__loginResponse *_p = soap_instantiate_tns__loginResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__loginResponse::return_ = return_; } return _p; }

inline tns__loginResponse * soap_new_set_tns__loginResponse(struct soap *soap, bool return_) { tns__loginResponse *_p = soap_instantiate_tns__loginResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__loginResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__loginResponse(struct soap *soap, tns__loginResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__loginResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__login
#define SOAP_TYPE_Annot_tns__login (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__login(struct soap*, const char*, int, const tns__login *, const char*);
SOAP_FMAC3 tns__login * SOAP_FMAC4 soap_in_tns__login(struct soap*, const char*, tns__login *, const char*);

#ifndef soap_write_tns__login
#define soap_write_tns__login(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__login * SOAP_FMAC4 soap_get_tns__login(struct soap*, tns__login *, const char*, const char*);

#ifndef soap_read_tns__login
#define soap_read_tns__login(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__login * SOAP_FMAC2 soap_instantiate_tns__login(struct soap*, int, const char*, const char*, size_t*);

inline tns__login * soap_new_tns__login(struct soap *soap, int n = -1) { return soap_instantiate_tns__login(soap, n, NULL, NULL, NULL); }

inline tns__login * soap_new_req_tns__login(struct soap *soap) { tns__login *_p = soap_instantiate_tns__login(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__login * soap_new_set_tns__login(struct soap *soap, std::string *userName, std::string *password) { tns__login *_p = soap_instantiate_tns__login(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__login::userName = userName; _p->tns__login::password = password; } return _p; }

inline void soap_delete_tns__login(struct soap *soap, tns__login *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__login(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__isLatestAppResponse
#define SOAP_TYPE_Annot_tns__isLatestAppResponse (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isLatestAppResponse(struct soap*, const char*, int, const tns__isLatestAppResponse *, const char*);
SOAP_FMAC3 tns__isLatestAppResponse * SOAP_FMAC4 soap_in_tns__isLatestAppResponse(struct soap*, const char*, tns__isLatestAppResponse *, const char*);

#ifndef soap_write_tns__isLatestAppResponse
#define soap_write_tns__isLatestAppResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:isLatestAppResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isLatestAppResponse * SOAP_FMAC4 soap_get_tns__isLatestAppResponse(struct soap*, tns__isLatestAppResponse *, const char*, const char*);

#ifndef soap_read_tns__isLatestAppResponse
#define soap_read_tns__isLatestAppResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__isLatestAppResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__isLatestAppResponse * SOAP_FMAC2 soap_instantiate_tns__isLatestAppResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__isLatestAppResponse * soap_new_tns__isLatestAppResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__isLatestAppResponse(soap, n, NULL, NULL, NULL); }

inline tns__isLatestAppResponse * soap_new_req_tns__isLatestAppResponse(struct soap *soap, bool return_) { tns__isLatestAppResponse *_p = soap_instantiate_tns__isLatestAppResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__isLatestAppResponse::return_ = return_; } return _p; }

inline tns__isLatestAppResponse * soap_new_set_tns__isLatestAppResponse(struct soap *soap, bool return_) { tns__isLatestAppResponse *_p = soap_instantiate_tns__isLatestAppResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__isLatestAppResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__isLatestAppResponse(struct soap *soap, tns__isLatestAppResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isLatestAppResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__isLatestApp
#define SOAP_TYPE_Annot_tns__isLatestApp (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isLatestApp(struct soap*, const char*, int, const tns__isLatestApp *, const char*);
SOAP_FMAC3 tns__isLatestApp * SOAP_FMAC4 soap_in_tns__isLatestApp(struct soap*, const char*, tns__isLatestApp *, const char*);

#ifndef soap_write_tns__isLatestApp
#define soap_write_tns__isLatestApp(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:isLatestApp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isLatestApp * SOAP_FMAC4 soap_get_tns__isLatestApp(struct soap*, tns__isLatestApp *, const char*, const char*);

#ifndef soap_read_tns__isLatestApp
#define soap_read_tns__isLatestApp(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__isLatestApp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__isLatestApp * SOAP_FMAC2 soap_instantiate_tns__isLatestApp(struct soap*, int, const char*, const char*, size_t*);

inline tns__isLatestApp * soap_new_tns__isLatestApp(struct soap *soap, int n = -1) { return soap_instantiate_tns__isLatestApp(soap, n, NULL, NULL, NULL); }

inline tns__isLatestApp * soap_new_req_tns__isLatestApp(struct soap *soap) { tns__isLatestApp *_p = soap_instantiate_tns__isLatestApp(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__isLatestApp * soap_new_set_tns__isLatestApp(struct soap *soap, std::string *version) { tns__isLatestApp *_p = soap_instantiate_tns__isLatestApp(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__isLatestApp::version = version; } return _p; }

inline void soap_delete_tns__isLatestApp(struct soap *soap, tns__isLatestApp *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isLatestApp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__isConnectedResponse
#define SOAP_TYPE_Annot_tns__isConnectedResponse (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isConnectedResponse(struct soap*, const char*, int, const tns__isConnectedResponse *, const char*);
SOAP_FMAC3 tns__isConnectedResponse * SOAP_FMAC4 soap_in_tns__isConnectedResponse(struct soap*, const char*, tns__isConnectedResponse *, const char*);

#ifndef soap_write_tns__isConnectedResponse
#define soap_write_tns__isConnectedResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:isConnectedResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isConnectedResponse * SOAP_FMAC4 soap_get_tns__isConnectedResponse(struct soap*, tns__isConnectedResponse *, const char*, const char*);

#ifndef soap_read_tns__isConnectedResponse
#define soap_read_tns__isConnectedResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__isConnectedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__isConnectedResponse * SOAP_FMAC2 soap_instantiate_tns__isConnectedResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__isConnectedResponse * soap_new_tns__isConnectedResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__isConnectedResponse(soap, n, NULL, NULL, NULL); }

inline tns__isConnectedResponse * soap_new_req_tns__isConnectedResponse(struct soap *soap, bool return_) { tns__isConnectedResponse *_p = soap_instantiate_tns__isConnectedResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__isConnectedResponse::return_ = return_; } return _p; }

inline tns__isConnectedResponse * soap_new_set_tns__isConnectedResponse(struct soap *soap, bool return_) { tns__isConnectedResponse *_p = soap_instantiate_tns__isConnectedResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__isConnectedResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__isConnectedResponse(struct soap *soap, tns__isConnectedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isConnectedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__isConnected
#define SOAP_TYPE_Annot_tns__isConnected (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isConnected(struct soap*, const char*, int, const tns__isConnected *, const char*);
SOAP_FMAC3 tns__isConnected * SOAP_FMAC4 soap_in_tns__isConnected(struct soap*, const char*, tns__isConnected *, const char*);

#ifndef soap_write_tns__isConnected
#define soap_write_tns__isConnected(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:isConnected", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isConnected * SOAP_FMAC4 soap_get_tns__isConnected(struct soap*, tns__isConnected *, const char*, const char*);

#ifndef soap_read_tns__isConnected
#define soap_read_tns__isConnected(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__isConnected(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__isConnected * SOAP_FMAC2 soap_instantiate_tns__isConnected(struct soap*, int, const char*, const char*, size_t*);

inline tns__isConnected * soap_new_tns__isConnected(struct soap *soap, int n = -1) { return soap_instantiate_tns__isConnected(soap, n, NULL, NULL, NULL); }

inline tns__isConnected * soap_new_req_tns__isConnected(struct soap *soap) { tns__isConnected *_p = soap_instantiate_tns__isConnected(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__isConnected * soap_new_set_tns__isConnected(struct soap *soap) { tns__isConnected *_p = soap_instantiate_tns__isConnected(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_tns__isConnected(struct soap *soap, tns__isConnected *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isConnected(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__isAuthorizedResponse
#define SOAP_TYPE_Annot_tns__isAuthorizedResponse (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isAuthorizedResponse(struct soap*, const char*, int, const tns__isAuthorizedResponse *, const char*);
SOAP_FMAC3 tns__isAuthorizedResponse * SOAP_FMAC4 soap_in_tns__isAuthorizedResponse(struct soap*, const char*, tns__isAuthorizedResponse *, const char*);

#ifndef soap_write_tns__isAuthorizedResponse
#define soap_write_tns__isAuthorizedResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:isAuthorizedResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isAuthorizedResponse * SOAP_FMAC4 soap_get_tns__isAuthorizedResponse(struct soap*, tns__isAuthorizedResponse *, const char*, const char*);

#ifndef soap_read_tns__isAuthorizedResponse
#define soap_read_tns__isAuthorizedResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__isAuthorizedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__isAuthorizedResponse * SOAP_FMAC2 soap_instantiate_tns__isAuthorizedResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__isAuthorizedResponse * soap_new_tns__isAuthorizedResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__isAuthorizedResponse(soap, n, NULL, NULL, NULL); }

inline tns__isAuthorizedResponse * soap_new_req_tns__isAuthorizedResponse(struct soap *soap, bool return_) { tns__isAuthorizedResponse *_p = soap_instantiate_tns__isAuthorizedResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__isAuthorizedResponse::return_ = return_; } return _p; }

inline tns__isAuthorizedResponse * soap_new_set_tns__isAuthorizedResponse(struct soap *soap, bool return_) { tns__isAuthorizedResponse *_p = soap_instantiate_tns__isAuthorizedResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__isAuthorizedResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__isAuthorizedResponse(struct soap *soap, tns__isAuthorizedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isAuthorizedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__isAuthorized
#define SOAP_TYPE_Annot_tns__isAuthorized (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isAuthorized(struct soap*, const char*, int, const tns__isAuthorized *, const char*);
SOAP_FMAC3 tns__isAuthorized * SOAP_FMAC4 soap_in_tns__isAuthorized(struct soap*, const char*, tns__isAuthorized *, const char*);

#ifndef soap_write_tns__isAuthorized
#define soap_write_tns__isAuthorized(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:isAuthorized", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isAuthorized * SOAP_FMAC4 soap_get_tns__isAuthorized(struct soap*, tns__isAuthorized *, const char*, const char*);

#ifndef soap_read_tns__isAuthorized
#define soap_read_tns__isAuthorized(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__isAuthorized(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__isAuthorized * SOAP_FMAC2 soap_instantiate_tns__isAuthorized(struct soap*, int, const char*, const char*, size_t*);

inline tns__isAuthorized * soap_new_tns__isAuthorized(struct soap *soap, int n = -1) { return soap_instantiate_tns__isAuthorized(soap, n, NULL, NULL, NULL); }

inline tns__isAuthorized * soap_new_req_tns__isAuthorized(struct soap *soap) { tns__isAuthorized *_p = soap_instantiate_tns__isAuthorized(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__isAuthorized * soap_new_set_tns__isAuthorized(struct soap *soap) { tns__isAuthorized *_p = soap_instantiate_tns__isAuthorized(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_tns__isAuthorized(struct soap *soap, tns__isAuthorized *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isAuthorized(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__getUserResponse
#define SOAP_TYPE_Annot_tns__getUserResponse (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__getUserResponse(struct soap*, const char*, int, const tns__getUserResponse *, const char*);
SOAP_FMAC3 tns__getUserResponse * SOAP_FMAC4 soap_in_tns__getUserResponse(struct soap*, const char*, tns__getUserResponse *, const char*);

#ifndef soap_write_tns__getUserResponse
#define soap_write_tns__getUserResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:getUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__getUserResponse * SOAP_FMAC4 soap_get_tns__getUserResponse(struct soap*, tns__getUserResponse *, const char*, const char*);

#ifndef soap_read_tns__getUserResponse
#define soap_read_tns__getUserResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__getUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__getUserResponse * SOAP_FMAC2 soap_instantiate_tns__getUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__getUserResponse * soap_new_tns__getUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__getUserResponse(soap, n, NULL, NULL, NULL); }

inline tns__getUserResponse * soap_new_req_tns__getUserResponse(struct soap *soap) { tns__getUserResponse *_p = soap_instantiate_tns__getUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__getUserResponse * soap_new_set_tns__getUserResponse(struct soap *soap, tns__user *return_) { tns__getUserResponse *_p = soap_instantiate_tns__getUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__getUserResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__getUserResponse(struct soap *soap, tns__getUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__getUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__getUser
#define SOAP_TYPE_Annot_tns__getUser (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__getUser(struct soap*, const char*, int, const tns__getUser *, const char*);
SOAP_FMAC3 tns__getUser * SOAP_FMAC4 soap_in_tns__getUser(struct soap*, const char*, tns__getUser *, const char*);

#ifndef soap_write_tns__getUser
#define soap_write_tns__getUser(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:getUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__getUser * SOAP_FMAC4 soap_get_tns__getUser(struct soap*, tns__getUser *, const char*, const char*);

#ifndef soap_read_tns__getUser
#define soap_read_tns__getUser(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__getUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__getUser * SOAP_FMAC2 soap_instantiate_tns__getUser(struct soap*, int, const char*, const char*, size_t*);

inline tns__getUser * soap_new_tns__getUser(struct soap *soap, int n = -1) { return soap_instantiate_tns__getUser(soap, n, NULL, NULL, NULL); }

inline tns__getUser * soap_new_req_tns__getUser(struct soap *soap) { tns__getUser *_p = soap_instantiate_tns__getUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__getUser * soap_new_set_tns__getUser(struct soap *soap) { tns__getUser *_p = soap_instantiate_tns__getUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_tns__getUser(struct soap *soap, tns__getUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__getUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__deleteMediaAnnotationWithIdResponse
#define SOAP_TYPE_Annot_tns__deleteMediaAnnotationWithIdResponse (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__deleteMediaAnnotationWithIdResponse(struct soap*, const char*, int, const tns__deleteMediaAnnotationWithIdResponse *, const char*);
SOAP_FMAC3 tns__deleteMediaAnnotationWithIdResponse * SOAP_FMAC4 soap_in_tns__deleteMediaAnnotationWithIdResponse(struct soap*, const char*, tns__deleteMediaAnnotationWithIdResponse *, const char*);

#ifndef soap_write_tns__deleteMediaAnnotationWithIdResponse
#define soap_write_tns__deleteMediaAnnotationWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:deleteMediaAnnotationWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__deleteMediaAnnotationWithIdResponse * SOAP_FMAC4 soap_get_tns__deleteMediaAnnotationWithIdResponse(struct soap*, tns__deleteMediaAnnotationWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__deleteMediaAnnotationWithIdResponse
#define soap_read_tns__deleteMediaAnnotationWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__deleteMediaAnnotationWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__deleteMediaAnnotationWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__deleteMediaAnnotationWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__deleteMediaAnnotationWithIdResponse * soap_new_tns__deleteMediaAnnotationWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__deleteMediaAnnotationWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__deleteMediaAnnotationWithIdResponse * soap_new_req_tns__deleteMediaAnnotationWithIdResponse(struct soap *soap, bool return_) { tns__deleteMediaAnnotationWithIdResponse *_p = soap_instantiate_tns__deleteMediaAnnotationWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__deleteMediaAnnotationWithIdResponse::return_ = return_; } return _p; }

inline tns__deleteMediaAnnotationWithIdResponse * soap_new_set_tns__deleteMediaAnnotationWithIdResponse(struct soap *soap, bool return_) { tns__deleteMediaAnnotationWithIdResponse *_p = soap_instantiate_tns__deleteMediaAnnotationWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__deleteMediaAnnotationWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__deleteMediaAnnotationWithIdResponse(struct soap *soap, tns__deleteMediaAnnotationWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__deleteMediaAnnotationWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__deleteMediaAnnotationWithId
#define SOAP_TYPE_Annot_tns__deleteMediaAnnotationWithId (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__deleteMediaAnnotationWithId(struct soap*, const char*, int, const tns__deleteMediaAnnotationWithId *, const char*);
SOAP_FMAC3 tns__deleteMediaAnnotationWithId * SOAP_FMAC4 soap_in_tns__deleteMediaAnnotationWithId(struct soap*, const char*, tns__deleteMediaAnnotationWithId *, const char*);

#ifndef soap_write_tns__deleteMediaAnnotationWithId
#define soap_write_tns__deleteMediaAnnotationWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:deleteMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__deleteMediaAnnotationWithId * SOAP_FMAC4 soap_get_tns__deleteMediaAnnotationWithId(struct soap*, tns__deleteMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_read_tns__deleteMediaAnnotationWithId
#define soap_read_tns__deleteMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__deleteMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__deleteMediaAnnotationWithId * SOAP_FMAC2 soap_instantiate_tns__deleteMediaAnnotationWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__deleteMediaAnnotationWithId * soap_new_tns__deleteMediaAnnotationWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__deleteMediaAnnotationWithId(soap, n, NULL, NULL, NULL); }

inline tns__deleteMediaAnnotationWithId * soap_new_req_tns__deleteMediaAnnotationWithId(struct soap *soap, LONG64 id) { tns__deleteMediaAnnotationWithId *_p = soap_instantiate_tns__deleteMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__deleteMediaAnnotationWithId::id = id; } return _p; }

inline tns__deleteMediaAnnotationWithId * soap_new_set_tns__deleteMediaAnnotationWithId(struct soap *soap, LONG64 id) { tns__deleteMediaAnnotationWithId *_p = soap_instantiate_tns__deleteMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__deleteMediaAnnotationWithId::id = id; } return _p; }

inline void soap_delete_tns__deleteMediaAnnotationWithId(struct soap *soap, tns__deleteMediaAnnotationWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__deleteMediaAnnotationWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__deleteMediaAliasWithIdResponse
#define SOAP_TYPE_Annot_tns__deleteMediaAliasWithIdResponse (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__deleteMediaAliasWithIdResponse(struct soap*, const char*, int, const tns__deleteMediaAliasWithIdResponse *, const char*);
SOAP_FMAC3 tns__deleteMediaAliasWithIdResponse * SOAP_FMAC4 soap_in_tns__deleteMediaAliasWithIdResponse(struct soap*, const char*, tns__deleteMediaAliasWithIdResponse *, const char*);

#ifndef soap_write_tns__deleteMediaAliasWithIdResponse
#define soap_write_tns__deleteMediaAliasWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:deleteMediaAliasWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__deleteMediaAliasWithIdResponse * SOAP_FMAC4 soap_get_tns__deleteMediaAliasWithIdResponse(struct soap*, tns__deleteMediaAliasWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__deleteMediaAliasWithIdResponse
#define soap_read_tns__deleteMediaAliasWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__deleteMediaAliasWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__deleteMediaAliasWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__deleteMediaAliasWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__deleteMediaAliasWithIdResponse * soap_new_tns__deleteMediaAliasWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__deleteMediaAliasWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__deleteMediaAliasWithIdResponse * soap_new_req_tns__deleteMediaAliasWithIdResponse(struct soap *soap, bool return_) { tns__deleteMediaAliasWithIdResponse *_p = soap_instantiate_tns__deleteMediaAliasWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__deleteMediaAliasWithIdResponse::return_ = return_; } return _p; }

inline tns__deleteMediaAliasWithIdResponse * soap_new_set_tns__deleteMediaAliasWithIdResponse(struct soap *soap, bool return_) { tns__deleteMediaAliasWithIdResponse *_p = soap_instantiate_tns__deleteMediaAliasWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__deleteMediaAliasWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__deleteMediaAliasWithIdResponse(struct soap *soap, tns__deleteMediaAliasWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__deleteMediaAliasWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__deleteMediaAliasWithId
#define SOAP_TYPE_Annot_tns__deleteMediaAliasWithId (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__deleteMediaAliasWithId(struct soap*, const char*, int, const tns__deleteMediaAliasWithId *, const char*);
SOAP_FMAC3 tns__deleteMediaAliasWithId * SOAP_FMAC4 soap_in_tns__deleteMediaAliasWithId(struct soap*, const char*, tns__deleteMediaAliasWithId *, const char*);

#ifndef soap_write_tns__deleteMediaAliasWithId
#define soap_write_tns__deleteMediaAliasWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:deleteMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__deleteMediaAliasWithId * SOAP_FMAC4 soap_get_tns__deleteMediaAliasWithId(struct soap*, tns__deleteMediaAliasWithId *, const char*, const char*);

#ifndef soap_read_tns__deleteMediaAliasWithId
#define soap_read_tns__deleteMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__deleteMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__deleteMediaAliasWithId * SOAP_FMAC2 soap_instantiate_tns__deleteMediaAliasWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__deleteMediaAliasWithId * soap_new_tns__deleteMediaAliasWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__deleteMediaAliasWithId(soap, n, NULL, NULL, NULL); }

inline tns__deleteMediaAliasWithId * soap_new_req_tns__deleteMediaAliasWithId(struct soap *soap, LONG64 id) { tns__deleteMediaAliasWithId *_p = soap_instantiate_tns__deleteMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__deleteMediaAliasWithId::id = id; } return _p; }

inline tns__deleteMediaAliasWithId * soap_new_set_tns__deleteMediaAliasWithId(struct soap *soap, LONG64 id) { tns__deleteMediaAliasWithId *_p = soap_instantiate_tns__deleteMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__deleteMediaAliasWithId::id = id; } return _p; }

inline void soap_delete_tns__deleteMediaAliasWithId(struct soap *soap, tns__deleteMediaAliasWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__deleteMediaAliasWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__curseUserWithIdResponse
#define SOAP_TYPE_Annot_tns__curseUserWithIdResponse (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__curseUserWithIdResponse(struct soap*, const char*, int, const tns__curseUserWithIdResponse *, const char*);
SOAP_FMAC3 tns__curseUserWithIdResponse * SOAP_FMAC4 soap_in_tns__curseUserWithIdResponse(struct soap*, const char*, tns__curseUserWithIdResponse *, const char*);

#ifndef soap_write_tns__curseUserWithIdResponse
#define soap_write_tns__curseUserWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:curseUserWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseUserWithIdResponse * SOAP_FMAC4 soap_get_tns__curseUserWithIdResponse(struct soap*, tns__curseUserWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__curseUserWithIdResponse
#define soap_read_tns__curseUserWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__curseUserWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__curseUserWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__curseUserWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__curseUserWithIdResponse * soap_new_tns__curseUserWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__curseUserWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__curseUserWithIdResponse * soap_new_req_tns__curseUserWithIdResponse(struct soap *soap, bool return_) { tns__curseUserWithIdResponse *_p = soap_instantiate_tns__curseUserWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseUserWithIdResponse::return_ = return_; } return _p; }

inline tns__curseUserWithIdResponse * soap_new_set_tns__curseUserWithIdResponse(struct soap *soap, bool return_) { tns__curseUserWithIdResponse *_p = soap_instantiate_tns__curseUserWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseUserWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__curseUserWithIdResponse(struct soap *soap, tns__curseUserWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__curseUserWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__curseUserWithId
#define SOAP_TYPE_Annot_tns__curseUserWithId (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__curseUserWithId(struct soap*, const char*, int, const tns__curseUserWithId *, const char*);
SOAP_FMAC3 tns__curseUserWithId * SOAP_FMAC4 soap_in_tns__curseUserWithId(struct soap*, const char*, tns__curseUserWithId *, const char*);

#ifndef soap_write_tns__curseUserWithId
#define soap_write_tns__curseUserWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:curseUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseUserWithId * SOAP_FMAC4 soap_get_tns__curseUserWithId(struct soap*, tns__curseUserWithId *, const char*, const char*);

#ifndef soap_read_tns__curseUserWithId
#define soap_read_tns__curseUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__curseUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__curseUserWithId * SOAP_FMAC2 soap_instantiate_tns__curseUserWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__curseUserWithId * soap_new_tns__curseUserWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__curseUserWithId(soap, n, NULL, NULL, NULL); }

inline tns__curseUserWithId * soap_new_req_tns__curseUserWithId(struct soap *soap, LONG64 id) { tns__curseUserWithId *_p = soap_instantiate_tns__curseUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseUserWithId::id = id; } return _p; }

inline tns__curseUserWithId * soap_new_set_tns__curseUserWithId(struct soap *soap, LONG64 id) { tns__curseUserWithId *_p = soap_instantiate_tns__curseUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseUserWithId::id = id; } return _p; }

inline void soap_delete_tns__curseUserWithId(struct soap *soap, tns__curseUserWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__curseUserWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__curseMediaTokenWithIdResponse
#define SOAP_TYPE_Annot_tns__curseMediaTokenWithIdResponse (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__curseMediaTokenWithIdResponse(struct soap*, const char*, int, const tns__curseMediaTokenWithIdResponse *, const char*);
SOAP_FMAC3 tns__curseMediaTokenWithIdResponse * SOAP_FMAC4 soap_in_tns__curseMediaTokenWithIdResponse(struct soap*, const char*, tns__curseMediaTokenWithIdResponse *, const char*);

#ifndef soap_write_tns__curseMediaTokenWithIdResponse
#define soap_write_tns__curseMediaTokenWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:curseMediaTokenWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaTokenWithIdResponse * SOAP_FMAC4 soap_get_tns__curseMediaTokenWithIdResponse(struct soap*, tns__curseMediaTokenWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__curseMediaTokenWithIdResponse
#define soap_read_tns__curseMediaTokenWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__curseMediaTokenWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__curseMediaTokenWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__curseMediaTokenWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__curseMediaTokenWithIdResponse * soap_new_tns__curseMediaTokenWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__curseMediaTokenWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__curseMediaTokenWithIdResponse * soap_new_req_tns__curseMediaTokenWithIdResponse(struct soap *soap, bool return_) { tns__curseMediaTokenWithIdResponse *_p = soap_instantiate_tns__curseMediaTokenWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaTokenWithIdResponse::return_ = return_; } return _p; }

inline tns__curseMediaTokenWithIdResponse * soap_new_set_tns__curseMediaTokenWithIdResponse(struct soap *soap, bool return_) { tns__curseMediaTokenWithIdResponse *_p = soap_instantiate_tns__curseMediaTokenWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaTokenWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__curseMediaTokenWithIdResponse(struct soap *soap, tns__curseMediaTokenWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__curseMediaTokenWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__curseMediaTokenWithId
#define SOAP_TYPE_Annot_tns__curseMediaTokenWithId (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__curseMediaTokenWithId(struct soap*, const char*, int, const tns__curseMediaTokenWithId *, const char*);
SOAP_FMAC3 tns__curseMediaTokenWithId * SOAP_FMAC4 soap_in_tns__curseMediaTokenWithId(struct soap*, const char*, tns__curseMediaTokenWithId *, const char*);

#ifndef soap_write_tns__curseMediaTokenWithId
#define soap_write_tns__curseMediaTokenWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:curseMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaTokenWithId * SOAP_FMAC4 soap_get_tns__curseMediaTokenWithId(struct soap*, tns__curseMediaTokenWithId *, const char*, const char*);

#ifndef soap_read_tns__curseMediaTokenWithId
#define soap_read_tns__curseMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__curseMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__curseMediaTokenWithId * SOAP_FMAC2 soap_instantiate_tns__curseMediaTokenWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__curseMediaTokenWithId * soap_new_tns__curseMediaTokenWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__curseMediaTokenWithId(soap, n, NULL, NULL, NULL); }

inline tns__curseMediaTokenWithId * soap_new_req_tns__curseMediaTokenWithId(struct soap *soap, LONG64 id) { tns__curseMediaTokenWithId *_p = soap_instantiate_tns__curseMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaTokenWithId::id = id; } return _p; }

inline tns__curseMediaTokenWithId * soap_new_set_tns__curseMediaTokenWithId(struct soap *soap, LONG64 id) { tns__curseMediaTokenWithId *_p = soap_instantiate_tns__curseMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaTokenWithId::id = id; } return _p; }

inline void soap_delete_tns__curseMediaTokenWithId(struct soap *soap, tns__curseMediaTokenWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__curseMediaTokenWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__curseMediaAnnotationWithIdResponse
#define SOAP_TYPE_Annot_tns__curseMediaAnnotationWithIdResponse (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__curseMediaAnnotationWithIdResponse(struct soap*, const char*, int, const tns__curseMediaAnnotationWithIdResponse *, const char*);
SOAP_FMAC3 tns__curseMediaAnnotationWithIdResponse * SOAP_FMAC4 soap_in_tns__curseMediaAnnotationWithIdResponse(struct soap*, const char*, tns__curseMediaAnnotationWithIdResponse *, const char*);

#ifndef soap_write_tns__curseMediaAnnotationWithIdResponse
#define soap_write_tns__curseMediaAnnotationWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:curseMediaAnnotationWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaAnnotationWithIdResponse * SOAP_FMAC4 soap_get_tns__curseMediaAnnotationWithIdResponse(struct soap*, tns__curseMediaAnnotationWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__curseMediaAnnotationWithIdResponse
#define soap_read_tns__curseMediaAnnotationWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__curseMediaAnnotationWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__curseMediaAnnotationWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__curseMediaAnnotationWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__curseMediaAnnotationWithIdResponse * soap_new_tns__curseMediaAnnotationWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__curseMediaAnnotationWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__curseMediaAnnotationWithIdResponse * soap_new_req_tns__curseMediaAnnotationWithIdResponse(struct soap *soap, bool return_) { tns__curseMediaAnnotationWithIdResponse *_p = soap_instantiate_tns__curseMediaAnnotationWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaAnnotationWithIdResponse::return_ = return_; } return _p; }

inline tns__curseMediaAnnotationWithIdResponse * soap_new_set_tns__curseMediaAnnotationWithIdResponse(struct soap *soap, bool return_) { tns__curseMediaAnnotationWithIdResponse *_p = soap_instantiate_tns__curseMediaAnnotationWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaAnnotationWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__curseMediaAnnotationWithIdResponse(struct soap *soap, tns__curseMediaAnnotationWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__curseMediaAnnotationWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__curseMediaAnnotationWithId
#define SOAP_TYPE_Annot_tns__curseMediaAnnotationWithId (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__curseMediaAnnotationWithId(struct soap*, const char*, int, const tns__curseMediaAnnotationWithId *, const char*);
SOAP_FMAC3 tns__curseMediaAnnotationWithId * SOAP_FMAC4 soap_in_tns__curseMediaAnnotationWithId(struct soap*, const char*, tns__curseMediaAnnotationWithId *, const char*);

#ifndef soap_write_tns__curseMediaAnnotationWithId
#define soap_write_tns__curseMediaAnnotationWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:curseMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaAnnotationWithId * SOAP_FMAC4 soap_get_tns__curseMediaAnnotationWithId(struct soap*, tns__curseMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_read_tns__curseMediaAnnotationWithId
#define soap_read_tns__curseMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__curseMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__curseMediaAnnotationWithId * SOAP_FMAC2 soap_instantiate_tns__curseMediaAnnotationWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__curseMediaAnnotationWithId * soap_new_tns__curseMediaAnnotationWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__curseMediaAnnotationWithId(soap, n, NULL, NULL, NULL); }

inline tns__curseMediaAnnotationWithId * soap_new_req_tns__curseMediaAnnotationWithId(struct soap *soap, LONG64 id) { tns__curseMediaAnnotationWithId *_p = soap_instantiate_tns__curseMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaAnnotationWithId::id = id; } return _p; }

inline tns__curseMediaAnnotationWithId * soap_new_set_tns__curseMediaAnnotationWithId(struct soap *soap, LONG64 id) { tns__curseMediaAnnotationWithId *_p = soap_instantiate_tns__curseMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaAnnotationWithId::id = id; } return _p; }

inline void soap_delete_tns__curseMediaAnnotationWithId(struct soap *soap, tns__curseMediaAnnotationWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__curseMediaAnnotationWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__curseMediaAliasWithIdResponse
#define SOAP_TYPE_Annot_tns__curseMediaAliasWithIdResponse (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__curseMediaAliasWithIdResponse(struct soap*, const char*, int, const tns__curseMediaAliasWithIdResponse *, const char*);
SOAP_FMAC3 tns__curseMediaAliasWithIdResponse * SOAP_FMAC4 soap_in_tns__curseMediaAliasWithIdResponse(struct soap*, const char*, tns__curseMediaAliasWithIdResponse *, const char*);

#ifndef soap_write_tns__curseMediaAliasWithIdResponse
#define soap_write_tns__curseMediaAliasWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:curseMediaAliasWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaAliasWithIdResponse * SOAP_FMAC4 soap_get_tns__curseMediaAliasWithIdResponse(struct soap*, tns__curseMediaAliasWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__curseMediaAliasWithIdResponse
#define soap_read_tns__curseMediaAliasWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__curseMediaAliasWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__curseMediaAliasWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__curseMediaAliasWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__curseMediaAliasWithIdResponse * soap_new_tns__curseMediaAliasWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__curseMediaAliasWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__curseMediaAliasWithIdResponse * soap_new_req_tns__curseMediaAliasWithIdResponse(struct soap *soap, bool return_) { tns__curseMediaAliasWithIdResponse *_p = soap_instantiate_tns__curseMediaAliasWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaAliasWithIdResponse::return_ = return_; } return _p; }

inline tns__curseMediaAliasWithIdResponse * soap_new_set_tns__curseMediaAliasWithIdResponse(struct soap *soap, bool return_) { tns__curseMediaAliasWithIdResponse *_p = soap_instantiate_tns__curseMediaAliasWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaAliasWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__curseMediaAliasWithIdResponse(struct soap *soap, tns__curseMediaAliasWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__curseMediaAliasWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__curseMediaAliasWithId
#define SOAP_TYPE_Annot_tns__curseMediaAliasWithId (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__curseMediaAliasWithId(struct soap*, const char*, int, const tns__curseMediaAliasWithId *, const char*);
SOAP_FMAC3 tns__curseMediaAliasWithId * SOAP_FMAC4 soap_in_tns__curseMediaAliasWithId(struct soap*, const char*, tns__curseMediaAliasWithId *, const char*);

#ifndef soap_write_tns__curseMediaAliasWithId
#define soap_write_tns__curseMediaAliasWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:curseMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaAliasWithId * SOAP_FMAC4 soap_get_tns__curseMediaAliasWithId(struct soap*, tns__curseMediaAliasWithId *, const char*, const char*);

#ifndef soap_read_tns__curseMediaAliasWithId
#define soap_read_tns__curseMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__curseMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__curseMediaAliasWithId * SOAP_FMAC2 soap_instantiate_tns__curseMediaAliasWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__curseMediaAliasWithId * soap_new_tns__curseMediaAliasWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__curseMediaAliasWithId(soap, n, NULL, NULL, NULL); }

inline tns__curseMediaAliasWithId * soap_new_req_tns__curseMediaAliasWithId(struct soap *soap, LONG64 id) { tns__curseMediaAliasWithId *_p = soap_instantiate_tns__curseMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaAliasWithId::id = id; } return _p; }

inline tns__curseMediaAliasWithId * soap_new_set_tns__curseMediaAliasWithId(struct soap *soap, LONG64 id) { tns__curseMediaAliasWithId *_p = soap_instantiate_tns__curseMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__curseMediaAliasWithId::id = id; } return _p; }

inline void soap_delete_tns__curseMediaAliasWithId(struct soap *soap, tns__curseMediaAliasWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__curseMediaAliasWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__chatResponse
#define SOAP_TYPE_Annot_tns__chatResponse (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__chatResponse(struct soap*, const char*, int, const tns__chatResponse *, const char*);
SOAP_FMAC3 tns__chatResponse * SOAP_FMAC4 soap_in_tns__chatResponse(struct soap*, const char*, tns__chatResponse *, const char*);

#ifndef soap_write_tns__chatResponse
#define soap_write_tns__chatResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:chatResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__chatResponse * SOAP_FMAC4 soap_get_tns__chatResponse(struct soap*, tns__chatResponse *, const char*, const char*);

#ifndef soap_read_tns__chatResponse
#define soap_read_tns__chatResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__chatResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__chatResponse * SOAP_FMAC2 soap_instantiate_tns__chatResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__chatResponse * soap_new_tns__chatResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__chatResponse(soap, n, NULL, NULL, NULL); }

inline tns__chatResponse * soap_new_req_tns__chatResponse(struct soap *soap) { tns__chatResponse *_p = soap_instantiate_tns__chatResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__chatResponse * soap_new_set_tns__chatResponse(struct soap *soap, std::string *return_) { tns__chatResponse *_p = soap_instantiate_tns__chatResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__chatResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__chatResponse(struct soap *soap, tns__chatResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__chatResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__chat
#define SOAP_TYPE_Annot_tns__chat (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__chat(struct soap*, const char*, int, const tns__chat *, const char*);
SOAP_FMAC3 tns__chat * SOAP_FMAC4 soap_in_tns__chat(struct soap*, const char*, tns__chat *, const char*);

#ifndef soap_write_tns__chat
#define soap_write_tns__chat(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:chat", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__chat * SOAP_FMAC4 soap_get_tns__chat(struct soap*, tns__chat *, const char*, const char*);

#ifndef soap_read_tns__chat
#define soap_read_tns__chat(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__chat(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__chat * SOAP_FMAC2 soap_instantiate_tns__chat(struct soap*, int, const char*, const char*, size_t*);

inline tns__chat * soap_new_tns__chat(struct soap *soap, int n = -1) { return soap_instantiate_tns__chat(soap, n, NULL, NULL, NULL); }

inline tns__chat * soap_new_req_tns__chat(struct soap *soap) { tns__chat *_p = soap_instantiate_tns__chat(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tns__chat * soap_new_set_tns__chat(struct soap *soap, std::string *text) { tns__chat *_p = soap_instantiate_tns__chat(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__chat::text = text; } return _p; }

inline void soap_delete_tns__chat(struct soap *soap, tns__chat *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__chat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blockUserWithIdResponse
#define SOAP_TYPE_Annot_tns__blockUserWithIdResponse (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blockUserWithIdResponse(struct soap*, const char*, int, const tns__blockUserWithIdResponse *, const char*);
SOAP_FMAC3 tns__blockUserWithIdResponse * SOAP_FMAC4 soap_in_tns__blockUserWithIdResponse(struct soap*, const char*, tns__blockUserWithIdResponse *, const char*);

#ifndef soap_write_tns__blockUserWithIdResponse
#define soap_write_tns__blockUserWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blockUserWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockUserWithIdResponse * SOAP_FMAC4 soap_get_tns__blockUserWithIdResponse(struct soap*, tns__blockUserWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__blockUserWithIdResponse
#define soap_read_tns__blockUserWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blockUserWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blockUserWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__blockUserWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__blockUserWithIdResponse * soap_new_tns__blockUserWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__blockUserWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__blockUserWithIdResponse * soap_new_req_tns__blockUserWithIdResponse(struct soap *soap, bool return_) { tns__blockUserWithIdResponse *_p = soap_instantiate_tns__blockUserWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockUserWithIdResponse::return_ = return_; } return _p; }

inline tns__blockUserWithIdResponse * soap_new_set_tns__blockUserWithIdResponse(struct soap *soap, bool return_) { tns__blockUserWithIdResponse *_p = soap_instantiate_tns__blockUserWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockUserWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__blockUserWithIdResponse(struct soap *soap, tns__blockUserWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blockUserWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blockUserWithId
#define SOAP_TYPE_Annot_tns__blockUserWithId (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blockUserWithId(struct soap*, const char*, int, const tns__blockUserWithId *, const char*);
SOAP_FMAC3 tns__blockUserWithId * SOAP_FMAC4 soap_in_tns__blockUserWithId(struct soap*, const char*, tns__blockUserWithId *, const char*);

#ifndef soap_write_tns__blockUserWithId
#define soap_write_tns__blockUserWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blockUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockUserWithId * SOAP_FMAC4 soap_get_tns__blockUserWithId(struct soap*, tns__blockUserWithId *, const char*, const char*);

#ifndef soap_read_tns__blockUserWithId
#define soap_read_tns__blockUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blockUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blockUserWithId * SOAP_FMAC2 soap_instantiate_tns__blockUserWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__blockUserWithId * soap_new_tns__blockUserWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__blockUserWithId(soap, n, NULL, NULL, NULL); }

inline tns__blockUserWithId * soap_new_req_tns__blockUserWithId(struct soap *soap, LONG64 id) { tns__blockUserWithId *_p = soap_instantiate_tns__blockUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockUserWithId::id = id; } return _p; }

inline tns__blockUserWithId * soap_new_set_tns__blockUserWithId(struct soap *soap, LONG64 id) { tns__blockUserWithId *_p = soap_instantiate_tns__blockUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockUserWithId::id = id; } return _p; }

inline void soap_delete_tns__blockUserWithId(struct soap *soap, tns__blockUserWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blockUserWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blockMediaAnnotationWithIdResponse
#define SOAP_TYPE_Annot_tns__blockMediaAnnotationWithIdResponse (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blockMediaAnnotationWithIdResponse(struct soap*, const char*, int, const tns__blockMediaAnnotationWithIdResponse *, const char*);
SOAP_FMAC3 tns__blockMediaAnnotationWithIdResponse * SOAP_FMAC4 soap_in_tns__blockMediaAnnotationWithIdResponse(struct soap*, const char*, tns__blockMediaAnnotationWithIdResponse *, const char*);

#ifndef soap_write_tns__blockMediaAnnotationWithIdResponse
#define soap_write_tns__blockMediaAnnotationWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blockMediaAnnotationWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockMediaAnnotationWithIdResponse * SOAP_FMAC4 soap_get_tns__blockMediaAnnotationWithIdResponse(struct soap*, tns__blockMediaAnnotationWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__blockMediaAnnotationWithIdResponse
#define soap_read_tns__blockMediaAnnotationWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blockMediaAnnotationWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blockMediaAnnotationWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__blockMediaAnnotationWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__blockMediaAnnotationWithIdResponse * soap_new_tns__blockMediaAnnotationWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__blockMediaAnnotationWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__blockMediaAnnotationWithIdResponse * soap_new_req_tns__blockMediaAnnotationWithIdResponse(struct soap *soap, bool return_) { tns__blockMediaAnnotationWithIdResponse *_p = soap_instantiate_tns__blockMediaAnnotationWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockMediaAnnotationWithIdResponse::return_ = return_; } return _p; }

inline tns__blockMediaAnnotationWithIdResponse * soap_new_set_tns__blockMediaAnnotationWithIdResponse(struct soap *soap, bool return_) { tns__blockMediaAnnotationWithIdResponse *_p = soap_instantiate_tns__blockMediaAnnotationWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockMediaAnnotationWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__blockMediaAnnotationWithIdResponse(struct soap *soap, tns__blockMediaAnnotationWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blockMediaAnnotationWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blockMediaAnnotationWithId
#define SOAP_TYPE_Annot_tns__blockMediaAnnotationWithId (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blockMediaAnnotationWithId(struct soap*, const char*, int, const tns__blockMediaAnnotationWithId *, const char*);
SOAP_FMAC3 tns__blockMediaAnnotationWithId * SOAP_FMAC4 soap_in_tns__blockMediaAnnotationWithId(struct soap*, const char*, tns__blockMediaAnnotationWithId *, const char*);

#ifndef soap_write_tns__blockMediaAnnotationWithId
#define soap_write_tns__blockMediaAnnotationWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blockMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockMediaAnnotationWithId * SOAP_FMAC4 soap_get_tns__blockMediaAnnotationWithId(struct soap*, tns__blockMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_read_tns__blockMediaAnnotationWithId
#define soap_read_tns__blockMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blockMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blockMediaAnnotationWithId * SOAP_FMAC2 soap_instantiate_tns__blockMediaAnnotationWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__blockMediaAnnotationWithId * soap_new_tns__blockMediaAnnotationWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__blockMediaAnnotationWithId(soap, n, NULL, NULL, NULL); }

inline tns__blockMediaAnnotationWithId * soap_new_req_tns__blockMediaAnnotationWithId(struct soap *soap, LONG64 id) { tns__blockMediaAnnotationWithId *_p = soap_instantiate_tns__blockMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockMediaAnnotationWithId::id = id; } return _p; }

inline tns__blockMediaAnnotationWithId * soap_new_set_tns__blockMediaAnnotationWithId(struct soap *soap, LONG64 id) { tns__blockMediaAnnotationWithId *_p = soap_instantiate_tns__blockMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockMediaAnnotationWithId::id = id; } return _p; }

inline void soap_delete_tns__blockMediaAnnotationWithId(struct soap *soap, tns__blockMediaAnnotationWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blockMediaAnnotationWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blockMediaAliasWithIdResponse
#define SOAP_TYPE_Annot_tns__blockMediaAliasWithIdResponse (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blockMediaAliasWithIdResponse(struct soap*, const char*, int, const tns__blockMediaAliasWithIdResponse *, const char*);
SOAP_FMAC3 tns__blockMediaAliasWithIdResponse * SOAP_FMAC4 soap_in_tns__blockMediaAliasWithIdResponse(struct soap*, const char*, tns__blockMediaAliasWithIdResponse *, const char*);

#ifndef soap_write_tns__blockMediaAliasWithIdResponse
#define soap_write_tns__blockMediaAliasWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blockMediaAliasWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockMediaAliasWithIdResponse * SOAP_FMAC4 soap_get_tns__blockMediaAliasWithIdResponse(struct soap*, tns__blockMediaAliasWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__blockMediaAliasWithIdResponse
#define soap_read_tns__blockMediaAliasWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blockMediaAliasWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blockMediaAliasWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__blockMediaAliasWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__blockMediaAliasWithIdResponse * soap_new_tns__blockMediaAliasWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__blockMediaAliasWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__blockMediaAliasWithIdResponse * soap_new_req_tns__blockMediaAliasWithIdResponse(struct soap *soap, bool return_) { tns__blockMediaAliasWithIdResponse *_p = soap_instantiate_tns__blockMediaAliasWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockMediaAliasWithIdResponse::return_ = return_; } return _p; }

inline tns__blockMediaAliasWithIdResponse * soap_new_set_tns__blockMediaAliasWithIdResponse(struct soap *soap, bool return_) { tns__blockMediaAliasWithIdResponse *_p = soap_instantiate_tns__blockMediaAliasWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockMediaAliasWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__blockMediaAliasWithIdResponse(struct soap *soap, tns__blockMediaAliasWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blockMediaAliasWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blockMediaAliasWithId
#define SOAP_TYPE_Annot_tns__blockMediaAliasWithId (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blockMediaAliasWithId(struct soap*, const char*, int, const tns__blockMediaAliasWithId *, const char*);
SOAP_FMAC3 tns__blockMediaAliasWithId * SOAP_FMAC4 soap_in_tns__blockMediaAliasWithId(struct soap*, const char*, tns__blockMediaAliasWithId *, const char*);

#ifndef soap_write_tns__blockMediaAliasWithId
#define soap_write_tns__blockMediaAliasWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blockMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockMediaAliasWithId * SOAP_FMAC4 soap_get_tns__blockMediaAliasWithId(struct soap*, tns__blockMediaAliasWithId *, const char*, const char*);

#ifndef soap_read_tns__blockMediaAliasWithId
#define soap_read_tns__blockMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blockMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blockMediaAliasWithId * SOAP_FMAC2 soap_instantiate_tns__blockMediaAliasWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__blockMediaAliasWithId * soap_new_tns__blockMediaAliasWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__blockMediaAliasWithId(soap, n, NULL, NULL, NULL); }

inline tns__blockMediaAliasWithId * soap_new_req_tns__blockMediaAliasWithId(struct soap *soap, LONG64 id) { tns__blockMediaAliasWithId *_p = soap_instantiate_tns__blockMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockMediaAliasWithId::id = id; } return _p; }

inline tns__blockMediaAliasWithId * soap_new_set_tns__blockMediaAliasWithId(struct soap *soap, LONG64 id) { tns__blockMediaAliasWithId *_p = soap_instantiate_tns__blockMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blockMediaAliasWithId::id = id; } return _p; }

inline void soap_delete_tns__blockMediaAliasWithId(struct soap *soap, tns__blockMediaAliasWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blockMediaAliasWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blessUserWithIdResponse
#define SOAP_TYPE_Annot_tns__blessUserWithIdResponse (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blessUserWithIdResponse(struct soap*, const char*, int, const tns__blessUserWithIdResponse *, const char*);
SOAP_FMAC3 tns__blessUserWithIdResponse * SOAP_FMAC4 soap_in_tns__blessUserWithIdResponse(struct soap*, const char*, tns__blessUserWithIdResponse *, const char*);

#ifndef soap_write_tns__blessUserWithIdResponse
#define soap_write_tns__blessUserWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blessUserWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessUserWithIdResponse * SOAP_FMAC4 soap_get_tns__blessUserWithIdResponse(struct soap*, tns__blessUserWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__blessUserWithIdResponse
#define soap_read_tns__blessUserWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blessUserWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blessUserWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__blessUserWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__blessUserWithIdResponse * soap_new_tns__blessUserWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__blessUserWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__blessUserWithIdResponse * soap_new_req_tns__blessUserWithIdResponse(struct soap *soap, bool return_) { tns__blessUserWithIdResponse *_p = soap_instantiate_tns__blessUserWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessUserWithIdResponse::return_ = return_; } return _p; }

inline tns__blessUserWithIdResponse * soap_new_set_tns__blessUserWithIdResponse(struct soap *soap, bool return_) { tns__blessUserWithIdResponse *_p = soap_instantiate_tns__blessUserWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessUserWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__blessUserWithIdResponse(struct soap *soap, tns__blessUserWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blessUserWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blessUserWithId
#define SOAP_TYPE_Annot_tns__blessUserWithId (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blessUserWithId(struct soap*, const char*, int, const tns__blessUserWithId *, const char*);
SOAP_FMAC3 tns__blessUserWithId * SOAP_FMAC4 soap_in_tns__blessUserWithId(struct soap*, const char*, tns__blessUserWithId *, const char*);

#ifndef soap_write_tns__blessUserWithId
#define soap_write_tns__blessUserWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blessUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessUserWithId * SOAP_FMAC4 soap_get_tns__blessUserWithId(struct soap*, tns__blessUserWithId *, const char*, const char*);

#ifndef soap_read_tns__blessUserWithId
#define soap_read_tns__blessUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blessUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blessUserWithId * SOAP_FMAC2 soap_instantiate_tns__blessUserWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__blessUserWithId * soap_new_tns__blessUserWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__blessUserWithId(soap, n, NULL, NULL, NULL); }

inline tns__blessUserWithId * soap_new_req_tns__blessUserWithId(struct soap *soap, LONG64 id) { tns__blessUserWithId *_p = soap_instantiate_tns__blessUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessUserWithId::id = id; } return _p; }

inline tns__blessUserWithId * soap_new_set_tns__blessUserWithId(struct soap *soap, LONG64 id) { tns__blessUserWithId *_p = soap_instantiate_tns__blessUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessUserWithId::id = id; } return _p; }

inline void soap_delete_tns__blessUserWithId(struct soap *soap, tns__blessUserWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blessUserWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blessMediaTokenWithIdResponse
#define SOAP_TYPE_Annot_tns__blessMediaTokenWithIdResponse (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blessMediaTokenWithIdResponse(struct soap*, const char*, int, const tns__blessMediaTokenWithIdResponse *, const char*);
SOAP_FMAC3 tns__blessMediaTokenWithIdResponse * SOAP_FMAC4 soap_in_tns__blessMediaTokenWithIdResponse(struct soap*, const char*, tns__blessMediaTokenWithIdResponse *, const char*);

#ifndef soap_write_tns__blessMediaTokenWithIdResponse
#define soap_write_tns__blessMediaTokenWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blessMediaTokenWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaTokenWithIdResponse * SOAP_FMAC4 soap_get_tns__blessMediaTokenWithIdResponse(struct soap*, tns__blessMediaTokenWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__blessMediaTokenWithIdResponse
#define soap_read_tns__blessMediaTokenWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blessMediaTokenWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blessMediaTokenWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__blessMediaTokenWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__blessMediaTokenWithIdResponse * soap_new_tns__blessMediaTokenWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__blessMediaTokenWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__blessMediaTokenWithIdResponse * soap_new_req_tns__blessMediaTokenWithIdResponse(struct soap *soap, bool return_) { tns__blessMediaTokenWithIdResponse *_p = soap_instantiate_tns__blessMediaTokenWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaTokenWithIdResponse::return_ = return_; } return _p; }

inline tns__blessMediaTokenWithIdResponse * soap_new_set_tns__blessMediaTokenWithIdResponse(struct soap *soap, bool return_) { tns__blessMediaTokenWithIdResponse *_p = soap_instantiate_tns__blessMediaTokenWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaTokenWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__blessMediaTokenWithIdResponse(struct soap *soap, tns__blessMediaTokenWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blessMediaTokenWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blessMediaTokenWithId
#define SOAP_TYPE_Annot_tns__blessMediaTokenWithId (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blessMediaTokenWithId(struct soap*, const char*, int, const tns__blessMediaTokenWithId *, const char*);
SOAP_FMAC3 tns__blessMediaTokenWithId * SOAP_FMAC4 soap_in_tns__blessMediaTokenWithId(struct soap*, const char*, tns__blessMediaTokenWithId *, const char*);

#ifndef soap_write_tns__blessMediaTokenWithId
#define soap_write_tns__blessMediaTokenWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blessMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaTokenWithId * SOAP_FMAC4 soap_get_tns__blessMediaTokenWithId(struct soap*, tns__blessMediaTokenWithId *, const char*, const char*);

#ifndef soap_read_tns__blessMediaTokenWithId
#define soap_read_tns__blessMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blessMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blessMediaTokenWithId * SOAP_FMAC2 soap_instantiate_tns__blessMediaTokenWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__blessMediaTokenWithId * soap_new_tns__blessMediaTokenWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__blessMediaTokenWithId(soap, n, NULL, NULL, NULL); }

inline tns__blessMediaTokenWithId * soap_new_req_tns__blessMediaTokenWithId(struct soap *soap, LONG64 id) { tns__blessMediaTokenWithId *_p = soap_instantiate_tns__blessMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaTokenWithId::id = id; } return _p; }

inline tns__blessMediaTokenWithId * soap_new_set_tns__blessMediaTokenWithId(struct soap *soap, LONG64 id) { tns__blessMediaTokenWithId *_p = soap_instantiate_tns__blessMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaTokenWithId::id = id; } return _p; }

inline void soap_delete_tns__blessMediaTokenWithId(struct soap *soap, tns__blessMediaTokenWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blessMediaTokenWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blessMediaAnnotationWithIdResponse
#define SOAP_TYPE_Annot_tns__blessMediaAnnotationWithIdResponse (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blessMediaAnnotationWithIdResponse(struct soap*, const char*, int, const tns__blessMediaAnnotationWithIdResponse *, const char*);
SOAP_FMAC3 tns__blessMediaAnnotationWithIdResponse * SOAP_FMAC4 soap_in_tns__blessMediaAnnotationWithIdResponse(struct soap*, const char*, tns__blessMediaAnnotationWithIdResponse *, const char*);

#ifndef soap_write_tns__blessMediaAnnotationWithIdResponse
#define soap_write_tns__blessMediaAnnotationWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blessMediaAnnotationWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaAnnotationWithIdResponse * SOAP_FMAC4 soap_get_tns__blessMediaAnnotationWithIdResponse(struct soap*, tns__blessMediaAnnotationWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__blessMediaAnnotationWithIdResponse
#define soap_read_tns__blessMediaAnnotationWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blessMediaAnnotationWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blessMediaAnnotationWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__blessMediaAnnotationWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__blessMediaAnnotationWithIdResponse * soap_new_tns__blessMediaAnnotationWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__blessMediaAnnotationWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__blessMediaAnnotationWithIdResponse * soap_new_req_tns__blessMediaAnnotationWithIdResponse(struct soap *soap, bool return_) { tns__blessMediaAnnotationWithIdResponse *_p = soap_instantiate_tns__blessMediaAnnotationWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaAnnotationWithIdResponse::return_ = return_; } return _p; }

inline tns__blessMediaAnnotationWithIdResponse * soap_new_set_tns__blessMediaAnnotationWithIdResponse(struct soap *soap, bool return_) { tns__blessMediaAnnotationWithIdResponse *_p = soap_instantiate_tns__blessMediaAnnotationWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaAnnotationWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__blessMediaAnnotationWithIdResponse(struct soap *soap, tns__blessMediaAnnotationWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blessMediaAnnotationWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blessMediaAnnotationWithId
#define SOAP_TYPE_Annot_tns__blessMediaAnnotationWithId (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blessMediaAnnotationWithId(struct soap*, const char*, int, const tns__blessMediaAnnotationWithId *, const char*);
SOAP_FMAC3 tns__blessMediaAnnotationWithId * SOAP_FMAC4 soap_in_tns__blessMediaAnnotationWithId(struct soap*, const char*, tns__blessMediaAnnotationWithId *, const char*);

#ifndef soap_write_tns__blessMediaAnnotationWithId
#define soap_write_tns__blessMediaAnnotationWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blessMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaAnnotationWithId * SOAP_FMAC4 soap_get_tns__blessMediaAnnotationWithId(struct soap*, tns__blessMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_read_tns__blessMediaAnnotationWithId
#define soap_read_tns__blessMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blessMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blessMediaAnnotationWithId * SOAP_FMAC2 soap_instantiate_tns__blessMediaAnnotationWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__blessMediaAnnotationWithId * soap_new_tns__blessMediaAnnotationWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__blessMediaAnnotationWithId(soap, n, NULL, NULL, NULL); }

inline tns__blessMediaAnnotationWithId * soap_new_req_tns__blessMediaAnnotationWithId(struct soap *soap, LONG64 id) { tns__blessMediaAnnotationWithId *_p = soap_instantiate_tns__blessMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaAnnotationWithId::id = id; } return _p; }

inline tns__blessMediaAnnotationWithId * soap_new_set_tns__blessMediaAnnotationWithId(struct soap *soap, LONG64 id) { tns__blessMediaAnnotationWithId *_p = soap_instantiate_tns__blessMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaAnnotationWithId::id = id; } return _p; }

inline void soap_delete_tns__blessMediaAnnotationWithId(struct soap *soap, tns__blessMediaAnnotationWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blessMediaAnnotationWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blessMediaAliasWithIdResponse
#define SOAP_TYPE_Annot_tns__blessMediaAliasWithIdResponse (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blessMediaAliasWithIdResponse(struct soap*, const char*, int, const tns__blessMediaAliasWithIdResponse *, const char*);
SOAP_FMAC3 tns__blessMediaAliasWithIdResponse * SOAP_FMAC4 soap_in_tns__blessMediaAliasWithIdResponse(struct soap*, const char*, tns__blessMediaAliasWithIdResponse *, const char*);

#ifndef soap_write_tns__blessMediaAliasWithIdResponse
#define soap_write_tns__blessMediaAliasWithIdResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blessMediaAliasWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaAliasWithIdResponse * SOAP_FMAC4 soap_get_tns__blessMediaAliasWithIdResponse(struct soap*, tns__blessMediaAliasWithIdResponse *, const char*, const char*);

#ifndef soap_read_tns__blessMediaAliasWithIdResponse
#define soap_read_tns__blessMediaAliasWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blessMediaAliasWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blessMediaAliasWithIdResponse * SOAP_FMAC2 soap_instantiate_tns__blessMediaAliasWithIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline tns__blessMediaAliasWithIdResponse * soap_new_tns__blessMediaAliasWithIdResponse(struct soap *soap, int n = -1) { return soap_instantiate_tns__blessMediaAliasWithIdResponse(soap, n, NULL, NULL, NULL); }

inline tns__blessMediaAliasWithIdResponse * soap_new_req_tns__blessMediaAliasWithIdResponse(struct soap *soap, bool return_) { tns__blessMediaAliasWithIdResponse *_p = soap_instantiate_tns__blessMediaAliasWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaAliasWithIdResponse::return_ = return_; } return _p; }

inline tns__blessMediaAliasWithIdResponse * soap_new_set_tns__blessMediaAliasWithIdResponse(struct soap *soap, bool return_) { tns__blessMediaAliasWithIdResponse *_p = soap_instantiate_tns__blessMediaAliasWithIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaAliasWithIdResponse::return_ = return_; } return _p; }

inline void soap_delete_tns__blessMediaAliasWithIdResponse(struct soap *soap, tns__blessMediaAliasWithIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blessMediaAliasWithIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__blessMediaAliasWithId
#define SOAP_TYPE_Annot_tns__blessMediaAliasWithId (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__blessMediaAliasWithId(struct soap*, const char*, int, const tns__blessMediaAliasWithId *, const char*);
SOAP_FMAC3 tns__blessMediaAliasWithId * SOAP_FMAC4 soap_in_tns__blessMediaAliasWithId(struct soap*, const char*, tns__blessMediaAliasWithId *, const char*);

#ifndef soap_write_tns__blessMediaAliasWithId
#define soap_write_tns__blessMediaAliasWithId(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:blessMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaAliasWithId * SOAP_FMAC4 soap_get_tns__blessMediaAliasWithId(struct soap*, tns__blessMediaAliasWithId *, const char*, const char*);

#ifndef soap_read_tns__blessMediaAliasWithId
#define soap_read_tns__blessMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__blessMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__blessMediaAliasWithId * SOAP_FMAC2 soap_instantiate_tns__blessMediaAliasWithId(struct soap*, int, const char*, const char*, size_t*);

inline tns__blessMediaAliasWithId * soap_new_tns__blessMediaAliasWithId(struct soap *soap, int n = -1) { return soap_instantiate_tns__blessMediaAliasWithId(soap, n, NULL, NULL, NULL); }

inline tns__blessMediaAliasWithId * soap_new_req_tns__blessMediaAliasWithId(struct soap *soap, LONG64 id) { tns__blessMediaAliasWithId *_p = soap_instantiate_tns__blessMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaAliasWithId::id = id; } return _p; }

inline tns__blessMediaAliasWithId * soap_new_set_tns__blessMediaAliasWithId(struct soap *soap, LONG64 id) { tns__blessMediaAliasWithId *_p = soap_instantiate_tns__blessMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__blessMediaAliasWithId::id = id; } return _p; }

inline void soap_delete_tns__blessMediaAliasWithId(struct soap *soap, tns__blessMediaAliasWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__blessMediaAliasWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__user
#define SOAP_TYPE_Annot_tns__user (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__user(struct soap*, const char*, int, const tns__user *, const char*);
SOAP_FMAC3 tns__user * SOAP_FMAC4 soap_in_tns__user(struct soap*, const char*, tns__user *, const char*);

#ifndef soap_write_tns__user
#define soap_write_tns__user(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:user", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__user * SOAP_FMAC4 soap_get_tns__user(struct soap*, tns__user *, const char*, const char*);

#ifndef soap_read_tns__user
#define soap_read_tns__user(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__user(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__user * SOAP_FMAC2 soap_instantiate_tns__user(struct soap*, int, const char*, const char*, size_t*);

inline tns__user * soap_new_tns__user(struct soap *soap, int n = -1) { return soap_instantiate_tns__user(soap, n, NULL, NULL, NULL); }

inline tns__user * soap_new_req_tns__user(struct soap *soap, int annotCount, int blessCount, int blockCount, LONG64 createIp, LONG64 createTime, int curseCount, LONG64 flags, LONG64 id, int language, LONG64 loginCount, LONG64 loginIp, LONG64 loginTime, int status) { tns__user *_p = soap_instantiate_tns__user(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__user::annotCount = annotCount; _p->tns__user::blessCount = blessCount; _p->tns__user::blockCount = blockCount; _p->tns__user::createIp = createIp; _p->tns__user::createTime = createTime; _p->tns__user::curseCount = curseCount; _p->tns__user::flags = flags; _p->tns__user::id = id; _p->tns__user::language = language; _p->tns__user::loginCount = loginCount; _p->tns__user::loginIp = loginIp; _p->tns__user::loginTime = loginTime; _p->tns__user::status = status; } return _p; }

inline tns__user * soap_new_set_tns__user(struct soap *soap, int annotCount, int blessCount, int blockCount, LONG64 createIp, LONG64 createTime, int curseCount, std::string *email, LONG64 flags, LONG64 id, int language, LONG64 loginCount, LONG64 loginIp, LONG64 loginTime, std::string *name, std::string *nickname, std::string *password, int status) { tns__user *_p = soap_instantiate_tns__user(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__user::annotCount = annotCount; _p->tns__user::blessCount = blessCount; _p->tns__user::blockCount = blockCount; _p->tns__user::createIp = createIp; _p->tns__user::createTime = createTime; _p->tns__user::curseCount = curseCount; _p->tns__user::email = email; _p->tns__user::flags = flags; _p->tns__user::id = id; _p->tns__user::language = language; _p->tns__user::loginCount = loginCount; _p->tns__user::loginIp = loginIp; _p->tns__user::loginTime = loginTime; _p->tns__user::name = name; _p->tns__user::nickname = nickname; _p->tns__user::password = password; _p->tns__user::status = status; } return _p; }

inline void soap_delete_tns__user(struct soap *soap, tns__user *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__user(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__mediaAlias
#define SOAP_TYPE_Annot_tns__mediaAlias (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__mediaAlias(struct soap*, const char*, int, const tns__mediaAlias *, const char*);
SOAP_FMAC3 tns__mediaAlias * SOAP_FMAC4 soap_in_tns__mediaAlias(struct soap*, const char*, tns__mediaAlias *, const char*);

#ifndef soap_write_tns__mediaAlias
#define soap_write_tns__mediaAlias(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:mediaAlias", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__mediaAlias * SOAP_FMAC4 soap_get_tns__mediaAlias(struct soap*, tns__mediaAlias *, const char*, const char*);

#ifndef soap_read_tns__mediaAlias
#define soap_read_tns__mediaAlias(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__mediaAlias(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__mediaAlias * SOAP_FMAC2 soap_instantiate_tns__mediaAlias(struct soap*, int, const char*, const char*, size_t*);

inline tns__mediaAlias * soap_new_tns__mediaAlias(struct soap *soap, int n = -1) { return soap_instantiate_tns__mediaAlias(soap, n, NULL, NULL, NULL); }

inline tns__mediaAlias * soap_new_req_tns__mediaAlias(struct soap *soap, int blessCount, int blockCount, int curseCount, LONG64 flags, LONG64 id, int language, int status, LONG64 tokenId, int type, LONG64 updateIp, LONG64 updateTime, LONG64 userId) { tns__mediaAlias *_p = soap_instantiate_tns__mediaAlias(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__mediaAlias::blessCount = blessCount; _p->tns__mediaAlias::blockCount = blockCount; _p->tns__mediaAlias::curseCount = curseCount; _p->tns__mediaAlias::flags = flags; _p->tns__mediaAlias::id = id; _p->tns__mediaAlias::language = language; _p->tns__mediaAlias::status = status; _p->tns__mediaAlias::tokenId = tokenId; _p->tns__mediaAlias::type = type; _p->tns__mediaAlias::updateIp = updateIp; _p->tns__mediaAlias::updateTime = updateTime; _p->tns__mediaAlias::userId = userId; } return _p; }

inline tns__mediaAlias * soap_new_set_tns__mediaAlias(struct soap *soap, int blessCount, int blockCount, int curseCount, LONG64 flags, LONG64 id, int language, int status, std::string *text, LONG64 tokenId, int type, LONG64 updateIp, LONG64 updateTime, LONG64 userId) { tns__mediaAlias *_p = soap_instantiate_tns__mediaAlias(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__mediaAlias::blessCount = blessCount; _p->tns__mediaAlias::blockCount = blockCount; _p->tns__mediaAlias::curseCount = curseCount; _p->tns__mediaAlias::flags = flags; _p->tns__mediaAlias::id = id; _p->tns__mediaAlias::language = language; _p->tns__mediaAlias::status = status; _p->tns__mediaAlias::text = text; _p->tns__mediaAlias::tokenId = tokenId; _p->tns__mediaAlias::type = type; _p->tns__mediaAlias::updateIp = updateIp; _p->tns__mediaAlias::updateTime = updateTime; _p->tns__mediaAlias::userId = userId; } return _p; }

inline void soap_delete_tns__mediaAlias(struct soap *soap, tns__mediaAlias *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__mediaAlias(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__mediaToken
#define SOAP_TYPE_Annot_tns__mediaToken (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__mediaToken(struct soap*, const char*, int, const tns__mediaToken *, const char*);
SOAP_FMAC3 tns__mediaToken * SOAP_FMAC4 soap_in_tns__mediaToken(struct soap*, const char*, tns__mediaToken *, const char*);

#ifndef soap_write_tns__mediaToken
#define soap_write_tns__mediaToken(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:mediaToken", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__mediaToken * SOAP_FMAC4 soap_get_tns__mediaToken(struct soap*, tns__mediaToken *, const char*, const char*);

#ifndef soap_read_tns__mediaToken
#define soap_read_tns__mediaToken(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__mediaToken(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__mediaToken * SOAP_FMAC2 soap_instantiate_tns__mediaToken(struct soap*, int, const char*, const char*, size_t*);

inline tns__mediaToken * soap_new_tns__mediaToken(struct soap *soap, int n = -1) { return soap_instantiate_tns__mediaToken(soap, n, NULL, NULL, NULL); }

inline tns__mediaToken * soap_new_req_tns__mediaToken(struct soap *soap, int annotCount, int blessCount, int blockCount, LONG64 createIp, LONG64 createTime, int curseCount, LONG64 flags, LONG64 id, int section, int status, int type, LONG64 userId, int visitCount) { tns__mediaToken *_p = soap_instantiate_tns__mediaToken(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__mediaToken::annotCount = annotCount; _p->tns__mediaToken::blessCount = blessCount; _p->tns__mediaToken::blockCount = blockCount; _p->tns__mediaToken::createIp = createIp; _p->tns__mediaToken::createTime = createTime; _p->tns__mediaToken::curseCount = curseCount; _p->tns__mediaToken::flags = flags; _p->tns__mediaToken::id = id; _p->tns__mediaToken::section = section; _p->tns__mediaToken::status = status; _p->tns__mediaToken::type = type; _p->tns__mediaToken::userId = userId; _p->tns__mediaToken::visitCount = visitCount; } return _p; }

inline tns__mediaToken * soap_new_set_tns__mediaToken(struct soap *soap, int annotCount, int blessCount, int blockCount, LONG64 createIp, LONG64 createTime, int curseCount, std::string *digest, LONG64 flags, LONG64 id, int section, int status, int type, std::string *url, LONG64 userId, int visitCount) { tns__mediaToken *_p = soap_instantiate_tns__mediaToken(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__mediaToken::annotCount = annotCount; _p->tns__mediaToken::blessCount = blessCount; _p->tns__mediaToken::blockCount = blockCount; _p->tns__mediaToken::createIp = createIp; _p->tns__mediaToken::createTime = createTime; _p->tns__mediaToken::curseCount = curseCount; _p->tns__mediaToken::digest = digest; _p->tns__mediaToken::flags = flags; _p->tns__mediaToken::id = id; _p->tns__mediaToken::section = section; _p->tns__mediaToken::status = status; _p->tns__mediaToken::type = type; _p->tns__mediaToken::url = url; _p->tns__mediaToken::userId = userId; _p->tns__mediaToken::visitCount = visitCount; } return _p; }

inline void soap_delete_tns__mediaToken(struct soap *soap, tns__mediaToken *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__mediaToken(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__mediaAnnotation
#define SOAP_TYPE_Annot_tns__mediaAnnotation (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__mediaAnnotation(struct soap*, const char*, int, const tns__mediaAnnotation *, const char*);
SOAP_FMAC3 tns__mediaAnnotation * SOAP_FMAC4 soap_in_tns__mediaAnnotation(struct soap*, const char*, tns__mediaAnnotation *, const char*);

#ifndef soap_write_tns__mediaAnnotation
#define soap_write_tns__mediaAnnotation(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:mediaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__mediaAnnotation * SOAP_FMAC4 soap_get_tns__mediaAnnotation(struct soap*, tns__mediaAnnotation *, const char*, const char*);

#ifndef soap_read_tns__mediaAnnotation
#define soap_read_tns__mediaAnnotation(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__mediaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__mediaAnnotation * SOAP_FMAC2 soap_instantiate_tns__mediaAnnotation(struct soap*, int, const char*, const char*, size_t*);

inline tns__mediaAnnotation * soap_new_tns__mediaAnnotation(struct soap *soap, int n = -1) { return soap_instantiate_tns__mediaAnnotation(soap, n, NULL, NULL, NULL); }

inline tns__mediaAnnotation * soap_new_req_tns__mediaAnnotation(struct soap *soap, int blessCount, int blockCount, LONG64 createTime, LONG64 createIp, int curseCount, LONG64 flags, LONG64 id, int language, LONG64 pos, int posType, int time, int status, LONG64 tokenId, LONG64 updateIp, LONG64 updateTime, LONG64 userId) { tns__mediaAnnotation *_p = soap_instantiate_tns__mediaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__mediaAnnotation::blessCount = blessCount; _p->tns__mediaAnnotation::blockCount = blockCount; _p->tns__mediaAnnotation::createTime = createTime; _p->tns__mediaAnnotation::createIp = createIp; _p->tns__mediaAnnotation::curseCount = curseCount; _p->tns__mediaAnnotation::flags = flags; _p->tns__mediaAnnotation::id = id; _p->tns__mediaAnnotation::language = language; _p->tns__mediaAnnotation::pos = pos; _p->tns__mediaAnnotation::posType = posType; _p->tns__mediaAnnotation::time = time; _p->tns__mediaAnnotation::status = status; _p->tns__mediaAnnotation::tokenId = tokenId; _p->tns__mediaAnnotation::updateIp = updateIp; _p->tns__mediaAnnotation::updateTime = updateTime; _p->tns__mediaAnnotation::userId = userId; } return _p; }

inline tns__mediaAnnotation * soap_new_set_tns__mediaAnnotation(struct soap *soap, int blessCount, int blockCount, LONG64 createTime, LONG64 createIp, int curseCount, LONG64 flags, LONG64 id, int language, LONG64 pos, int posType, int time, int status, std::string *text, LONG64 tokenId, LONG64 updateIp, LONG64 updateTime, std::string *userAlias, LONG64 userId) { tns__mediaAnnotation *_p = soap_instantiate_tns__mediaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__mediaAnnotation::blessCount = blessCount; _p->tns__mediaAnnotation::blockCount = blockCount; _p->tns__mediaAnnotation::createTime = createTime; _p->tns__mediaAnnotation::createIp = createIp; _p->tns__mediaAnnotation::curseCount = curseCount; _p->tns__mediaAnnotation::flags = flags; _p->tns__mediaAnnotation::id = id; _p->tns__mediaAnnotation::language = language; _p->tns__mediaAnnotation::pos = pos; _p->tns__mediaAnnotation::posType = posType; _p->tns__mediaAnnotation::time = time; _p->tns__mediaAnnotation::status = status; _p->tns__mediaAnnotation::text = text; _p->tns__mediaAnnotation::tokenId = tokenId; _p->tns__mediaAnnotation::updateIp = updateIp; _p->tns__mediaAnnotation::updateTime = updateTime; _p->tns__mediaAnnotation::userAlias = userAlias; _p->tns__mediaAnnotation::userId = userId; } return _p; }

inline void soap_delete_tns__mediaAnnotation(struct soap *soap, tns__mediaAnnotation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__mediaAnnotation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__gameThread
#define SOAP_TYPE_Annot_tns__gameThread (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__gameThread(struct soap*, const char*, int, const tns__gameThread *, const char*);
SOAP_FMAC3 tns__gameThread * SOAP_FMAC4 soap_in_tns__gameThread(struct soap*, const char*, tns__gameThread *, const char*);

#ifndef soap_write_tns__gameThread
#define soap_write_tns__gameThread(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:gameThread", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__gameThread * SOAP_FMAC4 soap_get_tns__gameThread(struct soap*, tns__gameThread *, const char*, const char*);

#ifndef soap_read_tns__gameThread
#define soap_read_tns__gameThread(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__gameThread(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__gameThread * SOAP_FMAC2 soap_instantiate_tns__gameThread(struct soap*, int, const char*, const char*, size_t*);

inline tns__gameThread * soap_new_tns__gameThread(struct soap *soap, int n = -1) { return soap_instantiate_tns__gameThread(soap, n, NULL, NULL, NULL); }

inline tns__gameThread * soap_new_req_tns__gameThread(struct soap *soap, int encoding, LONG64 flags, LONG64 id, LONG64 signature, LONG64 tokenId, int type, LONG64 updateIp, LONG64 updateTime, LONG64 userId) { tns__gameThread *_p = soap_instantiate_tns__gameThread(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__gameThread::encoding = encoding; _p->tns__gameThread::flags = flags; _p->tns__gameThread::id = id; _p->tns__gameThread::signature = signature; _p->tns__gameThread::tokenId = tokenId; _p->tns__gameThread::type = type; _p->tns__gameThread::updateIp = updateIp; _p->tns__gameThread::updateTime = updateTime; _p->tns__gameThread::userId = userId; } return _p; }

inline tns__gameThread * soap_new_set_tns__gameThread(struct soap *soap, int encoding, LONG64 flags, LONG64 id, std::string *provider, LONG64 signature, LONG64 tokenId, int type, LONG64 updateIp, LONG64 updateTime, LONG64 userId) { tns__gameThread *_p = soap_instantiate_tns__gameThread(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__gameThread::encoding = encoding; _p->tns__gameThread::flags = flags; _p->tns__gameThread::id = id; _p->tns__gameThread::provider = provider; _p->tns__gameThread::signature = signature; _p->tns__gameThread::tokenId = tokenId; _p->tns__gameThread::type = type; _p->tns__gameThread::updateIp = updateIp; _p->tns__gameThread::updateTime = updateTime; _p->tns__gameThread::userId = userId; } return _p; }

inline void soap_delete_tns__gameThread(struct soap *soap, tns__gameThread *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__gameThread(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_tns__gameHook
#define SOAP_TYPE_Annot_tns__gameHook (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__gameHook(struct soap*, const char*, int, const tns__gameHook *, const char*);
SOAP_FMAC3 tns__gameHook * SOAP_FMAC4 soap_in_tns__gameHook(struct soap*, const char*, tns__gameHook *, const char*);

#ifndef soap_write_tns__gameHook
#define soap_write_tns__gameHook(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "tns:gameHook", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__gameHook * SOAP_FMAC4 soap_get_tns__gameHook(struct soap*, tns__gameHook *, const char*, const char*);

#ifndef soap_read_tns__gameHook
#define soap_read_tns__gameHook(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_tns__gameHook(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 tns__gameHook * SOAP_FMAC2 soap_instantiate_tns__gameHook(struct soap*, int, const char*, const char*, size_t*);

inline tns__gameHook * soap_new_tns__gameHook(struct soap *soap, int n = -1) { return soap_instantiate_tns__gameHook(soap, n, NULL, NULL, NULL); }

inline tns__gameHook * soap_new_req_tns__gameHook(struct soap *soap, LONG64 flags, LONG64 id, LONG64 tokenId, LONG64 updateIp, LONG64 updateTime, LONG64 userId) { tns__gameHook *_p = soap_instantiate_tns__gameHook(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__gameHook::flags = flags; _p->tns__gameHook::id = id; _p->tns__gameHook::tokenId = tokenId; _p->tns__gameHook::updateIp = updateIp; _p->tns__gameHook::updateTime = updateTime; _p->tns__gameHook::userId = userId; } return _p; }

inline tns__gameHook * soap_new_set_tns__gameHook(struct soap *soap, LONG64 flags, LONG64 id, std::string *text, LONG64 tokenId, LONG64 updateIp, LONG64 updateTime, LONG64 userId) { tns__gameHook *_p = soap_instantiate_tns__gameHook(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tns__gameHook::flags = flags; _p->tns__gameHook::id = id; _p->tns__gameHook::text = text; _p->tns__gameHook::tokenId = tokenId; _p->tns__gameHook::updateIp = updateIp; _p->tns__gameHook::updateTime = updateTime; _p->tns__gameHook::userId = userId; } return _p; }

inline void soap_delete_tns__gameHook(struct soap *soap, tns__gameHook *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__gameHook(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Annot_SOAP_ENV__Fault
#define SOAP_TYPE_Annot_SOAP_ENV__Fault (328)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( Annot::soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || Annot::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Annot_SOAP_ENV__Reason
#define SOAP_TYPE_Annot_SOAP_ENV__Reason (327)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( Annot::soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || Annot::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Annot_SOAP_ENV__Detail
#define SOAP_TYPE_Annot_SOAP_ENV__Detail (324)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( Annot::soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || Annot::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Annot_SOAP_ENV__Code
#define SOAP_TYPE_Annot_SOAP_ENV__Code (322)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( Annot::soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || Annot::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Annot_SOAP_ENV__Header
#define SOAP_TYPE_Annot_SOAP_ENV__Header (321)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( Annot::soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || Annot::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_Annot___tns__updateMediaAnnotationUserIdWithId
#define SOAP_TYPE_Annot___tns__updateMediaAnnotationUserIdWithId (320)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__updateMediaAnnotationUserIdWithId(struct soap*, struct __tns__updateMediaAnnotationUserIdWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__updateMediaAnnotationUserIdWithId(struct soap*, const struct __tns__updateMediaAnnotationUserIdWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__updateMediaAnnotationUserIdWithId(struct soap*, const char*, int, const struct __tns__updateMediaAnnotationUserIdWithId *, const char*);
SOAP_FMAC3 struct __tns__updateMediaAnnotationUserIdWithId * SOAP_FMAC4 soap_in___tns__updateMediaAnnotationUserIdWithId(struct soap*, const char*, struct __tns__updateMediaAnnotationUserIdWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__updateMediaAnnotationUserIdWithId(struct soap*, const struct __tns__updateMediaAnnotationUserIdWithId *, const char*, const char*);

#ifndef soap_write___tns__updateMediaAnnotationUserIdWithId
#define soap_write___tns__updateMediaAnnotationUserIdWithId(soap, data) ( Annot::soap_serialize___tns__updateMediaAnnotationUserIdWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__updateMediaAnnotationUserIdWithId(soap, data, "-tns:updateMediaAnnotationUserIdWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__updateMediaAnnotationUserIdWithId * SOAP_FMAC4 soap_get___tns__updateMediaAnnotationUserIdWithId(struct soap*, struct __tns__updateMediaAnnotationUserIdWithId *, const char*, const char*);

#ifndef soap_read___tns__updateMediaAnnotationUserIdWithId
#define soap_read___tns__updateMediaAnnotationUserIdWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__updateMediaAnnotationUserIdWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__updateMediaAnnotationUserIdWithId * SOAP_FMAC2 soap_instantiate___tns__updateMediaAnnotationUserIdWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__updateMediaAnnotationUserIdWithId * soap_new___tns__updateMediaAnnotationUserIdWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__updateMediaAnnotationUserIdWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__updateMediaAnnotationUserIdWithId * soap_new_req___tns__updateMediaAnnotationUserIdWithId(struct soap *soap) { struct __tns__updateMediaAnnotationUserIdWithId *_p = soap_instantiate___tns__updateMediaAnnotationUserIdWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateMediaAnnotationUserIdWithId(soap, _p); } return _p; }

inline struct __tns__updateMediaAnnotationUserIdWithId * soap_new_set___tns__updateMediaAnnotationUserIdWithId(struct soap *soap, tns__updateMediaAnnotationUserIdWithId *tns__updateMediaAnnotationUserIdWithId_) { struct __tns__updateMediaAnnotationUserIdWithId *_p = soap_instantiate___tns__updateMediaAnnotationUserIdWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateMediaAnnotationUserIdWithId(soap, _p); _p->tns__updateMediaAnnotationUserIdWithId_ = tns__updateMediaAnnotationUserIdWithId_; } return _p; }

inline void soap_delete___tns__updateMediaAnnotationUserIdWithId(struct soap *soap, struct __tns__updateMediaAnnotationUserIdWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__updateMediaAnnotationUserIdWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__updateMediaAnnotationTextWithId
#define SOAP_TYPE_Annot___tns__updateMediaAnnotationTextWithId (316)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__updateMediaAnnotationTextWithId(struct soap*, struct __tns__updateMediaAnnotationTextWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__updateMediaAnnotationTextWithId(struct soap*, const struct __tns__updateMediaAnnotationTextWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__updateMediaAnnotationTextWithId(struct soap*, const char*, int, const struct __tns__updateMediaAnnotationTextWithId *, const char*);
SOAP_FMAC3 struct __tns__updateMediaAnnotationTextWithId * SOAP_FMAC4 soap_in___tns__updateMediaAnnotationTextWithId(struct soap*, const char*, struct __tns__updateMediaAnnotationTextWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__updateMediaAnnotationTextWithId(struct soap*, const struct __tns__updateMediaAnnotationTextWithId *, const char*, const char*);

#ifndef soap_write___tns__updateMediaAnnotationTextWithId
#define soap_write___tns__updateMediaAnnotationTextWithId(soap, data) ( Annot::soap_serialize___tns__updateMediaAnnotationTextWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__updateMediaAnnotationTextWithId(soap, data, "-tns:updateMediaAnnotationTextWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__updateMediaAnnotationTextWithId * SOAP_FMAC4 soap_get___tns__updateMediaAnnotationTextWithId(struct soap*, struct __tns__updateMediaAnnotationTextWithId *, const char*, const char*);

#ifndef soap_read___tns__updateMediaAnnotationTextWithId
#define soap_read___tns__updateMediaAnnotationTextWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__updateMediaAnnotationTextWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__updateMediaAnnotationTextWithId * SOAP_FMAC2 soap_instantiate___tns__updateMediaAnnotationTextWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__updateMediaAnnotationTextWithId * soap_new___tns__updateMediaAnnotationTextWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__updateMediaAnnotationTextWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__updateMediaAnnotationTextWithId * soap_new_req___tns__updateMediaAnnotationTextWithId(struct soap *soap) { struct __tns__updateMediaAnnotationTextWithId *_p = soap_instantiate___tns__updateMediaAnnotationTextWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateMediaAnnotationTextWithId(soap, _p); } return _p; }

inline struct __tns__updateMediaAnnotationTextWithId * soap_new_set___tns__updateMediaAnnotationTextWithId(struct soap *soap, tns__updateMediaAnnotationTextWithId *tns__updateMediaAnnotationTextWithId_) { struct __tns__updateMediaAnnotationTextWithId *_p = soap_instantiate___tns__updateMediaAnnotationTextWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateMediaAnnotationTextWithId(soap, _p); _p->tns__updateMediaAnnotationTextWithId_ = tns__updateMediaAnnotationTextWithId_; } return _p; }

inline void soap_delete___tns__updateMediaAnnotationTextWithId(struct soap *soap, struct __tns__updateMediaAnnotationTextWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__updateMediaAnnotationTextWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__updateMediaAnnotationLanguageWithId
#define SOAP_TYPE_Annot___tns__updateMediaAnnotationLanguageWithId (312)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__updateMediaAnnotationLanguageWithId(struct soap*, struct __tns__updateMediaAnnotationLanguageWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__updateMediaAnnotationLanguageWithId(struct soap*, const struct __tns__updateMediaAnnotationLanguageWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__updateMediaAnnotationLanguageWithId(struct soap*, const char*, int, const struct __tns__updateMediaAnnotationLanguageWithId *, const char*);
SOAP_FMAC3 struct __tns__updateMediaAnnotationLanguageWithId * SOAP_FMAC4 soap_in___tns__updateMediaAnnotationLanguageWithId(struct soap*, const char*, struct __tns__updateMediaAnnotationLanguageWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__updateMediaAnnotationLanguageWithId(struct soap*, const struct __tns__updateMediaAnnotationLanguageWithId *, const char*, const char*);

#ifndef soap_write___tns__updateMediaAnnotationLanguageWithId
#define soap_write___tns__updateMediaAnnotationLanguageWithId(soap, data) ( Annot::soap_serialize___tns__updateMediaAnnotationLanguageWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__updateMediaAnnotationLanguageWithId(soap, data, "-tns:updateMediaAnnotationLanguageWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__updateMediaAnnotationLanguageWithId * SOAP_FMAC4 soap_get___tns__updateMediaAnnotationLanguageWithId(struct soap*, struct __tns__updateMediaAnnotationLanguageWithId *, const char*, const char*);

#ifndef soap_read___tns__updateMediaAnnotationLanguageWithId
#define soap_read___tns__updateMediaAnnotationLanguageWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__updateMediaAnnotationLanguageWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__updateMediaAnnotationLanguageWithId * SOAP_FMAC2 soap_instantiate___tns__updateMediaAnnotationLanguageWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__updateMediaAnnotationLanguageWithId * soap_new___tns__updateMediaAnnotationLanguageWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__updateMediaAnnotationLanguageWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__updateMediaAnnotationLanguageWithId * soap_new_req___tns__updateMediaAnnotationLanguageWithId(struct soap *soap) { struct __tns__updateMediaAnnotationLanguageWithId *_p = soap_instantiate___tns__updateMediaAnnotationLanguageWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateMediaAnnotationLanguageWithId(soap, _p); } return _p; }

inline struct __tns__updateMediaAnnotationLanguageWithId * soap_new_set___tns__updateMediaAnnotationLanguageWithId(struct soap *soap, tns__updateMediaAnnotationLanguageWithId *tns__updateMediaAnnotationLanguageWithId_) { struct __tns__updateMediaAnnotationLanguageWithId *_p = soap_instantiate___tns__updateMediaAnnotationLanguageWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateMediaAnnotationLanguageWithId(soap, _p); _p->tns__updateMediaAnnotationLanguageWithId_ = tns__updateMediaAnnotationLanguageWithId_; } return _p; }

inline void soap_delete___tns__updateMediaAnnotationLanguageWithId(struct soap *soap, struct __tns__updateMediaAnnotationLanguageWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__updateMediaAnnotationLanguageWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__updateGameThread
#define SOAP_TYPE_Annot___tns__updateGameThread (308)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__updateGameThread(struct soap*, struct __tns__updateGameThread *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__updateGameThread(struct soap*, const struct __tns__updateGameThread *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__updateGameThread(struct soap*, const char*, int, const struct __tns__updateGameThread *, const char*);
SOAP_FMAC3 struct __tns__updateGameThread * SOAP_FMAC4 soap_in___tns__updateGameThread(struct soap*, const char*, struct __tns__updateGameThread *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__updateGameThread(struct soap*, const struct __tns__updateGameThread *, const char*, const char*);

#ifndef soap_write___tns__updateGameThread
#define soap_write___tns__updateGameThread(soap, data) ( Annot::soap_serialize___tns__updateGameThread(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__updateGameThread(soap, data, "-tns:updateGameThread", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__updateGameThread * SOAP_FMAC4 soap_get___tns__updateGameThread(struct soap*, struct __tns__updateGameThread *, const char*, const char*);

#ifndef soap_read___tns__updateGameThread
#define soap_read___tns__updateGameThread(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__updateGameThread(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__updateGameThread * SOAP_FMAC2 soap_instantiate___tns__updateGameThread(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__updateGameThread * soap_new___tns__updateGameThread(struct soap *soap, int n = -1) { return soap_instantiate___tns__updateGameThread(soap, n, NULL, NULL, NULL); }

inline struct __tns__updateGameThread * soap_new_req___tns__updateGameThread(struct soap *soap) { struct __tns__updateGameThread *_p = soap_instantiate___tns__updateGameThread(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateGameThread(soap, _p); } return _p; }

inline struct __tns__updateGameThread * soap_new_set___tns__updateGameThread(struct soap *soap, tns__updateGameThread *tns__updateGameThread_) { struct __tns__updateGameThread *_p = soap_instantiate___tns__updateGameThread(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateGameThread(soap, _p); _p->tns__updateGameThread_ = tns__updateGameThread_; } return _p; }

inline void soap_delete___tns__updateGameThread(struct soap *soap, struct __tns__updateGameThread *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__updateGameThread(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__updateGameHookTextWithId
#define SOAP_TYPE_Annot___tns__updateGameHookTextWithId (304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__updateGameHookTextWithId(struct soap*, struct __tns__updateGameHookTextWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__updateGameHookTextWithId(struct soap*, const struct __tns__updateGameHookTextWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__updateGameHookTextWithId(struct soap*, const char*, int, const struct __tns__updateGameHookTextWithId *, const char*);
SOAP_FMAC3 struct __tns__updateGameHookTextWithId * SOAP_FMAC4 soap_in___tns__updateGameHookTextWithId(struct soap*, const char*, struct __tns__updateGameHookTextWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__updateGameHookTextWithId(struct soap*, const struct __tns__updateGameHookTextWithId *, const char*, const char*);

#ifndef soap_write___tns__updateGameHookTextWithId
#define soap_write___tns__updateGameHookTextWithId(soap, data) ( Annot::soap_serialize___tns__updateGameHookTextWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__updateGameHookTextWithId(soap, data, "-tns:updateGameHookTextWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__updateGameHookTextWithId * SOAP_FMAC4 soap_get___tns__updateGameHookTextWithId(struct soap*, struct __tns__updateGameHookTextWithId *, const char*, const char*);

#ifndef soap_read___tns__updateGameHookTextWithId
#define soap_read___tns__updateGameHookTextWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__updateGameHookTextWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__updateGameHookTextWithId * SOAP_FMAC2 soap_instantiate___tns__updateGameHookTextWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__updateGameHookTextWithId * soap_new___tns__updateGameHookTextWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__updateGameHookTextWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__updateGameHookTextWithId * soap_new_req___tns__updateGameHookTextWithId(struct soap *soap) { struct __tns__updateGameHookTextWithId *_p = soap_instantiate___tns__updateGameHookTextWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateGameHookTextWithId(soap, _p); } return _p; }

inline struct __tns__updateGameHookTextWithId * soap_new_set___tns__updateGameHookTextWithId(struct soap *soap, tns__updateGameHookTextWithId *tns__updateGameHookTextWithId_) { struct __tns__updateGameHookTextWithId *_p = soap_instantiate___tns__updateGameHookTextWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__updateGameHookTextWithId(soap, _p); _p->tns__updateGameHookTextWithId_ = tns__updateGameHookTextWithId_; } return _p; }

inline void soap_delete___tns__updateGameHookTextWithId(struct soap *soap, struct __tns__updateGameHookTextWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__updateGameHookTextWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaTokenUrl
#define SOAP_TYPE_Annot___tns__submitMediaTokenUrl (300)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaTokenUrl(struct soap*, struct __tns__submitMediaTokenUrl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaTokenUrl(struct soap*, const struct __tns__submitMediaTokenUrl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaTokenUrl(struct soap*, const char*, int, const struct __tns__submitMediaTokenUrl *, const char*);
SOAP_FMAC3 struct __tns__submitMediaTokenUrl * SOAP_FMAC4 soap_in___tns__submitMediaTokenUrl(struct soap*, const char*, struct __tns__submitMediaTokenUrl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaTokenUrl(struct soap*, const struct __tns__submitMediaTokenUrl *, const char*, const char*);

#ifndef soap_write___tns__submitMediaTokenUrl
#define soap_write___tns__submitMediaTokenUrl(soap, data) ( Annot::soap_serialize___tns__submitMediaTokenUrl(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaTokenUrl(soap, data, "-tns:submitMediaTokenUrl", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaTokenUrl * SOAP_FMAC4 soap_get___tns__submitMediaTokenUrl(struct soap*, struct __tns__submitMediaTokenUrl *, const char*, const char*);

#ifndef soap_read___tns__submitMediaTokenUrl
#define soap_read___tns__submitMediaTokenUrl(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaTokenUrl(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaTokenUrl * SOAP_FMAC2 soap_instantiate___tns__submitMediaTokenUrl(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaTokenUrl * soap_new___tns__submitMediaTokenUrl(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaTokenUrl(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaTokenUrl * soap_new_req___tns__submitMediaTokenUrl(struct soap *soap) { struct __tns__submitMediaTokenUrl *_p = soap_instantiate___tns__submitMediaTokenUrl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaTokenUrl(soap, _p); } return _p; }

inline struct __tns__submitMediaTokenUrl * soap_new_set___tns__submitMediaTokenUrl(struct soap *soap, tns__submitMediaTokenUrl *tns__submitMediaTokenUrl_) { struct __tns__submitMediaTokenUrl *_p = soap_instantiate___tns__submitMediaTokenUrl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaTokenUrl(soap, _p); _p->tns__submitMediaTokenUrl_ = tns__submitMediaTokenUrl_; } return _p; }

inline void soap_delete___tns__submitMediaTokenUrl(struct soap *soap, struct __tns__submitMediaTokenUrl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaTokenUrl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaTokenDigest
#define SOAP_TYPE_Annot___tns__submitMediaTokenDigest (296)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaTokenDigest(struct soap*, struct __tns__submitMediaTokenDigest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaTokenDigest(struct soap*, const struct __tns__submitMediaTokenDigest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaTokenDigest(struct soap*, const char*, int, const struct __tns__submitMediaTokenDigest *, const char*);
SOAP_FMAC3 struct __tns__submitMediaTokenDigest * SOAP_FMAC4 soap_in___tns__submitMediaTokenDigest(struct soap*, const char*, struct __tns__submitMediaTokenDigest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaTokenDigest(struct soap*, const struct __tns__submitMediaTokenDigest *, const char*, const char*);

#ifndef soap_write___tns__submitMediaTokenDigest
#define soap_write___tns__submitMediaTokenDigest(soap, data) ( Annot::soap_serialize___tns__submitMediaTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaTokenDigest(soap, data, "-tns:submitMediaTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaTokenDigest * SOAP_FMAC4 soap_get___tns__submitMediaTokenDigest(struct soap*, struct __tns__submitMediaTokenDigest *, const char*, const char*);

#ifndef soap_read___tns__submitMediaTokenDigest
#define soap_read___tns__submitMediaTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaTokenDigest * SOAP_FMAC2 soap_instantiate___tns__submitMediaTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaTokenDigest * soap_new___tns__submitMediaTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaTokenDigest(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaTokenDigest * soap_new_req___tns__submitMediaTokenDigest(struct soap *soap) { struct __tns__submitMediaTokenDigest *_p = soap_instantiate___tns__submitMediaTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaTokenDigest(soap, _p); } return _p; }

inline struct __tns__submitMediaTokenDigest * soap_new_set___tns__submitMediaTokenDigest(struct soap *soap, tns__submitMediaTokenDigest *tns__submitMediaTokenDigest_) { struct __tns__submitMediaTokenDigest *_p = soap_instantiate___tns__submitMediaTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaTokenDigest(soap, _p); _p->tns__submitMediaTokenDigest_ = tns__submitMediaTokenDigest_; } return _p; }

inline void soap_delete___tns__submitMediaTokenDigest(struct soap *soap, struct __tns__submitMediaTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaToken
#define SOAP_TYPE_Annot___tns__submitMediaToken (292)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaToken(struct soap*, struct __tns__submitMediaToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaToken(struct soap*, const struct __tns__submitMediaToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaToken(struct soap*, const char*, int, const struct __tns__submitMediaToken *, const char*);
SOAP_FMAC3 struct __tns__submitMediaToken * SOAP_FMAC4 soap_in___tns__submitMediaToken(struct soap*, const char*, struct __tns__submitMediaToken *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaToken(struct soap*, const struct __tns__submitMediaToken *, const char*, const char*);

#ifndef soap_write___tns__submitMediaToken
#define soap_write___tns__submitMediaToken(soap, data) ( Annot::soap_serialize___tns__submitMediaToken(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaToken(soap, data, "-tns:submitMediaToken", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaToken * SOAP_FMAC4 soap_get___tns__submitMediaToken(struct soap*, struct __tns__submitMediaToken *, const char*, const char*);

#ifndef soap_read___tns__submitMediaToken
#define soap_read___tns__submitMediaToken(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaToken(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaToken * SOAP_FMAC2 soap_instantiate___tns__submitMediaToken(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaToken * soap_new___tns__submitMediaToken(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaToken(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaToken * soap_new_req___tns__submitMediaToken(struct soap *soap) { struct __tns__submitMediaToken *_p = soap_instantiate___tns__submitMediaToken(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaToken(soap, _p); } return _p; }

inline struct __tns__submitMediaToken * soap_new_set___tns__submitMediaToken(struct soap *soap, tns__submitMediaToken *tns__submitMediaToken_) { struct __tns__submitMediaToken *_p = soap_instantiate___tns__submitMediaToken(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaToken(soap, _p); _p->tns__submitMediaToken_ = tns__submitMediaToken_; } return _p; }

inline void soap_delete___tns__submitMediaToken(struct soap *soap, struct __tns__submitMediaToken *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaToken(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaAnnotationTextWithTokenId
#define SOAP_TYPE_Annot___tns__submitMediaAnnotationTextWithTokenId (288)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaAnnotationTextWithTokenId(struct soap*, struct __tns__submitMediaAnnotationTextWithTokenId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaAnnotationTextWithTokenId(struct soap*, const struct __tns__submitMediaAnnotationTextWithTokenId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaAnnotationTextWithTokenId(struct soap*, const char*, int, const struct __tns__submitMediaAnnotationTextWithTokenId *, const char*);
SOAP_FMAC3 struct __tns__submitMediaAnnotationTextWithTokenId * SOAP_FMAC4 soap_in___tns__submitMediaAnnotationTextWithTokenId(struct soap*, const char*, struct __tns__submitMediaAnnotationTextWithTokenId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaAnnotationTextWithTokenId(struct soap*, const struct __tns__submitMediaAnnotationTextWithTokenId *, const char*, const char*);

#ifndef soap_write___tns__submitMediaAnnotationTextWithTokenId
#define soap_write___tns__submitMediaAnnotationTextWithTokenId(soap, data) ( Annot::soap_serialize___tns__submitMediaAnnotationTextWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaAnnotationTextWithTokenId(soap, data, "-tns:submitMediaAnnotationTextWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaAnnotationTextWithTokenId * SOAP_FMAC4 soap_get___tns__submitMediaAnnotationTextWithTokenId(struct soap*, struct __tns__submitMediaAnnotationTextWithTokenId *, const char*, const char*);

#ifndef soap_read___tns__submitMediaAnnotationTextWithTokenId
#define soap_read___tns__submitMediaAnnotationTextWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaAnnotationTextWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaAnnotationTextWithTokenId * SOAP_FMAC2 soap_instantiate___tns__submitMediaAnnotationTextWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaAnnotationTextWithTokenId * soap_new___tns__submitMediaAnnotationTextWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaAnnotationTextWithTokenId(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaAnnotationTextWithTokenId * soap_new_req___tns__submitMediaAnnotationTextWithTokenId(struct soap *soap) { struct __tns__submitMediaAnnotationTextWithTokenId *_p = soap_instantiate___tns__submitMediaAnnotationTextWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAnnotationTextWithTokenId(soap, _p); } return _p; }

inline struct __tns__submitMediaAnnotationTextWithTokenId * soap_new_set___tns__submitMediaAnnotationTextWithTokenId(struct soap *soap, tns__submitMediaAnnotationTextWithTokenId *tns__submitMediaAnnotationTextWithTokenId_) { struct __tns__submitMediaAnnotationTextWithTokenId *_p = soap_instantiate___tns__submitMediaAnnotationTextWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAnnotationTextWithTokenId(soap, _p); _p->tns__submitMediaAnnotationTextWithTokenId_ = tns__submitMediaAnnotationTextWithTokenId_; } return _p; }

inline void soap_delete___tns__submitMediaAnnotationTextWithTokenId(struct soap *soap, struct __tns__submitMediaAnnotationTextWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaAnnotationTextWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaAnnotationTextAndTokenDigest
#define SOAP_TYPE_Annot___tns__submitMediaAnnotationTextAndTokenDigest (284)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, struct __tns__submitMediaAnnotationTextAndTokenDigest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, const struct __tns__submitMediaAnnotationTextAndTokenDigest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, const char*, int, const struct __tns__submitMediaAnnotationTextAndTokenDigest *, const char*);
SOAP_FMAC3 struct __tns__submitMediaAnnotationTextAndTokenDigest * SOAP_FMAC4 soap_in___tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, const char*, struct __tns__submitMediaAnnotationTextAndTokenDigest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, const struct __tns__submitMediaAnnotationTextAndTokenDigest *, const char*, const char*);

#ifndef soap_write___tns__submitMediaAnnotationTextAndTokenDigest
#define soap_write___tns__submitMediaAnnotationTextAndTokenDigest(soap, data) ( Annot::soap_serialize___tns__submitMediaAnnotationTextAndTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaAnnotationTextAndTokenDigest(soap, data, "-tns:submitMediaAnnotationTextAndTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaAnnotationTextAndTokenDigest * SOAP_FMAC4 soap_get___tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, struct __tns__submitMediaAnnotationTextAndTokenDigest *, const char*, const char*);

#ifndef soap_read___tns__submitMediaAnnotationTextAndTokenDigest
#define soap_read___tns__submitMediaAnnotationTextAndTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaAnnotationTextAndTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaAnnotationTextAndTokenDigest * SOAP_FMAC2 soap_instantiate___tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaAnnotationTextAndTokenDigest * soap_new___tns__submitMediaAnnotationTextAndTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaAnnotationTextAndTokenDigest(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaAnnotationTextAndTokenDigest * soap_new_req___tns__submitMediaAnnotationTextAndTokenDigest(struct soap *soap) { struct __tns__submitMediaAnnotationTextAndTokenDigest *_p = soap_instantiate___tns__submitMediaAnnotationTextAndTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAnnotationTextAndTokenDigest(soap, _p); } return _p; }

inline struct __tns__submitMediaAnnotationTextAndTokenDigest * soap_new_set___tns__submitMediaAnnotationTextAndTokenDigest(struct soap *soap, tns__submitMediaAnnotationTextAndTokenDigest *tns__submitMediaAnnotationTextAndTokenDigest_) { struct __tns__submitMediaAnnotationTextAndTokenDigest *_p = soap_instantiate___tns__submitMediaAnnotationTextAndTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAnnotationTextAndTokenDigest(soap, _p); _p->tns__submitMediaAnnotationTextAndTokenDigest_ = tns__submitMediaAnnotationTextAndTokenDigest_; } return _p; }

inline void soap_delete___tns__submitMediaAnnotationTextAndTokenDigest(struct soap *soap, struct __tns__submitMediaAnnotationTextAndTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaAnnotationTextAndTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaAnnotation
#define SOAP_TYPE_Annot___tns__submitMediaAnnotation (280)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaAnnotation(struct soap*, struct __tns__submitMediaAnnotation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaAnnotation(struct soap*, const struct __tns__submitMediaAnnotation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaAnnotation(struct soap*, const char*, int, const struct __tns__submitMediaAnnotation *, const char*);
SOAP_FMAC3 struct __tns__submitMediaAnnotation * SOAP_FMAC4 soap_in___tns__submitMediaAnnotation(struct soap*, const char*, struct __tns__submitMediaAnnotation *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaAnnotation(struct soap*, const struct __tns__submitMediaAnnotation *, const char*, const char*);

#ifndef soap_write___tns__submitMediaAnnotation
#define soap_write___tns__submitMediaAnnotation(soap, data) ( Annot::soap_serialize___tns__submitMediaAnnotation(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaAnnotation(soap, data, "-tns:submitMediaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaAnnotation * SOAP_FMAC4 soap_get___tns__submitMediaAnnotation(struct soap*, struct __tns__submitMediaAnnotation *, const char*, const char*);

#ifndef soap_read___tns__submitMediaAnnotation
#define soap_read___tns__submitMediaAnnotation(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaAnnotation * SOAP_FMAC2 soap_instantiate___tns__submitMediaAnnotation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaAnnotation * soap_new___tns__submitMediaAnnotation(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaAnnotation(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaAnnotation * soap_new_req___tns__submitMediaAnnotation(struct soap *soap) { struct __tns__submitMediaAnnotation *_p = soap_instantiate___tns__submitMediaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAnnotation(soap, _p); } return _p; }

inline struct __tns__submitMediaAnnotation * soap_new_set___tns__submitMediaAnnotation(struct soap *soap, tns__submitMediaAnnotation *tns__submitMediaAnnotation_) { struct __tns__submitMediaAnnotation *_p = soap_instantiate___tns__submitMediaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAnnotation(soap, _p); _p->tns__submitMediaAnnotation_ = tns__submitMediaAnnotation_; } return _p; }

inline void soap_delete___tns__submitMediaAnnotation(struct soap *soap, struct __tns__submitMediaAnnotation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaAnnotation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaAliasTextWithTokenId
#define SOAP_TYPE_Annot___tns__submitMediaAliasTextWithTokenId (276)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaAliasTextWithTokenId(struct soap*, struct __tns__submitMediaAliasTextWithTokenId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaAliasTextWithTokenId(struct soap*, const struct __tns__submitMediaAliasTextWithTokenId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaAliasTextWithTokenId(struct soap*, const char*, int, const struct __tns__submitMediaAliasTextWithTokenId *, const char*);
SOAP_FMAC3 struct __tns__submitMediaAliasTextWithTokenId * SOAP_FMAC4 soap_in___tns__submitMediaAliasTextWithTokenId(struct soap*, const char*, struct __tns__submitMediaAliasTextWithTokenId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaAliasTextWithTokenId(struct soap*, const struct __tns__submitMediaAliasTextWithTokenId *, const char*, const char*);

#ifndef soap_write___tns__submitMediaAliasTextWithTokenId
#define soap_write___tns__submitMediaAliasTextWithTokenId(soap, data) ( Annot::soap_serialize___tns__submitMediaAliasTextWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaAliasTextWithTokenId(soap, data, "-tns:submitMediaAliasTextWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaAliasTextWithTokenId * SOAP_FMAC4 soap_get___tns__submitMediaAliasTextWithTokenId(struct soap*, struct __tns__submitMediaAliasTextWithTokenId *, const char*, const char*);

#ifndef soap_read___tns__submitMediaAliasTextWithTokenId
#define soap_read___tns__submitMediaAliasTextWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaAliasTextWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaAliasTextWithTokenId * SOAP_FMAC2 soap_instantiate___tns__submitMediaAliasTextWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaAliasTextWithTokenId * soap_new___tns__submitMediaAliasTextWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaAliasTextWithTokenId(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaAliasTextWithTokenId * soap_new_req___tns__submitMediaAliasTextWithTokenId(struct soap *soap) { struct __tns__submitMediaAliasTextWithTokenId *_p = soap_instantiate___tns__submitMediaAliasTextWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAliasTextWithTokenId(soap, _p); } return _p; }

inline struct __tns__submitMediaAliasTextWithTokenId * soap_new_set___tns__submitMediaAliasTextWithTokenId(struct soap *soap, tns__submitMediaAliasTextWithTokenId *tns__submitMediaAliasTextWithTokenId_) { struct __tns__submitMediaAliasTextWithTokenId *_p = soap_instantiate___tns__submitMediaAliasTextWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAliasTextWithTokenId(soap, _p); _p->tns__submitMediaAliasTextWithTokenId_ = tns__submitMediaAliasTextWithTokenId_; } return _p; }

inline void soap_delete___tns__submitMediaAliasTextWithTokenId(struct soap *soap, struct __tns__submitMediaAliasTextWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaAliasTextWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaAliasTextAndTokenDigest
#define SOAP_TYPE_Annot___tns__submitMediaAliasTextAndTokenDigest (272)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaAliasTextAndTokenDigest(struct soap*, struct __tns__submitMediaAliasTextAndTokenDigest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaAliasTextAndTokenDigest(struct soap*, const struct __tns__submitMediaAliasTextAndTokenDigest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaAliasTextAndTokenDigest(struct soap*, const char*, int, const struct __tns__submitMediaAliasTextAndTokenDigest *, const char*);
SOAP_FMAC3 struct __tns__submitMediaAliasTextAndTokenDigest * SOAP_FMAC4 soap_in___tns__submitMediaAliasTextAndTokenDigest(struct soap*, const char*, struct __tns__submitMediaAliasTextAndTokenDigest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaAliasTextAndTokenDigest(struct soap*, const struct __tns__submitMediaAliasTextAndTokenDigest *, const char*, const char*);

#ifndef soap_write___tns__submitMediaAliasTextAndTokenDigest
#define soap_write___tns__submitMediaAliasTextAndTokenDigest(soap, data) ( Annot::soap_serialize___tns__submitMediaAliasTextAndTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaAliasTextAndTokenDigest(soap, data, "-tns:submitMediaAliasTextAndTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaAliasTextAndTokenDigest * SOAP_FMAC4 soap_get___tns__submitMediaAliasTextAndTokenDigest(struct soap*, struct __tns__submitMediaAliasTextAndTokenDigest *, const char*, const char*);

#ifndef soap_read___tns__submitMediaAliasTextAndTokenDigest
#define soap_read___tns__submitMediaAliasTextAndTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaAliasTextAndTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaAliasTextAndTokenDigest * SOAP_FMAC2 soap_instantiate___tns__submitMediaAliasTextAndTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaAliasTextAndTokenDigest * soap_new___tns__submitMediaAliasTextAndTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaAliasTextAndTokenDigest(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaAliasTextAndTokenDigest * soap_new_req___tns__submitMediaAliasTextAndTokenDigest(struct soap *soap) { struct __tns__submitMediaAliasTextAndTokenDigest *_p = soap_instantiate___tns__submitMediaAliasTextAndTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAliasTextAndTokenDigest(soap, _p); } return _p; }

inline struct __tns__submitMediaAliasTextAndTokenDigest * soap_new_set___tns__submitMediaAliasTextAndTokenDigest(struct soap *soap, tns__submitMediaAliasTextAndTokenDigest *tns__submitMediaAliasTextAndTokenDigest_) { struct __tns__submitMediaAliasTextAndTokenDigest *_p = soap_instantiate___tns__submitMediaAliasTextAndTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAliasTextAndTokenDigest(soap, _p); _p->tns__submitMediaAliasTextAndTokenDigest_ = tns__submitMediaAliasTextAndTokenDigest_; } return _p; }

inline void soap_delete___tns__submitMediaAliasTextAndTokenDigest(struct soap *soap, struct __tns__submitMediaAliasTextAndTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaAliasTextAndTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitMediaAlias
#define SOAP_TYPE_Annot___tns__submitMediaAlias (268)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitMediaAlias(struct soap*, struct __tns__submitMediaAlias *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitMediaAlias(struct soap*, const struct __tns__submitMediaAlias *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitMediaAlias(struct soap*, const char*, int, const struct __tns__submitMediaAlias *, const char*);
SOAP_FMAC3 struct __tns__submitMediaAlias * SOAP_FMAC4 soap_in___tns__submitMediaAlias(struct soap*, const char*, struct __tns__submitMediaAlias *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitMediaAlias(struct soap*, const struct __tns__submitMediaAlias *, const char*, const char*);

#ifndef soap_write___tns__submitMediaAlias
#define soap_write___tns__submitMediaAlias(soap, data) ( Annot::soap_serialize___tns__submitMediaAlias(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitMediaAlias(soap, data, "-tns:submitMediaAlias", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitMediaAlias * SOAP_FMAC4 soap_get___tns__submitMediaAlias(struct soap*, struct __tns__submitMediaAlias *, const char*, const char*);

#ifndef soap_read___tns__submitMediaAlias
#define soap_read___tns__submitMediaAlias(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitMediaAlias(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitMediaAlias * SOAP_FMAC2 soap_instantiate___tns__submitMediaAlias(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitMediaAlias * soap_new___tns__submitMediaAlias(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitMediaAlias(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitMediaAlias * soap_new_req___tns__submitMediaAlias(struct soap *soap) { struct __tns__submitMediaAlias *_p = soap_instantiate___tns__submitMediaAlias(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAlias(soap, _p); } return _p; }

inline struct __tns__submitMediaAlias * soap_new_set___tns__submitMediaAlias(struct soap *soap, tns__submitMediaAlias *tns__submitMediaAlias_) { struct __tns__submitMediaAlias *_p = soap_instantiate___tns__submitMediaAlias(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitMediaAlias(soap, _p); _p->tns__submitMediaAlias_ = tns__submitMediaAlias_; } return _p; }

inline void soap_delete___tns__submitMediaAlias(struct soap *soap, struct __tns__submitMediaAlias *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitMediaAlias(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitGameThread
#define SOAP_TYPE_Annot___tns__submitGameThread (264)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitGameThread(struct soap*, struct __tns__submitGameThread *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitGameThread(struct soap*, const struct __tns__submitGameThread *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitGameThread(struct soap*, const char*, int, const struct __tns__submitGameThread *, const char*);
SOAP_FMAC3 struct __tns__submitGameThread * SOAP_FMAC4 soap_in___tns__submitGameThread(struct soap*, const char*, struct __tns__submitGameThread *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitGameThread(struct soap*, const struct __tns__submitGameThread *, const char*, const char*);

#ifndef soap_write___tns__submitGameThread
#define soap_write___tns__submitGameThread(soap, data) ( Annot::soap_serialize___tns__submitGameThread(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitGameThread(soap, data, "-tns:submitGameThread", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitGameThread * SOAP_FMAC4 soap_get___tns__submitGameThread(struct soap*, struct __tns__submitGameThread *, const char*, const char*);

#ifndef soap_read___tns__submitGameThread
#define soap_read___tns__submitGameThread(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitGameThread(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitGameThread * SOAP_FMAC2 soap_instantiate___tns__submitGameThread(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitGameThread * soap_new___tns__submitGameThread(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitGameThread(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitGameThread * soap_new_req___tns__submitGameThread(struct soap *soap) { struct __tns__submitGameThread *_p = soap_instantiate___tns__submitGameThread(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitGameThread(soap, _p); } return _p; }

inline struct __tns__submitGameThread * soap_new_set___tns__submitGameThread(struct soap *soap, tns__submitGameThread *tns__submitGameThread_) { struct __tns__submitGameThread *_p = soap_instantiate___tns__submitGameThread(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitGameThread(soap, _p); _p->tns__submitGameThread_ = tns__submitGameThread_; } return _p; }

inline void soap_delete___tns__submitGameThread(struct soap *soap, struct __tns__submitGameThread *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitGameThread(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__submitGameHook
#define SOAP_TYPE_Annot___tns__submitGameHook (260)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__submitGameHook(struct soap*, struct __tns__submitGameHook *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__submitGameHook(struct soap*, const struct __tns__submitGameHook *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__submitGameHook(struct soap*, const char*, int, const struct __tns__submitGameHook *, const char*);
SOAP_FMAC3 struct __tns__submitGameHook * SOAP_FMAC4 soap_in___tns__submitGameHook(struct soap*, const char*, struct __tns__submitGameHook *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__submitGameHook(struct soap*, const struct __tns__submitGameHook *, const char*, const char*);

#ifndef soap_write___tns__submitGameHook
#define soap_write___tns__submitGameHook(soap, data) ( Annot::soap_serialize___tns__submitGameHook(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__submitGameHook(soap, data, "-tns:submitGameHook", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__submitGameHook * SOAP_FMAC4 soap_get___tns__submitGameHook(struct soap*, struct __tns__submitGameHook *, const char*, const char*);

#ifndef soap_read___tns__submitGameHook
#define soap_read___tns__submitGameHook(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__submitGameHook(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__submitGameHook * SOAP_FMAC2 soap_instantiate___tns__submitGameHook(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__submitGameHook * soap_new___tns__submitGameHook(struct soap *soap, int n = -1) { return soap_instantiate___tns__submitGameHook(soap, n, NULL, NULL, NULL); }

inline struct __tns__submitGameHook * soap_new_req___tns__submitGameHook(struct soap *soap) { struct __tns__submitGameHook *_p = soap_instantiate___tns__submitGameHook(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitGameHook(soap, _p); } return _p; }

inline struct __tns__submitGameHook * soap_new_set___tns__submitGameHook(struct soap *soap, tns__submitGameHook *tns__submitGameHook_) { struct __tns__submitGameHook *_p = soap_instantiate___tns__submitGameHook(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__submitGameHook(soap, _p); _p->tns__submitGameHook_ = tns__submitGameHook_; } return _p; }

inline void soap_delete___tns__submitGameHook(struct soap *soap, struct __tns__submitGameHook *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__submitGameHook(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__setUserLanguage
#define SOAP_TYPE_Annot___tns__setUserLanguage (256)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__setUserLanguage(struct soap*, struct __tns__setUserLanguage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__setUserLanguage(struct soap*, const struct __tns__setUserLanguage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__setUserLanguage(struct soap*, const char*, int, const struct __tns__setUserLanguage *, const char*);
SOAP_FMAC3 struct __tns__setUserLanguage * SOAP_FMAC4 soap_in___tns__setUserLanguage(struct soap*, const char*, struct __tns__setUserLanguage *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__setUserLanguage(struct soap*, const struct __tns__setUserLanguage *, const char*, const char*);

#ifndef soap_write___tns__setUserLanguage
#define soap_write___tns__setUserLanguage(soap, data) ( Annot::soap_serialize___tns__setUserLanguage(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__setUserLanguage(soap, data, "-tns:setUserLanguage", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__setUserLanguage * SOAP_FMAC4 soap_get___tns__setUserLanguage(struct soap*, struct __tns__setUserLanguage *, const char*, const char*);

#ifndef soap_read___tns__setUserLanguage
#define soap_read___tns__setUserLanguage(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__setUserLanguage(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__setUserLanguage * SOAP_FMAC2 soap_instantiate___tns__setUserLanguage(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__setUserLanguage * soap_new___tns__setUserLanguage(struct soap *soap, int n = -1) { return soap_instantiate___tns__setUserLanguage(soap, n, NULL, NULL, NULL); }

inline struct __tns__setUserLanguage * soap_new_req___tns__setUserLanguage(struct soap *soap) { struct __tns__setUserLanguage *_p = soap_instantiate___tns__setUserLanguage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__setUserLanguage(soap, _p); } return _p; }

inline struct __tns__setUserLanguage * soap_new_set___tns__setUserLanguage(struct soap *soap, tns__setUserLanguage *tns__setUserLanguage_) { struct __tns__setUserLanguage *_p = soap_instantiate___tns__setUserLanguage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__setUserLanguage(soap, _p); _p->tns__setUserLanguage_ = tns__setUserLanguage_; } return _p; }

inline void soap_delete___tns__setUserLanguage(struct soap *soap, struct __tns__setUserLanguage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__setUserLanguage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__setUserAnonymous
#define SOAP_TYPE_Annot___tns__setUserAnonymous (252)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__setUserAnonymous(struct soap*, struct __tns__setUserAnonymous *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__setUserAnonymous(struct soap*, const struct __tns__setUserAnonymous *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__setUserAnonymous(struct soap*, const char*, int, const struct __tns__setUserAnonymous *, const char*);
SOAP_FMAC3 struct __tns__setUserAnonymous * SOAP_FMAC4 soap_in___tns__setUserAnonymous(struct soap*, const char*, struct __tns__setUserAnonymous *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__setUserAnonymous(struct soap*, const struct __tns__setUserAnonymous *, const char*, const char*);

#ifndef soap_write___tns__setUserAnonymous
#define soap_write___tns__setUserAnonymous(soap, data) ( Annot::soap_serialize___tns__setUserAnonymous(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__setUserAnonymous(soap, data, "-tns:setUserAnonymous", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__setUserAnonymous * SOAP_FMAC4 soap_get___tns__setUserAnonymous(struct soap*, struct __tns__setUserAnonymous *, const char*, const char*);

#ifndef soap_read___tns__setUserAnonymous
#define soap_read___tns__setUserAnonymous(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__setUserAnonymous(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__setUserAnonymous * SOAP_FMAC2 soap_instantiate___tns__setUserAnonymous(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__setUserAnonymous * soap_new___tns__setUserAnonymous(struct soap *soap, int n = -1) { return soap_instantiate___tns__setUserAnonymous(soap, n, NULL, NULL, NULL); }

inline struct __tns__setUserAnonymous * soap_new_req___tns__setUserAnonymous(struct soap *soap) { struct __tns__setUserAnonymous *_p = soap_instantiate___tns__setUserAnonymous(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__setUserAnonymous(soap, _p); } return _p; }

inline struct __tns__setUserAnonymous * soap_new_set___tns__setUserAnonymous(struct soap *soap, tns__setUserAnonymous *tns__setUserAnonymous_) { struct __tns__setUserAnonymous *_p = soap_instantiate___tns__setUserAnonymous(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__setUserAnonymous(soap, _p); _p->tns__setUserAnonymous_ = tns__setUserAnonymous_; } return _p; }

inline void soap_delete___tns__setUserAnonymous(struct soap *soap, struct __tns__setUserAnonymous *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__setUserAnonymous(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectRelatedMediaAnnotationsWithTokenId
#define SOAP_TYPE_Annot___tns__selectRelatedMediaAnnotationsWithTokenId (248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, struct __tns__selectRelatedMediaAnnotationsWithTokenId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, const struct __tns__selectRelatedMediaAnnotationsWithTokenId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, const char*, int, const struct __tns__selectRelatedMediaAnnotationsWithTokenId *, const char*);
SOAP_FMAC3 struct __tns__selectRelatedMediaAnnotationsWithTokenId * SOAP_FMAC4 soap_in___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, const char*, struct __tns__selectRelatedMediaAnnotationsWithTokenId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, const struct __tns__selectRelatedMediaAnnotationsWithTokenId *, const char*, const char*);

#ifndef soap_write___tns__selectRelatedMediaAnnotationsWithTokenId
#define soap_write___tns__selectRelatedMediaAnnotationsWithTokenId(soap, data) ( Annot::soap_serialize___tns__selectRelatedMediaAnnotationsWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectRelatedMediaAnnotationsWithTokenId(soap, data, "-tns:selectRelatedMediaAnnotationsWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectRelatedMediaAnnotationsWithTokenId * SOAP_FMAC4 soap_get___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, struct __tns__selectRelatedMediaAnnotationsWithTokenId *, const char*, const char*);

#ifndef soap_read___tns__selectRelatedMediaAnnotationsWithTokenId
#define soap_read___tns__selectRelatedMediaAnnotationsWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectRelatedMediaAnnotationsWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectRelatedMediaAnnotationsWithTokenId * SOAP_FMAC2 soap_instantiate___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectRelatedMediaAnnotationsWithTokenId * soap_new___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectRelatedMediaAnnotationsWithTokenId(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectRelatedMediaAnnotationsWithTokenId * soap_new_req___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap *soap) { struct __tns__selectRelatedMediaAnnotationsWithTokenId *_p = soap_instantiate___tns__selectRelatedMediaAnnotationsWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectRelatedMediaAnnotationsWithTokenId(soap, _p); } return _p; }

inline struct __tns__selectRelatedMediaAnnotationsWithTokenId * soap_new_set___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap *soap, tns__selectRelatedMediaAnnotationsWithTokenId *tns__selectRelatedMediaAnnotationsWithTokenId_) { struct __tns__selectRelatedMediaAnnotationsWithTokenId *_p = soap_instantiate___tns__selectRelatedMediaAnnotationsWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectRelatedMediaAnnotationsWithTokenId(soap, _p); _p->tns__selectRelatedMediaAnnotationsWithTokenId_ = tns__selectRelatedMediaAnnotationsWithTokenId_; } return _p; }

inline void soap_delete___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap *soap, struct __tns__selectRelatedMediaAnnotationsWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectRelatedMediaAliasesWithTokenId
#define SOAP_TYPE_Annot___tns__selectRelatedMediaAliasesWithTokenId (244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectRelatedMediaAliasesWithTokenId(struct soap*, struct __tns__selectRelatedMediaAliasesWithTokenId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectRelatedMediaAliasesWithTokenId(struct soap*, const struct __tns__selectRelatedMediaAliasesWithTokenId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectRelatedMediaAliasesWithTokenId(struct soap*, const char*, int, const struct __tns__selectRelatedMediaAliasesWithTokenId *, const char*);
SOAP_FMAC3 struct __tns__selectRelatedMediaAliasesWithTokenId * SOAP_FMAC4 soap_in___tns__selectRelatedMediaAliasesWithTokenId(struct soap*, const char*, struct __tns__selectRelatedMediaAliasesWithTokenId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectRelatedMediaAliasesWithTokenId(struct soap*, const struct __tns__selectRelatedMediaAliasesWithTokenId *, const char*, const char*);

#ifndef soap_write___tns__selectRelatedMediaAliasesWithTokenId
#define soap_write___tns__selectRelatedMediaAliasesWithTokenId(soap, data) ( Annot::soap_serialize___tns__selectRelatedMediaAliasesWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectRelatedMediaAliasesWithTokenId(soap, data, "-tns:selectRelatedMediaAliasesWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectRelatedMediaAliasesWithTokenId * SOAP_FMAC4 soap_get___tns__selectRelatedMediaAliasesWithTokenId(struct soap*, struct __tns__selectRelatedMediaAliasesWithTokenId *, const char*, const char*);

#ifndef soap_read___tns__selectRelatedMediaAliasesWithTokenId
#define soap_read___tns__selectRelatedMediaAliasesWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectRelatedMediaAliasesWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectRelatedMediaAliasesWithTokenId * SOAP_FMAC2 soap_instantiate___tns__selectRelatedMediaAliasesWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectRelatedMediaAliasesWithTokenId * soap_new___tns__selectRelatedMediaAliasesWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectRelatedMediaAliasesWithTokenId(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectRelatedMediaAliasesWithTokenId * soap_new_req___tns__selectRelatedMediaAliasesWithTokenId(struct soap *soap) { struct __tns__selectRelatedMediaAliasesWithTokenId *_p = soap_instantiate___tns__selectRelatedMediaAliasesWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectRelatedMediaAliasesWithTokenId(soap, _p); } return _p; }

inline struct __tns__selectRelatedMediaAliasesWithTokenId * soap_new_set___tns__selectRelatedMediaAliasesWithTokenId(struct soap *soap, tns__selectRelatedMediaAliasesWithTokenId *tns__selectRelatedMediaAliasesWithTokenId_) { struct __tns__selectRelatedMediaAliasesWithTokenId *_p = soap_instantiate___tns__selectRelatedMediaAliasesWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectRelatedMediaAliasesWithTokenId(soap, _p); _p->tns__selectRelatedMediaAliasesWithTokenId_ = tns__selectRelatedMediaAliasesWithTokenId_; } return _p; }

inline void soap_delete___tns__selectRelatedMediaAliasesWithTokenId(struct soap *soap, struct __tns__selectRelatedMediaAliasesWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectRelatedMediaAliasesWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectMediaTokenWithId
#define SOAP_TYPE_Annot___tns__selectMediaTokenWithId (240)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectMediaTokenWithId(struct soap*, struct __tns__selectMediaTokenWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectMediaTokenWithId(struct soap*, const struct __tns__selectMediaTokenWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectMediaTokenWithId(struct soap*, const char*, int, const struct __tns__selectMediaTokenWithId *, const char*);
SOAP_FMAC3 struct __tns__selectMediaTokenWithId * SOAP_FMAC4 soap_in___tns__selectMediaTokenWithId(struct soap*, const char*, struct __tns__selectMediaTokenWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectMediaTokenWithId(struct soap*, const struct __tns__selectMediaTokenWithId *, const char*, const char*);

#ifndef soap_write___tns__selectMediaTokenWithId
#define soap_write___tns__selectMediaTokenWithId(soap, data) ( Annot::soap_serialize___tns__selectMediaTokenWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectMediaTokenWithId(soap, data, "-tns:selectMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectMediaTokenWithId * SOAP_FMAC4 soap_get___tns__selectMediaTokenWithId(struct soap*, struct __tns__selectMediaTokenWithId *, const char*, const char*);

#ifndef soap_read___tns__selectMediaTokenWithId
#define soap_read___tns__selectMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectMediaTokenWithId * SOAP_FMAC2 soap_instantiate___tns__selectMediaTokenWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectMediaTokenWithId * soap_new___tns__selectMediaTokenWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectMediaTokenWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectMediaTokenWithId * soap_new_req___tns__selectMediaTokenWithId(struct soap *soap) { struct __tns__selectMediaTokenWithId *_p = soap_instantiate___tns__selectMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaTokenWithId(soap, _p); } return _p; }

inline struct __tns__selectMediaTokenWithId * soap_new_set___tns__selectMediaTokenWithId(struct soap *soap, tns__selectMediaTokenWithId *tns__selectMediaTokenWithId_) { struct __tns__selectMediaTokenWithId *_p = soap_instantiate___tns__selectMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaTokenWithId(soap, _p); _p->tns__selectMediaTokenWithId_ = tns__selectMediaTokenWithId_; } return _p; }

inline void soap_delete___tns__selectMediaTokenWithId(struct soap *soap, struct __tns__selectMediaTokenWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectMediaTokenWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectMediaTokenWithDigest
#define SOAP_TYPE_Annot___tns__selectMediaTokenWithDigest (236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectMediaTokenWithDigest(struct soap*, struct __tns__selectMediaTokenWithDigest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectMediaTokenWithDigest(struct soap*, const struct __tns__selectMediaTokenWithDigest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectMediaTokenWithDigest(struct soap*, const char*, int, const struct __tns__selectMediaTokenWithDigest *, const char*);
SOAP_FMAC3 struct __tns__selectMediaTokenWithDigest * SOAP_FMAC4 soap_in___tns__selectMediaTokenWithDigest(struct soap*, const char*, struct __tns__selectMediaTokenWithDigest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectMediaTokenWithDigest(struct soap*, const struct __tns__selectMediaTokenWithDigest *, const char*, const char*);

#ifndef soap_write___tns__selectMediaTokenWithDigest
#define soap_write___tns__selectMediaTokenWithDigest(soap, data) ( Annot::soap_serialize___tns__selectMediaTokenWithDigest(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectMediaTokenWithDigest(soap, data, "-tns:selectMediaTokenWithDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectMediaTokenWithDigest * SOAP_FMAC4 soap_get___tns__selectMediaTokenWithDigest(struct soap*, struct __tns__selectMediaTokenWithDigest *, const char*, const char*);

#ifndef soap_read___tns__selectMediaTokenWithDigest
#define soap_read___tns__selectMediaTokenWithDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectMediaTokenWithDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectMediaTokenWithDigest * SOAP_FMAC2 soap_instantiate___tns__selectMediaTokenWithDigest(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectMediaTokenWithDigest * soap_new___tns__selectMediaTokenWithDigest(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectMediaTokenWithDigest(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectMediaTokenWithDigest * soap_new_req___tns__selectMediaTokenWithDigest(struct soap *soap) { struct __tns__selectMediaTokenWithDigest *_p = soap_instantiate___tns__selectMediaTokenWithDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaTokenWithDigest(soap, _p); } return _p; }

inline struct __tns__selectMediaTokenWithDigest * soap_new_set___tns__selectMediaTokenWithDigest(struct soap *soap, tns__selectMediaTokenWithDigest *tns__selectMediaTokenWithDigest_) { struct __tns__selectMediaTokenWithDigest *_p = soap_instantiate___tns__selectMediaTokenWithDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaTokenWithDigest(soap, _p); _p->tns__selectMediaTokenWithDigest_ = tns__selectMediaTokenWithDigest_; } return _p; }

inline void soap_delete___tns__selectMediaTokenWithDigest(struct soap *soap, struct __tns__selectMediaTokenWithDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectMediaTokenWithDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectMediaTokenIdWithUrl
#define SOAP_TYPE_Annot___tns__selectMediaTokenIdWithUrl (232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectMediaTokenIdWithUrl(struct soap*, struct __tns__selectMediaTokenIdWithUrl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectMediaTokenIdWithUrl(struct soap*, const struct __tns__selectMediaTokenIdWithUrl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectMediaTokenIdWithUrl(struct soap*, const char*, int, const struct __tns__selectMediaTokenIdWithUrl *, const char*);
SOAP_FMAC3 struct __tns__selectMediaTokenIdWithUrl * SOAP_FMAC4 soap_in___tns__selectMediaTokenIdWithUrl(struct soap*, const char*, struct __tns__selectMediaTokenIdWithUrl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectMediaTokenIdWithUrl(struct soap*, const struct __tns__selectMediaTokenIdWithUrl *, const char*, const char*);

#ifndef soap_write___tns__selectMediaTokenIdWithUrl
#define soap_write___tns__selectMediaTokenIdWithUrl(soap, data) ( Annot::soap_serialize___tns__selectMediaTokenIdWithUrl(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectMediaTokenIdWithUrl(soap, data, "-tns:selectMediaTokenIdWithUrl", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectMediaTokenIdWithUrl * SOAP_FMAC4 soap_get___tns__selectMediaTokenIdWithUrl(struct soap*, struct __tns__selectMediaTokenIdWithUrl *, const char*, const char*);

#ifndef soap_read___tns__selectMediaTokenIdWithUrl
#define soap_read___tns__selectMediaTokenIdWithUrl(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectMediaTokenIdWithUrl(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectMediaTokenIdWithUrl * SOAP_FMAC2 soap_instantiate___tns__selectMediaTokenIdWithUrl(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectMediaTokenIdWithUrl * soap_new___tns__selectMediaTokenIdWithUrl(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectMediaTokenIdWithUrl(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectMediaTokenIdWithUrl * soap_new_req___tns__selectMediaTokenIdWithUrl(struct soap *soap) { struct __tns__selectMediaTokenIdWithUrl *_p = soap_instantiate___tns__selectMediaTokenIdWithUrl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaTokenIdWithUrl(soap, _p); } return _p; }

inline struct __tns__selectMediaTokenIdWithUrl * soap_new_set___tns__selectMediaTokenIdWithUrl(struct soap *soap, tns__selectMediaTokenIdWithUrl *tns__selectMediaTokenIdWithUrl_) { struct __tns__selectMediaTokenIdWithUrl *_p = soap_instantiate___tns__selectMediaTokenIdWithUrl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaTokenIdWithUrl(soap, _p); _p->tns__selectMediaTokenIdWithUrl_ = tns__selectMediaTokenIdWithUrl_; } return _p; }

inline void soap_delete___tns__selectMediaTokenIdWithUrl(struct soap *soap, struct __tns__selectMediaTokenIdWithUrl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectMediaTokenIdWithUrl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectMediaTokenIdWithDigest
#define SOAP_TYPE_Annot___tns__selectMediaTokenIdWithDigest (228)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectMediaTokenIdWithDigest(struct soap*, struct __tns__selectMediaTokenIdWithDigest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectMediaTokenIdWithDigest(struct soap*, const struct __tns__selectMediaTokenIdWithDigest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectMediaTokenIdWithDigest(struct soap*, const char*, int, const struct __tns__selectMediaTokenIdWithDigest *, const char*);
SOAP_FMAC3 struct __tns__selectMediaTokenIdWithDigest * SOAP_FMAC4 soap_in___tns__selectMediaTokenIdWithDigest(struct soap*, const char*, struct __tns__selectMediaTokenIdWithDigest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectMediaTokenIdWithDigest(struct soap*, const struct __tns__selectMediaTokenIdWithDigest *, const char*, const char*);

#ifndef soap_write___tns__selectMediaTokenIdWithDigest
#define soap_write___tns__selectMediaTokenIdWithDigest(soap, data) ( Annot::soap_serialize___tns__selectMediaTokenIdWithDigest(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectMediaTokenIdWithDigest(soap, data, "-tns:selectMediaTokenIdWithDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectMediaTokenIdWithDigest * SOAP_FMAC4 soap_get___tns__selectMediaTokenIdWithDigest(struct soap*, struct __tns__selectMediaTokenIdWithDigest *, const char*, const char*);

#ifndef soap_read___tns__selectMediaTokenIdWithDigest
#define soap_read___tns__selectMediaTokenIdWithDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectMediaTokenIdWithDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectMediaTokenIdWithDigest * SOAP_FMAC2 soap_instantiate___tns__selectMediaTokenIdWithDigest(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectMediaTokenIdWithDigest * soap_new___tns__selectMediaTokenIdWithDigest(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectMediaTokenIdWithDigest(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectMediaTokenIdWithDigest * soap_new_req___tns__selectMediaTokenIdWithDigest(struct soap *soap) { struct __tns__selectMediaTokenIdWithDigest *_p = soap_instantiate___tns__selectMediaTokenIdWithDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaTokenIdWithDigest(soap, _p); } return _p; }

inline struct __tns__selectMediaTokenIdWithDigest * soap_new_set___tns__selectMediaTokenIdWithDigest(struct soap *soap, tns__selectMediaTokenIdWithDigest *tns__selectMediaTokenIdWithDigest_) { struct __tns__selectMediaTokenIdWithDigest *_p = soap_instantiate___tns__selectMediaTokenIdWithDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaTokenIdWithDigest(soap, _p); _p->tns__selectMediaTokenIdWithDigest_ = tns__selectMediaTokenIdWithDigest_; } return _p; }

inline void soap_delete___tns__selectMediaTokenIdWithDigest(struct soap *soap, struct __tns__selectMediaTokenIdWithDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectMediaTokenIdWithDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectMediaAnnotationsWithTokenId
#define SOAP_TYPE_Annot___tns__selectMediaAnnotationsWithTokenId (224)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectMediaAnnotationsWithTokenId(struct soap*, struct __tns__selectMediaAnnotationsWithTokenId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectMediaAnnotationsWithTokenId(struct soap*, const struct __tns__selectMediaAnnotationsWithTokenId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectMediaAnnotationsWithTokenId(struct soap*, const char*, int, const struct __tns__selectMediaAnnotationsWithTokenId *, const char*);
SOAP_FMAC3 struct __tns__selectMediaAnnotationsWithTokenId * SOAP_FMAC4 soap_in___tns__selectMediaAnnotationsWithTokenId(struct soap*, const char*, struct __tns__selectMediaAnnotationsWithTokenId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectMediaAnnotationsWithTokenId(struct soap*, const struct __tns__selectMediaAnnotationsWithTokenId *, const char*, const char*);

#ifndef soap_write___tns__selectMediaAnnotationsWithTokenId
#define soap_write___tns__selectMediaAnnotationsWithTokenId(soap, data) ( Annot::soap_serialize___tns__selectMediaAnnotationsWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectMediaAnnotationsWithTokenId(soap, data, "-tns:selectMediaAnnotationsWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectMediaAnnotationsWithTokenId * SOAP_FMAC4 soap_get___tns__selectMediaAnnotationsWithTokenId(struct soap*, struct __tns__selectMediaAnnotationsWithTokenId *, const char*, const char*);

#ifndef soap_read___tns__selectMediaAnnotationsWithTokenId
#define soap_read___tns__selectMediaAnnotationsWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectMediaAnnotationsWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectMediaAnnotationsWithTokenId * SOAP_FMAC2 soap_instantiate___tns__selectMediaAnnotationsWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectMediaAnnotationsWithTokenId * soap_new___tns__selectMediaAnnotationsWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectMediaAnnotationsWithTokenId(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectMediaAnnotationsWithTokenId * soap_new_req___tns__selectMediaAnnotationsWithTokenId(struct soap *soap) { struct __tns__selectMediaAnnotationsWithTokenId *_p = soap_instantiate___tns__selectMediaAnnotationsWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaAnnotationsWithTokenId(soap, _p); } return _p; }

inline struct __tns__selectMediaAnnotationsWithTokenId * soap_new_set___tns__selectMediaAnnotationsWithTokenId(struct soap *soap, tns__selectMediaAnnotationsWithTokenId *tns__selectMediaAnnotationsWithTokenId_) { struct __tns__selectMediaAnnotationsWithTokenId *_p = soap_instantiate___tns__selectMediaAnnotationsWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaAnnotationsWithTokenId(soap, _p); _p->tns__selectMediaAnnotationsWithTokenId_ = tns__selectMediaAnnotationsWithTokenId_; } return _p; }

inline void soap_delete___tns__selectMediaAnnotationsWithTokenId(struct soap *soap, struct __tns__selectMediaAnnotationsWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectMediaAnnotationsWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectMediaAliasesWithTokenId
#define SOAP_TYPE_Annot___tns__selectMediaAliasesWithTokenId (220)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectMediaAliasesWithTokenId(struct soap*, struct __tns__selectMediaAliasesWithTokenId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectMediaAliasesWithTokenId(struct soap*, const struct __tns__selectMediaAliasesWithTokenId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectMediaAliasesWithTokenId(struct soap*, const char*, int, const struct __tns__selectMediaAliasesWithTokenId *, const char*);
SOAP_FMAC3 struct __tns__selectMediaAliasesWithTokenId * SOAP_FMAC4 soap_in___tns__selectMediaAliasesWithTokenId(struct soap*, const char*, struct __tns__selectMediaAliasesWithTokenId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectMediaAliasesWithTokenId(struct soap*, const struct __tns__selectMediaAliasesWithTokenId *, const char*, const char*);

#ifndef soap_write___tns__selectMediaAliasesWithTokenId
#define soap_write___tns__selectMediaAliasesWithTokenId(soap, data) ( Annot::soap_serialize___tns__selectMediaAliasesWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectMediaAliasesWithTokenId(soap, data, "-tns:selectMediaAliasesWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectMediaAliasesWithTokenId * SOAP_FMAC4 soap_get___tns__selectMediaAliasesWithTokenId(struct soap*, struct __tns__selectMediaAliasesWithTokenId *, const char*, const char*);

#ifndef soap_read___tns__selectMediaAliasesWithTokenId
#define soap_read___tns__selectMediaAliasesWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectMediaAliasesWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectMediaAliasesWithTokenId * SOAP_FMAC2 soap_instantiate___tns__selectMediaAliasesWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectMediaAliasesWithTokenId * soap_new___tns__selectMediaAliasesWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectMediaAliasesWithTokenId(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectMediaAliasesWithTokenId * soap_new_req___tns__selectMediaAliasesWithTokenId(struct soap *soap) { struct __tns__selectMediaAliasesWithTokenId *_p = soap_instantiate___tns__selectMediaAliasesWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaAliasesWithTokenId(soap, _p); } return _p; }

inline struct __tns__selectMediaAliasesWithTokenId * soap_new_set___tns__selectMediaAliasesWithTokenId(struct soap *soap, tns__selectMediaAliasesWithTokenId *tns__selectMediaAliasesWithTokenId_) { struct __tns__selectMediaAliasesWithTokenId *_p = soap_instantiate___tns__selectMediaAliasesWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectMediaAliasesWithTokenId(soap, _p); _p->tns__selectMediaAliasesWithTokenId_ = tns__selectMediaAliasesWithTokenId_; } return _p; }

inline void soap_delete___tns__selectMediaAliasesWithTokenId(struct soap *soap, struct __tns__selectMediaAliasesWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectMediaAliasesWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectGameThreadWithTokenId
#define SOAP_TYPE_Annot___tns__selectGameThreadWithTokenId (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectGameThreadWithTokenId(struct soap*, struct __tns__selectGameThreadWithTokenId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectGameThreadWithTokenId(struct soap*, const struct __tns__selectGameThreadWithTokenId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectGameThreadWithTokenId(struct soap*, const char*, int, const struct __tns__selectGameThreadWithTokenId *, const char*);
SOAP_FMAC3 struct __tns__selectGameThreadWithTokenId * SOAP_FMAC4 soap_in___tns__selectGameThreadWithTokenId(struct soap*, const char*, struct __tns__selectGameThreadWithTokenId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectGameThreadWithTokenId(struct soap*, const struct __tns__selectGameThreadWithTokenId *, const char*, const char*);

#ifndef soap_write___tns__selectGameThreadWithTokenId
#define soap_write___tns__selectGameThreadWithTokenId(soap, data) ( Annot::soap_serialize___tns__selectGameThreadWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectGameThreadWithTokenId(soap, data, "-tns:selectGameThreadWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectGameThreadWithTokenId * SOAP_FMAC4 soap_get___tns__selectGameThreadWithTokenId(struct soap*, struct __tns__selectGameThreadWithTokenId *, const char*, const char*);

#ifndef soap_read___tns__selectGameThreadWithTokenId
#define soap_read___tns__selectGameThreadWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectGameThreadWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectGameThreadWithTokenId * SOAP_FMAC2 soap_instantiate___tns__selectGameThreadWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectGameThreadWithTokenId * soap_new___tns__selectGameThreadWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectGameThreadWithTokenId(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectGameThreadWithTokenId * soap_new_req___tns__selectGameThreadWithTokenId(struct soap *soap) { struct __tns__selectGameThreadWithTokenId *_p = soap_instantiate___tns__selectGameThreadWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectGameThreadWithTokenId(soap, _p); } return _p; }

inline struct __tns__selectGameThreadWithTokenId * soap_new_set___tns__selectGameThreadWithTokenId(struct soap *soap, tns__selectGameThreadWithTokenId *tns__selectGameThreadWithTokenId_) { struct __tns__selectGameThreadWithTokenId *_p = soap_instantiate___tns__selectGameThreadWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectGameThreadWithTokenId(soap, _p); _p->tns__selectGameThreadWithTokenId_ = tns__selectGameThreadWithTokenId_; } return _p; }

inline void soap_delete___tns__selectGameThreadWithTokenId(struct soap *soap, struct __tns__selectGameThreadWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectGameThreadWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectGameThreadWithTokenDigest
#define SOAP_TYPE_Annot___tns__selectGameThreadWithTokenDigest (212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectGameThreadWithTokenDigest(struct soap*, struct __tns__selectGameThreadWithTokenDigest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectGameThreadWithTokenDigest(struct soap*, const struct __tns__selectGameThreadWithTokenDigest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectGameThreadWithTokenDigest(struct soap*, const char*, int, const struct __tns__selectGameThreadWithTokenDigest *, const char*);
SOAP_FMAC3 struct __tns__selectGameThreadWithTokenDigest * SOAP_FMAC4 soap_in___tns__selectGameThreadWithTokenDigest(struct soap*, const char*, struct __tns__selectGameThreadWithTokenDigest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectGameThreadWithTokenDigest(struct soap*, const struct __tns__selectGameThreadWithTokenDigest *, const char*, const char*);

#ifndef soap_write___tns__selectGameThreadWithTokenDigest
#define soap_write___tns__selectGameThreadWithTokenDigest(soap, data) ( Annot::soap_serialize___tns__selectGameThreadWithTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectGameThreadWithTokenDigest(soap, data, "-tns:selectGameThreadWithTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectGameThreadWithTokenDigest * SOAP_FMAC4 soap_get___tns__selectGameThreadWithTokenDigest(struct soap*, struct __tns__selectGameThreadWithTokenDigest *, const char*, const char*);

#ifndef soap_read___tns__selectGameThreadWithTokenDigest
#define soap_read___tns__selectGameThreadWithTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectGameThreadWithTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectGameThreadWithTokenDigest * SOAP_FMAC2 soap_instantiate___tns__selectGameThreadWithTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectGameThreadWithTokenDigest * soap_new___tns__selectGameThreadWithTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectGameThreadWithTokenDigest(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectGameThreadWithTokenDigest * soap_new_req___tns__selectGameThreadWithTokenDigest(struct soap *soap) { struct __tns__selectGameThreadWithTokenDigest *_p = soap_instantiate___tns__selectGameThreadWithTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectGameThreadWithTokenDigest(soap, _p); } return _p; }

inline struct __tns__selectGameThreadWithTokenDigest * soap_new_set___tns__selectGameThreadWithTokenDigest(struct soap *soap, tns__selectGameThreadWithTokenDigest *tns__selectGameThreadWithTokenDigest_) { struct __tns__selectGameThreadWithTokenDigest *_p = soap_instantiate___tns__selectGameThreadWithTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectGameThreadWithTokenDigest(soap, _p); _p->tns__selectGameThreadWithTokenDigest_ = tns__selectGameThreadWithTokenDigest_; } return _p; }

inline void soap_delete___tns__selectGameThreadWithTokenDigest(struct soap *soap, struct __tns__selectGameThreadWithTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectGameThreadWithTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectGameHookWithTokenId
#define SOAP_TYPE_Annot___tns__selectGameHookWithTokenId (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectGameHookWithTokenId(struct soap*, struct __tns__selectGameHookWithTokenId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectGameHookWithTokenId(struct soap*, const struct __tns__selectGameHookWithTokenId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectGameHookWithTokenId(struct soap*, const char*, int, const struct __tns__selectGameHookWithTokenId *, const char*);
SOAP_FMAC3 struct __tns__selectGameHookWithTokenId * SOAP_FMAC4 soap_in___tns__selectGameHookWithTokenId(struct soap*, const char*, struct __tns__selectGameHookWithTokenId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectGameHookWithTokenId(struct soap*, const struct __tns__selectGameHookWithTokenId *, const char*, const char*);

#ifndef soap_write___tns__selectGameHookWithTokenId
#define soap_write___tns__selectGameHookWithTokenId(soap, data) ( Annot::soap_serialize___tns__selectGameHookWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectGameHookWithTokenId(soap, data, "-tns:selectGameHookWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectGameHookWithTokenId * SOAP_FMAC4 soap_get___tns__selectGameHookWithTokenId(struct soap*, struct __tns__selectGameHookWithTokenId *, const char*, const char*);

#ifndef soap_read___tns__selectGameHookWithTokenId
#define soap_read___tns__selectGameHookWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectGameHookWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectGameHookWithTokenId * SOAP_FMAC2 soap_instantiate___tns__selectGameHookWithTokenId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectGameHookWithTokenId * soap_new___tns__selectGameHookWithTokenId(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectGameHookWithTokenId(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectGameHookWithTokenId * soap_new_req___tns__selectGameHookWithTokenId(struct soap *soap) { struct __tns__selectGameHookWithTokenId *_p = soap_instantiate___tns__selectGameHookWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectGameHookWithTokenId(soap, _p); } return _p; }

inline struct __tns__selectGameHookWithTokenId * soap_new_set___tns__selectGameHookWithTokenId(struct soap *soap, tns__selectGameHookWithTokenId *tns__selectGameHookWithTokenId_) { struct __tns__selectGameHookWithTokenId *_p = soap_instantiate___tns__selectGameHookWithTokenId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectGameHookWithTokenId(soap, _p); _p->tns__selectGameHookWithTokenId_ = tns__selectGameHookWithTokenId_; } return _p; }

inline void soap_delete___tns__selectGameHookWithTokenId(struct soap *soap, struct __tns__selectGameHookWithTokenId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectGameHookWithTokenId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__selectGameHookWithTokenDigest
#define SOAP_TYPE_Annot___tns__selectGameHookWithTokenDigest (204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__selectGameHookWithTokenDigest(struct soap*, struct __tns__selectGameHookWithTokenDigest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__selectGameHookWithTokenDigest(struct soap*, const struct __tns__selectGameHookWithTokenDigest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__selectGameHookWithTokenDigest(struct soap*, const char*, int, const struct __tns__selectGameHookWithTokenDigest *, const char*);
SOAP_FMAC3 struct __tns__selectGameHookWithTokenDigest * SOAP_FMAC4 soap_in___tns__selectGameHookWithTokenDigest(struct soap*, const char*, struct __tns__selectGameHookWithTokenDigest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__selectGameHookWithTokenDigest(struct soap*, const struct __tns__selectGameHookWithTokenDigest *, const char*, const char*);

#ifndef soap_write___tns__selectGameHookWithTokenDigest
#define soap_write___tns__selectGameHookWithTokenDigest(soap, data) ( Annot::soap_serialize___tns__selectGameHookWithTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__selectGameHookWithTokenDigest(soap, data, "-tns:selectGameHookWithTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__selectGameHookWithTokenDigest * SOAP_FMAC4 soap_get___tns__selectGameHookWithTokenDigest(struct soap*, struct __tns__selectGameHookWithTokenDigest *, const char*, const char*);

#ifndef soap_read___tns__selectGameHookWithTokenDigest
#define soap_read___tns__selectGameHookWithTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__selectGameHookWithTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__selectGameHookWithTokenDigest * SOAP_FMAC2 soap_instantiate___tns__selectGameHookWithTokenDigest(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__selectGameHookWithTokenDigest * soap_new___tns__selectGameHookWithTokenDigest(struct soap *soap, int n = -1) { return soap_instantiate___tns__selectGameHookWithTokenDigest(soap, n, NULL, NULL, NULL); }

inline struct __tns__selectGameHookWithTokenDigest * soap_new_req___tns__selectGameHookWithTokenDigest(struct soap *soap) { struct __tns__selectGameHookWithTokenDigest *_p = soap_instantiate___tns__selectGameHookWithTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectGameHookWithTokenDigest(soap, _p); } return _p; }

inline struct __tns__selectGameHookWithTokenDigest * soap_new_set___tns__selectGameHookWithTokenDigest(struct soap *soap, tns__selectGameHookWithTokenDigest *tns__selectGameHookWithTokenDigest_) { struct __tns__selectGameHookWithTokenDigest *_p = soap_instantiate___tns__selectGameHookWithTokenDigest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__selectGameHookWithTokenDigest(soap, _p); _p->tns__selectGameHookWithTokenDigest_ = tns__selectGameHookWithTokenDigest_; } return _p; }

inline void soap_delete___tns__selectGameHookWithTokenDigest(struct soap *soap, struct __tns__selectGameHookWithTokenDigest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__selectGameHookWithTokenDigest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__login
#define SOAP_TYPE_Annot___tns__login (200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__login(struct soap*, struct __tns__login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__login(struct soap*, const struct __tns__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__login(struct soap*, const char*, int, const struct __tns__login *, const char*);
SOAP_FMAC3 struct __tns__login * SOAP_FMAC4 soap_in___tns__login(struct soap*, const char*, struct __tns__login *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__login(struct soap*, const struct __tns__login *, const char*, const char*);

#ifndef soap_write___tns__login
#define soap_write___tns__login(soap, data) ( Annot::soap_serialize___tns__login(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__login(soap, data, "-tns:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__login * SOAP_FMAC4 soap_get___tns__login(struct soap*, struct __tns__login *, const char*, const char*);

#ifndef soap_read___tns__login
#define soap_read___tns__login(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__login * SOAP_FMAC2 soap_instantiate___tns__login(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__login * soap_new___tns__login(struct soap *soap, int n = -1) { return soap_instantiate___tns__login(soap, n, NULL, NULL, NULL); }

inline struct __tns__login * soap_new_req___tns__login(struct soap *soap) { struct __tns__login *_p = soap_instantiate___tns__login(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__login(soap, _p); } return _p; }

inline struct __tns__login * soap_new_set___tns__login(struct soap *soap, tns__login *tns__login_) { struct __tns__login *_p = soap_instantiate___tns__login(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__login(soap, _p); _p->tns__login_ = tns__login_; } return _p; }

inline void soap_delete___tns__login(struct soap *soap, struct __tns__login *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__login(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__isLatestApp
#define SOAP_TYPE_Annot___tns__isLatestApp (196)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__isLatestApp(struct soap*, struct __tns__isLatestApp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__isLatestApp(struct soap*, const struct __tns__isLatestApp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__isLatestApp(struct soap*, const char*, int, const struct __tns__isLatestApp *, const char*);
SOAP_FMAC3 struct __tns__isLatestApp * SOAP_FMAC4 soap_in___tns__isLatestApp(struct soap*, const char*, struct __tns__isLatestApp *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__isLatestApp(struct soap*, const struct __tns__isLatestApp *, const char*, const char*);

#ifndef soap_write___tns__isLatestApp
#define soap_write___tns__isLatestApp(soap, data) ( Annot::soap_serialize___tns__isLatestApp(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__isLatestApp(soap, data, "-tns:isLatestApp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__isLatestApp * SOAP_FMAC4 soap_get___tns__isLatestApp(struct soap*, struct __tns__isLatestApp *, const char*, const char*);

#ifndef soap_read___tns__isLatestApp
#define soap_read___tns__isLatestApp(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__isLatestApp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__isLatestApp * SOAP_FMAC2 soap_instantiate___tns__isLatestApp(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__isLatestApp * soap_new___tns__isLatestApp(struct soap *soap, int n = -1) { return soap_instantiate___tns__isLatestApp(soap, n, NULL, NULL, NULL); }

inline struct __tns__isLatestApp * soap_new_req___tns__isLatestApp(struct soap *soap) { struct __tns__isLatestApp *_p = soap_instantiate___tns__isLatestApp(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__isLatestApp(soap, _p); } return _p; }

inline struct __tns__isLatestApp * soap_new_set___tns__isLatestApp(struct soap *soap, tns__isLatestApp *tns__isLatestApp_) { struct __tns__isLatestApp *_p = soap_instantiate___tns__isLatestApp(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__isLatestApp(soap, _p); _p->tns__isLatestApp_ = tns__isLatestApp_; } return _p; }

inline void soap_delete___tns__isLatestApp(struct soap *soap, struct __tns__isLatestApp *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__isLatestApp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__isConnected
#define SOAP_TYPE_Annot___tns__isConnected (192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__isConnected(struct soap*, struct __tns__isConnected *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__isConnected(struct soap*, const struct __tns__isConnected *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__isConnected(struct soap*, const char*, int, const struct __tns__isConnected *, const char*);
SOAP_FMAC3 struct __tns__isConnected * SOAP_FMAC4 soap_in___tns__isConnected(struct soap*, const char*, struct __tns__isConnected *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__isConnected(struct soap*, const struct __tns__isConnected *, const char*, const char*);

#ifndef soap_write___tns__isConnected
#define soap_write___tns__isConnected(soap, data) ( Annot::soap_serialize___tns__isConnected(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__isConnected(soap, data, "-tns:isConnected", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__isConnected * SOAP_FMAC4 soap_get___tns__isConnected(struct soap*, struct __tns__isConnected *, const char*, const char*);

#ifndef soap_read___tns__isConnected
#define soap_read___tns__isConnected(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__isConnected(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__isConnected * SOAP_FMAC2 soap_instantiate___tns__isConnected(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__isConnected * soap_new___tns__isConnected(struct soap *soap, int n = -1) { return soap_instantiate___tns__isConnected(soap, n, NULL, NULL, NULL); }

inline struct __tns__isConnected * soap_new_req___tns__isConnected(struct soap *soap) { struct __tns__isConnected *_p = soap_instantiate___tns__isConnected(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__isConnected(soap, _p); } return _p; }

inline struct __tns__isConnected * soap_new_set___tns__isConnected(struct soap *soap, tns__isConnected *tns__isConnected_) { struct __tns__isConnected *_p = soap_instantiate___tns__isConnected(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__isConnected(soap, _p); _p->tns__isConnected_ = tns__isConnected_; } return _p; }

inline void soap_delete___tns__isConnected(struct soap *soap, struct __tns__isConnected *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__isConnected(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__isAuthorized
#define SOAP_TYPE_Annot___tns__isAuthorized (188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__isAuthorized(struct soap*, struct __tns__isAuthorized *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__isAuthorized(struct soap*, const struct __tns__isAuthorized *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__isAuthorized(struct soap*, const char*, int, const struct __tns__isAuthorized *, const char*);
SOAP_FMAC3 struct __tns__isAuthorized * SOAP_FMAC4 soap_in___tns__isAuthorized(struct soap*, const char*, struct __tns__isAuthorized *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__isAuthorized(struct soap*, const struct __tns__isAuthorized *, const char*, const char*);

#ifndef soap_write___tns__isAuthorized
#define soap_write___tns__isAuthorized(soap, data) ( Annot::soap_serialize___tns__isAuthorized(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__isAuthorized(soap, data, "-tns:isAuthorized", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__isAuthorized * SOAP_FMAC4 soap_get___tns__isAuthorized(struct soap*, struct __tns__isAuthorized *, const char*, const char*);

#ifndef soap_read___tns__isAuthorized
#define soap_read___tns__isAuthorized(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__isAuthorized(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__isAuthorized * SOAP_FMAC2 soap_instantiate___tns__isAuthorized(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__isAuthorized * soap_new___tns__isAuthorized(struct soap *soap, int n = -1) { return soap_instantiate___tns__isAuthorized(soap, n, NULL, NULL, NULL); }

inline struct __tns__isAuthorized * soap_new_req___tns__isAuthorized(struct soap *soap) { struct __tns__isAuthorized *_p = soap_instantiate___tns__isAuthorized(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__isAuthorized(soap, _p); } return _p; }

inline struct __tns__isAuthorized * soap_new_set___tns__isAuthorized(struct soap *soap, tns__isAuthorized *tns__isAuthorized_) { struct __tns__isAuthorized *_p = soap_instantiate___tns__isAuthorized(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__isAuthorized(soap, _p); _p->tns__isAuthorized_ = tns__isAuthorized_; } return _p; }

inline void soap_delete___tns__isAuthorized(struct soap *soap, struct __tns__isAuthorized *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__isAuthorized(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__getUser
#define SOAP_TYPE_Annot___tns__getUser (184)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__getUser(struct soap*, struct __tns__getUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__getUser(struct soap*, const struct __tns__getUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__getUser(struct soap*, const char*, int, const struct __tns__getUser *, const char*);
SOAP_FMAC3 struct __tns__getUser * SOAP_FMAC4 soap_in___tns__getUser(struct soap*, const char*, struct __tns__getUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__getUser(struct soap*, const struct __tns__getUser *, const char*, const char*);

#ifndef soap_write___tns__getUser
#define soap_write___tns__getUser(soap, data) ( Annot::soap_serialize___tns__getUser(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__getUser(soap, data, "-tns:getUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__getUser * SOAP_FMAC4 soap_get___tns__getUser(struct soap*, struct __tns__getUser *, const char*, const char*);

#ifndef soap_read___tns__getUser
#define soap_read___tns__getUser(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__getUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__getUser * SOAP_FMAC2 soap_instantiate___tns__getUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__getUser * soap_new___tns__getUser(struct soap *soap, int n = -1) { return soap_instantiate___tns__getUser(soap, n, NULL, NULL, NULL); }

inline struct __tns__getUser * soap_new_req___tns__getUser(struct soap *soap) { struct __tns__getUser *_p = soap_instantiate___tns__getUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__getUser(soap, _p); } return _p; }

inline struct __tns__getUser * soap_new_set___tns__getUser(struct soap *soap, tns__getUser *tns__getUser_) { struct __tns__getUser *_p = soap_instantiate___tns__getUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__getUser(soap, _p); _p->tns__getUser_ = tns__getUser_; } return _p; }

inline void soap_delete___tns__getUser(struct soap *soap, struct __tns__getUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__getUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__deleteMediaAnnotationWithId
#define SOAP_TYPE_Annot___tns__deleteMediaAnnotationWithId (180)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__deleteMediaAnnotationWithId(struct soap*, struct __tns__deleteMediaAnnotationWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__deleteMediaAnnotationWithId(struct soap*, const struct __tns__deleteMediaAnnotationWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__deleteMediaAnnotationWithId(struct soap*, const char*, int, const struct __tns__deleteMediaAnnotationWithId *, const char*);
SOAP_FMAC3 struct __tns__deleteMediaAnnotationWithId * SOAP_FMAC4 soap_in___tns__deleteMediaAnnotationWithId(struct soap*, const char*, struct __tns__deleteMediaAnnotationWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__deleteMediaAnnotationWithId(struct soap*, const struct __tns__deleteMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_write___tns__deleteMediaAnnotationWithId
#define soap_write___tns__deleteMediaAnnotationWithId(soap, data) ( Annot::soap_serialize___tns__deleteMediaAnnotationWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__deleteMediaAnnotationWithId(soap, data, "-tns:deleteMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__deleteMediaAnnotationWithId * SOAP_FMAC4 soap_get___tns__deleteMediaAnnotationWithId(struct soap*, struct __tns__deleteMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_read___tns__deleteMediaAnnotationWithId
#define soap_read___tns__deleteMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__deleteMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__deleteMediaAnnotationWithId * SOAP_FMAC2 soap_instantiate___tns__deleteMediaAnnotationWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__deleteMediaAnnotationWithId * soap_new___tns__deleteMediaAnnotationWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__deleteMediaAnnotationWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__deleteMediaAnnotationWithId * soap_new_req___tns__deleteMediaAnnotationWithId(struct soap *soap) { struct __tns__deleteMediaAnnotationWithId *_p = soap_instantiate___tns__deleteMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__deleteMediaAnnotationWithId(soap, _p); } return _p; }

inline struct __tns__deleteMediaAnnotationWithId * soap_new_set___tns__deleteMediaAnnotationWithId(struct soap *soap, tns__deleteMediaAnnotationWithId *tns__deleteMediaAnnotationWithId_) { struct __tns__deleteMediaAnnotationWithId *_p = soap_instantiate___tns__deleteMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__deleteMediaAnnotationWithId(soap, _p); _p->tns__deleteMediaAnnotationWithId_ = tns__deleteMediaAnnotationWithId_; } return _p; }

inline void soap_delete___tns__deleteMediaAnnotationWithId(struct soap *soap, struct __tns__deleteMediaAnnotationWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__deleteMediaAnnotationWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__deleteMediaAliasWithId
#define SOAP_TYPE_Annot___tns__deleteMediaAliasWithId (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__deleteMediaAliasWithId(struct soap*, struct __tns__deleteMediaAliasWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__deleteMediaAliasWithId(struct soap*, const struct __tns__deleteMediaAliasWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__deleteMediaAliasWithId(struct soap*, const char*, int, const struct __tns__deleteMediaAliasWithId *, const char*);
SOAP_FMAC3 struct __tns__deleteMediaAliasWithId * SOAP_FMAC4 soap_in___tns__deleteMediaAliasWithId(struct soap*, const char*, struct __tns__deleteMediaAliasWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__deleteMediaAliasWithId(struct soap*, const struct __tns__deleteMediaAliasWithId *, const char*, const char*);

#ifndef soap_write___tns__deleteMediaAliasWithId
#define soap_write___tns__deleteMediaAliasWithId(soap, data) ( Annot::soap_serialize___tns__deleteMediaAliasWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__deleteMediaAliasWithId(soap, data, "-tns:deleteMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__deleteMediaAliasWithId * SOAP_FMAC4 soap_get___tns__deleteMediaAliasWithId(struct soap*, struct __tns__deleteMediaAliasWithId *, const char*, const char*);

#ifndef soap_read___tns__deleteMediaAliasWithId
#define soap_read___tns__deleteMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__deleteMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__deleteMediaAliasWithId * SOAP_FMAC2 soap_instantiate___tns__deleteMediaAliasWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__deleteMediaAliasWithId * soap_new___tns__deleteMediaAliasWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__deleteMediaAliasWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__deleteMediaAliasWithId * soap_new_req___tns__deleteMediaAliasWithId(struct soap *soap) { struct __tns__deleteMediaAliasWithId *_p = soap_instantiate___tns__deleteMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__deleteMediaAliasWithId(soap, _p); } return _p; }

inline struct __tns__deleteMediaAliasWithId * soap_new_set___tns__deleteMediaAliasWithId(struct soap *soap, tns__deleteMediaAliasWithId *tns__deleteMediaAliasWithId_) { struct __tns__deleteMediaAliasWithId *_p = soap_instantiate___tns__deleteMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__deleteMediaAliasWithId(soap, _p); _p->tns__deleteMediaAliasWithId_ = tns__deleteMediaAliasWithId_; } return _p; }

inline void soap_delete___tns__deleteMediaAliasWithId(struct soap *soap, struct __tns__deleteMediaAliasWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__deleteMediaAliasWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__curseUserWithId
#define SOAP_TYPE_Annot___tns__curseUserWithId (172)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__curseUserWithId(struct soap*, struct __tns__curseUserWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__curseUserWithId(struct soap*, const struct __tns__curseUserWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__curseUserWithId(struct soap*, const char*, int, const struct __tns__curseUserWithId *, const char*);
SOAP_FMAC3 struct __tns__curseUserWithId * SOAP_FMAC4 soap_in___tns__curseUserWithId(struct soap*, const char*, struct __tns__curseUserWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__curseUserWithId(struct soap*, const struct __tns__curseUserWithId *, const char*, const char*);

#ifndef soap_write___tns__curseUserWithId
#define soap_write___tns__curseUserWithId(soap, data) ( Annot::soap_serialize___tns__curseUserWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__curseUserWithId(soap, data, "-tns:curseUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__curseUserWithId * SOAP_FMAC4 soap_get___tns__curseUserWithId(struct soap*, struct __tns__curseUserWithId *, const char*, const char*);

#ifndef soap_read___tns__curseUserWithId
#define soap_read___tns__curseUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__curseUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__curseUserWithId * SOAP_FMAC2 soap_instantiate___tns__curseUserWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__curseUserWithId * soap_new___tns__curseUserWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__curseUserWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__curseUserWithId * soap_new_req___tns__curseUserWithId(struct soap *soap) { struct __tns__curseUserWithId *_p = soap_instantiate___tns__curseUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__curseUserWithId(soap, _p); } return _p; }

inline struct __tns__curseUserWithId * soap_new_set___tns__curseUserWithId(struct soap *soap, tns__curseUserWithId *tns__curseUserWithId_) { struct __tns__curseUserWithId *_p = soap_instantiate___tns__curseUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__curseUserWithId(soap, _p); _p->tns__curseUserWithId_ = tns__curseUserWithId_; } return _p; }

inline void soap_delete___tns__curseUserWithId(struct soap *soap, struct __tns__curseUserWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__curseUserWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__curseMediaTokenWithId
#define SOAP_TYPE_Annot___tns__curseMediaTokenWithId (168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__curseMediaTokenWithId(struct soap*, struct __tns__curseMediaTokenWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__curseMediaTokenWithId(struct soap*, const struct __tns__curseMediaTokenWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__curseMediaTokenWithId(struct soap*, const char*, int, const struct __tns__curseMediaTokenWithId *, const char*);
SOAP_FMAC3 struct __tns__curseMediaTokenWithId * SOAP_FMAC4 soap_in___tns__curseMediaTokenWithId(struct soap*, const char*, struct __tns__curseMediaTokenWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__curseMediaTokenWithId(struct soap*, const struct __tns__curseMediaTokenWithId *, const char*, const char*);

#ifndef soap_write___tns__curseMediaTokenWithId
#define soap_write___tns__curseMediaTokenWithId(soap, data) ( Annot::soap_serialize___tns__curseMediaTokenWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__curseMediaTokenWithId(soap, data, "-tns:curseMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__curseMediaTokenWithId * SOAP_FMAC4 soap_get___tns__curseMediaTokenWithId(struct soap*, struct __tns__curseMediaTokenWithId *, const char*, const char*);

#ifndef soap_read___tns__curseMediaTokenWithId
#define soap_read___tns__curseMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__curseMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__curseMediaTokenWithId * SOAP_FMAC2 soap_instantiate___tns__curseMediaTokenWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__curseMediaTokenWithId * soap_new___tns__curseMediaTokenWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__curseMediaTokenWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__curseMediaTokenWithId * soap_new_req___tns__curseMediaTokenWithId(struct soap *soap) { struct __tns__curseMediaTokenWithId *_p = soap_instantiate___tns__curseMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__curseMediaTokenWithId(soap, _p); } return _p; }

inline struct __tns__curseMediaTokenWithId * soap_new_set___tns__curseMediaTokenWithId(struct soap *soap, tns__curseMediaTokenWithId *tns__curseMediaTokenWithId_) { struct __tns__curseMediaTokenWithId *_p = soap_instantiate___tns__curseMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__curseMediaTokenWithId(soap, _p); _p->tns__curseMediaTokenWithId_ = tns__curseMediaTokenWithId_; } return _p; }

inline void soap_delete___tns__curseMediaTokenWithId(struct soap *soap, struct __tns__curseMediaTokenWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__curseMediaTokenWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__curseMediaAnnotationWithId
#define SOAP_TYPE_Annot___tns__curseMediaAnnotationWithId (164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__curseMediaAnnotationWithId(struct soap*, struct __tns__curseMediaAnnotationWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__curseMediaAnnotationWithId(struct soap*, const struct __tns__curseMediaAnnotationWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__curseMediaAnnotationWithId(struct soap*, const char*, int, const struct __tns__curseMediaAnnotationWithId *, const char*);
SOAP_FMAC3 struct __tns__curseMediaAnnotationWithId * SOAP_FMAC4 soap_in___tns__curseMediaAnnotationWithId(struct soap*, const char*, struct __tns__curseMediaAnnotationWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__curseMediaAnnotationWithId(struct soap*, const struct __tns__curseMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_write___tns__curseMediaAnnotationWithId
#define soap_write___tns__curseMediaAnnotationWithId(soap, data) ( Annot::soap_serialize___tns__curseMediaAnnotationWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__curseMediaAnnotationWithId(soap, data, "-tns:curseMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__curseMediaAnnotationWithId * SOAP_FMAC4 soap_get___tns__curseMediaAnnotationWithId(struct soap*, struct __tns__curseMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_read___tns__curseMediaAnnotationWithId
#define soap_read___tns__curseMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__curseMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__curseMediaAnnotationWithId * SOAP_FMAC2 soap_instantiate___tns__curseMediaAnnotationWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__curseMediaAnnotationWithId * soap_new___tns__curseMediaAnnotationWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__curseMediaAnnotationWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__curseMediaAnnotationWithId * soap_new_req___tns__curseMediaAnnotationWithId(struct soap *soap) { struct __tns__curseMediaAnnotationWithId *_p = soap_instantiate___tns__curseMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__curseMediaAnnotationWithId(soap, _p); } return _p; }

inline struct __tns__curseMediaAnnotationWithId * soap_new_set___tns__curseMediaAnnotationWithId(struct soap *soap, tns__curseMediaAnnotationWithId *tns__curseMediaAnnotationWithId_) { struct __tns__curseMediaAnnotationWithId *_p = soap_instantiate___tns__curseMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__curseMediaAnnotationWithId(soap, _p); _p->tns__curseMediaAnnotationWithId_ = tns__curseMediaAnnotationWithId_; } return _p; }

inline void soap_delete___tns__curseMediaAnnotationWithId(struct soap *soap, struct __tns__curseMediaAnnotationWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__curseMediaAnnotationWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__curseMediaAliasWithId
#define SOAP_TYPE_Annot___tns__curseMediaAliasWithId (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__curseMediaAliasWithId(struct soap*, struct __tns__curseMediaAliasWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__curseMediaAliasWithId(struct soap*, const struct __tns__curseMediaAliasWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__curseMediaAliasWithId(struct soap*, const char*, int, const struct __tns__curseMediaAliasWithId *, const char*);
SOAP_FMAC3 struct __tns__curseMediaAliasWithId * SOAP_FMAC4 soap_in___tns__curseMediaAliasWithId(struct soap*, const char*, struct __tns__curseMediaAliasWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__curseMediaAliasWithId(struct soap*, const struct __tns__curseMediaAliasWithId *, const char*, const char*);

#ifndef soap_write___tns__curseMediaAliasWithId
#define soap_write___tns__curseMediaAliasWithId(soap, data) ( Annot::soap_serialize___tns__curseMediaAliasWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__curseMediaAliasWithId(soap, data, "-tns:curseMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__curseMediaAliasWithId * SOAP_FMAC4 soap_get___tns__curseMediaAliasWithId(struct soap*, struct __tns__curseMediaAliasWithId *, const char*, const char*);

#ifndef soap_read___tns__curseMediaAliasWithId
#define soap_read___tns__curseMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__curseMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__curseMediaAliasWithId * SOAP_FMAC2 soap_instantiate___tns__curseMediaAliasWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__curseMediaAliasWithId * soap_new___tns__curseMediaAliasWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__curseMediaAliasWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__curseMediaAliasWithId * soap_new_req___tns__curseMediaAliasWithId(struct soap *soap) { struct __tns__curseMediaAliasWithId *_p = soap_instantiate___tns__curseMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__curseMediaAliasWithId(soap, _p); } return _p; }

inline struct __tns__curseMediaAliasWithId * soap_new_set___tns__curseMediaAliasWithId(struct soap *soap, tns__curseMediaAliasWithId *tns__curseMediaAliasWithId_) { struct __tns__curseMediaAliasWithId *_p = soap_instantiate___tns__curseMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__curseMediaAliasWithId(soap, _p); _p->tns__curseMediaAliasWithId_ = tns__curseMediaAliasWithId_; } return _p; }

inline void soap_delete___tns__curseMediaAliasWithId(struct soap *soap, struct __tns__curseMediaAliasWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__curseMediaAliasWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__chat
#define SOAP_TYPE_Annot___tns__chat (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__chat(struct soap*, struct __tns__chat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__chat(struct soap*, const struct __tns__chat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__chat(struct soap*, const char*, int, const struct __tns__chat *, const char*);
SOAP_FMAC3 struct __tns__chat * SOAP_FMAC4 soap_in___tns__chat(struct soap*, const char*, struct __tns__chat *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__chat(struct soap*, const struct __tns__chat *, const char*, const char*);

#ifndef soap_write___tns__chat
#define soap_write___tns__chat(soap, data) ( Annot::soap_serialize___tns__chat(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__chat(soap, data, "-tns:chat", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__chat * SOAP_FMAC4 soap_get___tns__chat(struct soap*, struct __tns__chat *, const char*, const char*);

#ifndef soap_read___tns__chat
#define soap_read___tns__chat(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__chat(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__chat * SOAP_FMAC2 soap_instantiate___tns__chat(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__chat * soap_new___tns__chat(struct soap *soap, int n = -1) { return soap_instantiate___tns__chat(soap, n, NULL, NULL, NULL); }

inline struct __tns__chat * soap_new_req___tns__chat(struct soap *soap) { struct __tns__chat *_p = soap_instantiate___tns__chat(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__chat(soap, _p); } return _p; }

inline struct __tns__chat * soap_new_set___tns__chat(struct soap *soap, tns__chat *tns__chat_) { struct __tns__chat *_p = soap_instantiate___tns__chat(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__chat(soap, _p); _p->tns__chat_ = tns__chat_; } return _p; }

inline void soap_delete___tns__chat(struct soap *soap, struct __tns__chat *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__chat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__blockUserWithId
#define SOAP_TYPE_Annot___tns__blockUserWithId (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__blockUserWithId(struct soap*, struct __tns__blockUserWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__blockUserWithId(struct soap*, const struct __tns__blockUserWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__blockUserWithId(struct soap*, const char*, int, const struct __tns__blockUserWithId *, const char*);
SOAP_FMAC3 struct __tns__blockUserWithId * SOAP_FMAC4 soap_in___tns__blockUserWithId(struct soap*, const char*, struct __tns__blockUserWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__blockUserWithId(struct soap*, const struct __tns__blockUserWithId *, const char*, const char*);

#ifndef soap_write___tns__blockUserWithId
#define soap_write___tns__blockUserWithId(soap, data) ( Annot::soap_serialize___tns__blockUserWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__blockUserWithId(soap, data, "-tns:blockUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__blockUserWithId * SOAP_FMAC4 soap_get___tns__blockUserWithId(struct soap*, struct __tns__blockUserWithId *, const char*, const char*);

#ifndef soap_read___tns__blockUserWithId
#define soap_read___tns__blockUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__blockUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__blockUserWithId * SOAP_FMAC2 soap_instantiate___tns__blockUserWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__blockUserWithId * soap_new___tns__blockUserWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__blockUserWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__blockUserWithId * soap_new_req___tns__blockUserWithId(struct soap *soap) { struct __tns__blockUserWithId *_p = soap_instantiate___tns__blockUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blockUserWithId(soap, _p); } return _p; }

inline struct __tns__blockUserWithId * soap_new_set___tns__blockUserWithId(struct soap *soap, tns__blockUserWithId *tns__blockUserWithId_) { struct __tns__blockUserWithId *_p = soap_instantiate___tns__blockUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blockUserWithId(soap, _p); _p->tns__blockUserWithId_ = tns__blockUserWithId_; } return _p; }

inline void soap_delete___tns__blockUserWithId(struct soap *soap, struct __tns__blockUserWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__blockUserWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__blockMediaAnnotationWithId
#define SOAP_TYPE_Annot___tns__blockMediaAnnotationWithId (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__blockMediaAnnotationWithId(struct soap*, struct __tns__blockMediaAnnotationWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__blockMediaAnnotationWithId(struct soap*, const struct __tns__blockMediaAnnotationWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__blockMediaAnnotationWithId(struct soap*, const char*, int, const struct __tns__blockMediaAnnotationWithId *, const char*);
SOAP_FMAC3 struct __tns__blockMediaAnnotationWithId * SOAP_FMAC4 soap_in___tns__blockMediaAnnotationWithId(struct soap*, const char*, struct __tns__blockMediaAnnotationWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__blockMediaAnnotationWithId(struct soap*, const struct __tns__blockMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_write___tns__blockMediaAnnotationWithId
#define soap_write___tns__blockMediaAnnotationWithId(soap, data) ( Annot::soap_serialize___tns__blockMediaAnnotationWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__blockMediaAnnotationWithId(soap, data, "-tns:blockMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__blockMediaAnnotationWithId * SOAP_FMAC4 soap_get___tns__blockMediaAnnotationWithId(struct soap*, struct __tns__blockMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_read___tns__blockMediaAnnotationWithId
#define soap_read___tns__blockMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__blockMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__blockMediaAnnotationWithId * SOAP_FMAC2 soap_instantiate___tns__blockMediaAnnotationWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__blockMediaAnnotationWithId * soap_new___tns__blockMediaAnnotationWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__blockMediaAnnotationWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__blockMediaAnnotationWithId * soap_new_req___tns__blockMediaAnnotationWithId(struct soap *soap) { struct __tns__blockMediaAnnotationWithId *_p = soap_instantiate___tns__blockMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blockMediaAnnotationWithId(soap, _p); } return _p; }

inline struct __tns__blockMediaAnnotationWithId * soap_new_set___tns__blockMediaAnnotationWithId(struct soap *soap, tns__blockMediaAnnotationWithId *tns__blockMediaAnnotationWithId_) { struct __tns__blockMediaAnnotationWithId *_p = soap_instantiate___tns__blockMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blockMediaAnnotationWithId(soap, _p); _p->tns__blockMediaAnnotationWithId_ = tns__blockMediaAnnotationWithId_; } return _p; }

inline void soap_delete___tns__blockMediaAnnotationWithId(struct soap *soap, struct __tns__blockMediaAnnotationWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__blockMediaAnnotationWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__blockMediaAliasWithId
#define SOAP_TYPE_Annot___tns__blockMediaAliasWithId (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__blockMediaAliasWithId(struct soap*, struct __tns__blockMediaAliasWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__blockMediaAliasWithId(struct soap*, const struct __tns__blockMediaAliasWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__blockMediaAliasWithId(struct soap*, const char*, int, const struct __tns__blockMediaAliasWithId *, const char*);
SOAP_FMAC3 struct __tns__blockMediaAliasWithId * SOAP_FMAC4 soap_in___tns__blockMediaAliasWithId(struct soap*, const char*, struct __tns__blockMediaAliasWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__blockMediaAliasWithId(struct soap*, const struct __tns__blockMediaAliasWithId *, const char*, const char*);

#ifndef soap_write___tns__blockMediaAliasWithId
#define soap_write___tns__blockMediaAliasWithId(soap, data) ( Annot::soap_serialize___tns__blockMediaAliasWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__blockMediaAliasWithId(soap, data, "-tns:blockMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__blockMediaAliasWithId * SOAP_FMAC4 soap_get___tns__blockMediaAliasWithId(struct soap*, struct __tns__blockMediaAliasWithId *, const char*, const char*);

#ifndef soap_read___tns__blockMediaAliasWithId
#define soap_read___tns__blockMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__blockMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__blockMediaAliasWithId * SOAP_FMAC2 soap_instantiate___tns__blockMediaAliasWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__blockMediaAliasWithId * soap_new___tns__blockMediaAliasWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__blockMediaAliasWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__blockMediaAliasWithId * soap_new_req___tns__blockMediaAliasWithId(struct soap *soap) { struct __tns__blockMediaAliasWithId *_p = soap_instantiate___tns__blockMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blockMediaAliasWithId(soap, _p); } return _p; }

inline struct __tns__blockMediaAliasWithId * soap_new_set___tns__blockMediaAliasWithId(struct soap *soap, tns__blockMediaAliasWithId *tns__blockMediaAliasWithId_) { struct __tns__blockMediaAliasWithId *_p = soap_instantiate___tns__blockMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blockMediaAliasWithId(soap, _p); _p->tns__blockMediaAliasWithId_ = tns__blockMediaAliasWithId_; } return _p; }

inline void soap_delete___tns__blockMediaAliasWithId(struct soap *soap, struct __tns__blockMediaAliasWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__blockMediaAliasWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__blessUserWithId
#define SOAP_TYPE_Annot___tns__blessUserWithId (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__blessUserWithId(struct soap*, struct __tns__blessUserWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__blessUserWithId(struct soap*, const struct __tns__blessUserWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__blessUserWithId(struct soap*, const char*, int, const struct __tns__blessUserWithId *, const char*);
SOAP_FMAC3 struct __tns__blessUserWithId * SOAP_FMAC4 soap_in___tns__blessUserWithId(struct soap*, const char*, struct __tns__blessUserWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__blessUserWithId(struct soap*, const struct __tns__blessUserWithId *, const char*, const char*);

#ifndef soap_write___tns__blessUserWithId
#define soap_write___tns__blessUserWithId(soap, data) ( Annot::soap_serialize___tns__blessUserWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__blessUserWithId(soap, data, "-tns:blessUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__blessUserWithId * SOAP_FMAC4 soap_get___tns__blessUserWithId(struct soap*, struct __tns__blessUserWithId *, const char*, const char*);

#ifndef soap_read___tns__blessUserWithId
#define soap_read___tns__blessUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__blessUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__blessUserWithId * SOAP_FMAC2 soap_instantiate___tns__blessUserWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__blessUserWithId * soap_new___tns__blessUserWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__blessUserWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__blessUserWithId * soap_new_req___tns__blessUserWithId(struct soap *soap) { struct __tns__blessUserWithId *_p = soap_instantiate___tns__blessUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blessUserWithId(soap, _p); } return _p; }

inline struct __tns__blessUserWithId * soap_new_set___tns__blessUserWithId(struct soap *soap, tns__blessUserWithId *tns__blessUserWithId_) { struct __tns__blessUserWithId *_p = soap_instantiate___tns__blessUserWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blessUserWithId(soap, _p); _p->tns__blessUserWithId_ = tns__blessUserWithId_; } return _p; }

inline void soap_delete___tns__blessUserWithId(struct soap *soap, struct __tns__blessUserWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__blessUserWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__blessMediaTokenWithId
#define SOAP_TYPE_Annot___tns__blessMediaTokenWithId (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__blessMediaTokenWithId(struct soap*, struct __tns__blessMediaTokenWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__blessMediaTokenWithId(struct soap*, const struct __tns__blessMediaTokenWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__blessMediaTokenWithId(struct soap*, const char*, int, const struct __tns__blessMediaTokenWithId *, const char*);
SOAP_FMAC3 struct __tns__blessMediaTokenWithId * SOAP_FMAC4 soap_in___tns__blessMediaTokenWithId(struct soap*, const char*, struct __tns__blessMediaTokenWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__blessMediaTokenWithId(struct soap*, const struct __tns__blessMediaTokenWithId *, const char*, const char*);

#ifndef soap_write___tns__blessMediaTokenWithId
#define soap_write___tns__blessMediaTokenWithId(soap, data) ( Annot::soap_serialize___tns__blessMediaTokenWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__blessMediaTokenWithId(soap, data, "-tns:blessMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__blessMediaTokenWithId * SOAP_FMAC4 soap_get___tns__blessMediaTokenWithId(struct soap*, struct __tns__blessMediaTokenWithId *, const char*, const char*);

#ifndef soap_read___tns__blessMediaTokenWithId
#define soap_read___tns__blessMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__blessMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__blessMediaTokenWithId * SOAP_FMAC2 soap_instantiate___tns__blessMediaTokenWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__blessMediaTokenWithId * soap_new___tns__blessMediaTokenWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__blessMediaTokenWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__blessMediaTokenWithId * soap_new_req___tns__blessMediaTokenWithId(struct soap *soap) { struct __tns__blessMediaTokenWithId *_p = soap_instantiate___tns__blessMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blessMediaTokenWithId(soap, _p); } return _p; }

inline struct __tns__blessMediaTokenWithId * soap_new_set___tns__blessMediaTokenWithId(struct soap *soap, tns__blessMediaTokenWithId *tns__blessMediaTokenWithId_) { struct __tns__blessMediaTokenWithId *_p = soap_instantiate___tns__blessMediaTokenWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blessMediaTokenWithId(soap, _p); _p->tns__blessMediaTokenWithId_ = tns__blessMediaTokenWithId_; } return _p; }

inline void soap_delete___tns__blessMediaTokenWithId(struct soap *soap, struct __tns__blessMediaTokenWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__blessMediaTokenWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__blessMediaAnnotationWithId
#define SOAP_TYPE_Annot___tns__blessMediaAnnotationWithId (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__blessMediaAnnotationWithId(struct soap*, struct __tns__blessMediaAnnotationWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__blessMediaAnnotationWithId(struct soap*, const struct __tns__blessMediaAnnotationWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__blessMediaAnnotationWithId(struct soap*, const char*, int, const struct __tns__blessMediaAnnotationWithId *, const char*);
SOAP_FMAC3 struct __tns__blessMediaAnnotationWithId * SOAP_FMAC4 soap_in___tns__blessMediaAnnotationWithId(struct soap*, const char*, struct __tns__blessMediaAnnotationWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__blessMediaAnnotationWithId(struct soap*, const struct __tns__blessMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_write___tns__blessMediaAnnotationWithId
#define soap_write___tns__blessMediaAnnotationWithId(soap, data) ( Annot::soap_serialize___tns__blessMediaAnnotationWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__blessMediaAnnotationWithId(soap, data, "-tns:blessMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__blessMediaAnnotationWithId * SOAP_FMAC4 soap_get___tns__blessMediaAnnotationWithId(struct soap*, struct __tns__blessMediaAnnotationWithId *, const char*, const char*);

#ifndef soap_read___tns__blessMediaAnnotationWithId
#define soap_read___tns__blessMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__blessMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__blessMediaAnnotationWithId * SOAP_FMAC2 soap_instantiate___tns__blessMediaAnnotationWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__blessMediaAnnotationWithId * soap_new___tns__blessMediaAnnotationWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__blessMediaAnnotationWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__blessMediaAnnotationWithId * soap_new_req___tns__blessMediaAnnotationWithId(struct soap *soap) { struct __tns__blessMediaAnnotationWithId *_p = soap_instantiate___tns__blessMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blessMediaAnnotationWithId(soap, _p); } return _p; }

inline struct __tns__blessMediaAnnotationWithId * soap_new_set___tns__blessMediaAnnotationWithId(struct soap *soap, tns__blessMediaAnnotationWithId *tns__blessMediaAnnotationWithId_) { struct __tns__blessMediaAnnotationWithId *_p = soap_instantiate___tns__blessMediaAnnotationWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blessMediaAnnotationWithId(soap, _p); _p->tns__blessMediaAnnotationWithId_ = tns__blessMediaAnnotationWithId_; } return _p; }

inline void soap_delete___tns__blessMediaAnnotationWithId(struct soap *soap, struct __tns__blessMediaAnnotationWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__blessMediaAnnotationWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot___tns__blessMediaAliasWithId
#define SOAP_TYPE_Annot___tns__blessMediaAliasWithId (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__blessMediaAliasWithId(struct soap*, struct __tns__blessMediaAliasWithId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__blessMediaAliasWithId(struct soap*, const struct __tns__blessMediaAliasWithId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__blessMediaAliasWithId(struct soap*, const char*, int, const struct __tns__blessMediaAliasWithId *, const char*);
SOAP_FMAC3 struct __tns__blessMediaAliasWithId * SOAP_FMAC4 soap_in___tns__blessMediaAliasWithId(struct soap*, const char*, struct __tns__blessMediaAliasWithId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__blessMediaAliasWithId(struct soap*, const struct __tns__blessMediaAliasWithId *, const char*, const char*);

#ifndef soap_write___tns__blessMediaAliasWithId
#define soap_write___tns__blessMediaAliasWithId(soap, data) ( Annot::soap_serialize___tns__blessMediaAliasWithId(soap, data), soap_begin_send(soap) || Annot::soap_put___tns__blessMediaAliasWithId(soap, data, "-tns:blessMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __tns__blessMediaAliasWithId * SOAP_FMAC4 soap_get___tns__blessMediaAliasWithId(struct soap*, struct __tns__blessMediaAliasWithId *, const char*, const char*);

#ifndef soap_read___tns__blessMediaAliasWithId
#define soap_read___tns__blessMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get___tns__blessMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __tns__blessMediaAliasWithId * SOAP_FMAC2 soap_instantiate___tns__blessMediaAliasWithId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tns__blessMediaAliasWithId * soap_new___tns__blessMediaAliasWithId(struct soap *soap, int n = -1) { return soap_instantiate___tns__blessMediaAliasWithId(soap, n, NULL, NULL, NULL); }

inline struct __tns__blessMediaAliasWithId * soap_new_req___tns__blessMediaAliasWithId(struct soap *soap) { struct __tns__blessMediaAliasWithId *_p = soap_instantiate___tns__blessMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blessMediaAliasWithId(soap, _p); } return _p; }

inline struct __tns__blessMediaAliasWithId * soap_new_set___tns__blessMediaAliasWithId(struct soap *soap, tns__blessMediaAliasWithId *tns__blessMediaAliasWithId_) { struct __tns__blessMediaAliasWithId *_p = soap_instantiate___tns__blessMediaAliasWithId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tns__blessMediaAliasWithId(soap, _p); _p->tns__blessMediaAliasWithId_ = tns__blessMediaAliasWithId_; } return _p; }

inline void soap_delete___tns__blessMediaAliasWithId(struct soap *soap, struct __tns__blessMediaAliasWithId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__blessMediaAliasWithId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Annot_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_Annot_PointerToSOAP_ENV__Reason (330)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( Annot::soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Annot_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_Annot_PointerToSOAP_ENV__Detail (329)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( Annot::soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Annot_PointerToSOAP_ENV__Code
#define SOAP_TYPE_Annot_PointerToSOAP_ENV__Code (323)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( Annot::soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationUserIdWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationUserIdWithIdResponse (318)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, tns__updateMediaAnnotationUserIdWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, const char *, int, tns__updateMediaAnnotationUserIdWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__updateMediaAnnotationUserIdWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, const char*, tns__updateMediaAnnotationUserIdWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, tns__updateMediaAnnotationUserIdWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateMediaAnnotationUserIdWithIdResponse
#define soap_write_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(soap, data, "tns:updateMediaAnnotationUserIdWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationUserIdWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(struct soap*, tns__updateMediaAnnotationUserIdWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateMediaAnnotationUserIdWithIdResponse
#define soap_read_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateMediaAnnotationUserIdWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationUserIdWithId
#define SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationUserIdWithId (317)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateMediaAnnotationUserIdWithId(struct soap*, tns__updateMediaAnnotationUserIdWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateMediaAnnotationUserIdWithId(struct soap*, const char *, int, tns__updateMediaAnnotationUserIdWithId *const*, const char *);
SOAP_FMAC3 tns__updateMediaAnnotationUserIdWithId ** SOAP_FMAC4 soap_in_PointerTotns__updateMediaAnnotationUserIdWithId(struct soap*, const char*, tns__updateMediaAnnotationUserIdWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateMediaAnnotationUserIdWithId(struct soap*, tns__updateMediaAnnotationUserIdWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateMediaAnnotationUserIdWithId
#define soap_write_PointerTotns__updateMediaAnnotationUserIdWithId(soap, data) ( Annot::soap_serialize_PointerTotns__updateMediaAnnotationUserIdWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateMediaAnnotationUserIdWithId(soap, data, "tns:updateMediaAnnotationUserIdWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationUserIdWithId ** SOAP_FMAC4 soap_get_PointerTotns__updateMediaAnnotationUserIdWithId(struct soap*, tns__updateMediaAnnotationUserIdWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateMediaAnnotationUserIdWithId
#define soap_read_PointerTotns__updateMediaAnnotationUserIdWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateMediaAnnotationUserIdWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationTextWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationTextWithIdResponse (314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateMediaAnnotationTextWithIdResponse(struct soap*, tns__updateMediaAnnotationTextWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateMediaAnnotationTextWithIdResponse(struct soap*, const char *, int, tns__updateMediaAnnotationTextWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__updateMediaAnnotationTextWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__updateMediaAnnotationTextWithIdResponse(struct soap*, const char*, tns__updateMediaAnnotationTextWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateMediaAnnotationTextWithIdResponse(struct soap*, tns__updateMediaAnnotationTextWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateMediaAnnotationTextWithIdResponse
#define soap_write_PointerTotns__updateMediaAnnotationTextWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__updateMediaAnnotationTextWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateMediaAnnotationTextWithIdResponse(soap, data, "tns:updateMediaAnnotationTextWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationTextWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__updateMediaAnnotationTextWithIdResponse(struct soap*, tns__updateMediaAnnotationTextWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateMediaAnnotationTextWithIdResponse
#define soap_read_PointerTotns__updateMediaAnnotationTextWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateMediaAnnotationTextWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationTextWithId
#define SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationTextWithId (313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateMediaAnnotationTextWithId(struct soap*, tns__updateMediaAnnotationTextWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateMediaAnnotationTextWithId(struct soap*, const char *, int, tns__updateMediaAnnotationTextWithId *const*, const char *);
SOAP_FMAC3 tns__updateMediaAnnotationTextWithId ** SOAP_FMAC4 soap_in_PointerTotns__updateMediaAnnotationTextWithId(struct soap*, const char*, tns__updateMediaAnnotationTextWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateMediaAnnotationTextWithId(struct soap*, tns__updateMediaAnnotationTextWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateMediaAnnotationTextWithId
#define soap_write_PointerTotns__updateMediaAnnotationTextWithId(soap, data) ( Annot::soap_serialize_PointerTotns__updateMediaAnnotationTextWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateMediaAnnotationTextWithId(soap, data, "tns:updateMediaAnnotationTextWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationTextWithId ** SOAP_FMAC4 soap_get_PointerTotns__updateMediaAnnotationTextWithId(struct soap*, tns__updateMediaAnnotationTextWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateMediaAnnotationTextWithId
#define soap_read_PointerTotns__updateMediaAnnotationTextWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateMediaAnnotationTextWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationLanguageWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationLanguageWithIdResponse (310)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, tns__updateMediaAnnotationLanguageWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, const char *, int, tns__updateMediaAnnotationLanguageWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__updateMediaAnnotationLanguageWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, const char*, tns__updateMediaAnnotationLanguageWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, tns__updateMediaAnnotationLanguageWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateMediaAnnotationLanguageWithIdResponse
#define soap_write_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(soap, data, "tns:updateMediaAnnotationLanguageWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationLanguageWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(struct soap*, tns__updateMediaAnnotationLanguageWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateMediaAnnotationLanguageWithIdResponse
#define soap_read_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateMediaAnnotationLanguageWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationLanguageWithId
#define SOAP_TYPE_Annot_PointerTotns__updateMediaAnnotationLanguageWithId (309)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateMediaAnnotationLanguageWithId(struct soap*, tns__updateMediaAnnotationLanguageWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateMediaAnnotationLanguageWithId(struct soap*, const char *, int, tns__updateMediaAnnotationLanguageWithId *const*, const char *);
SOAP_FMAC3 tns__updateMediaAnnotationLanguageWithId ** SOAP_FMAC4 soap_in_PointerTotns__updateMediaAnnotationLanguageWithId(struct soap*, const char*, tns__updateMediaAnnotationLanguageWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateMediaAnnotationLanguageWithId(struct soap*, tns__updateMediaAnnotationLanguageWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateMediaAnnotationLanguageWithId
#define soap_write_PointerTotns__updateMediaAnnotationLanguageWithId(soap, data) ( Annot::soap_serialize_PointerTotns__updateMediaAnnotationLanguageWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateMediaAnnotationLanguageWithId(soap, data, "tns:updateMediaAnnotationLanguageWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateMediaAnnotationLanguageWithId ** SOAP_FMAC4 soap_get_PointerTotns__updateMediaAnnotationLanguageWithId(struct soap*, tns__updateMediaAnnotationLanguageWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateMediaAnnotationLanguageWithId
#define soap_read_PointerTotns__updateMediaAnnotationLanguageWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateMediaAnnotationLanguageWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateGameThreadResponse
#define SOAP_TYPE_Annot_PointerTotns__updateGameThreadResponse (306)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateGameThreadResponse(struct soap*, tns__updateGameThreadResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateGameThreadResponse(struct soap*, const char *, int, tns__updateGameThreadResponse *const*, const char *);
SOAP_FMAC3 tns__updateGameThreadResponse ** SOAP_FMAC4 soap_in_PointerTotns__updateGameThreadResponse(struct soap*, const char*, tns__updateGameThreadResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateGameThreadResponse(struct soap*, tns__updateGameThreadResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateGameThreadResponse
#define soap_write_PointerTotns__updateGameThreadResponse(soap, data) ( Annot::soap_serialize_PointerTotns__updateGameThreadResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateGameThreadResponse(soap, data, "tns:updateGameThreadResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateGameThreadResponse ** SOAP_FMAC4 soap_get_PointerTotns__updateGameThreadResponse(struct soap*, tns__updateGameThreadResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateGameThreadResponse
#define soap_read_PointerTotns__updateGameThreadResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateGameThreadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateGameThread
#define SOAP_TYPE_Annot_PointerTotns__updateGameThread (305)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateGameThread(struct soap*, tns__updateGameThread *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateGameThread(struct soap*, const char *, int, tns__updateGameThread *const*, const char *);
SOAP_FMAC3 tns__updateGameThread ** SOAP_FMAC4 soap_in_PointerTotns__updateGameThread(struct soap*, const char*, tns__updateGameThread **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateGameThread(struct soap*, tns__updateGameThread *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateGameThread
#define soap_write_PointerTotns__updateGameThread(soap, data) ( Annot::soap_serialize_PointerTotns__updateGameThread(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateGameThread(soap, data, "tns:updateGameThread", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateGameThread ** SOAP_FMAC4 soap_get_PointerTotns__updateGameThread(struct soap*, tns__updateGameThread **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateGameThread
#define soap_read_PointerTotns__updateGameThread(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateGameThread(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateGameHookTextWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__updateGameHookTextWithIdResponse (302)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateGameHookTextWithIdResponse(struct soap*, tns__updateGameHookTextWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateGameHookTextWithIdResponse(struct soap*, const char *, int, tns__updateGameHookTextWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__updateGameHookTextWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__updateGameHookTextWithIdResponse(struct soap*, const char*, tns__updateGameHookTextWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateGameHookTextWithIdResponse(struct soap*, tns__updateGameHookTextWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateGameHookTextWithIdResponse
#define soap_write_PointerTotns__updateGameHookTextWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__updateGameHookTextWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateGameHookTextWithIdResponse(soap, data, "tns:updateGameHookTextWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateGameHookTextWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__updateGameHookTextWithIdResponse(struct soap*, tns__updateGameHookTextWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateGameHookTextWithIdResponse
#define soap_read_PointerTotns__updateGameHookTextWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateGameHookTextWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__updateGameHookTextWithId
#define SOAP_TYPE_Annot_PointerTotns__updateGameHookTextWithId (301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__updateGameHookTextWithId(struct soap*, tns__updateGameHookTextWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__updateGameHookTextWithId(struct soap*, const char *, int, tns__updateGameHookTextWithId *const*, const char *);
SOAP_FMAC3 tns__updateGameHookTextWithId ** SOAP_FMAC4 soap_in_PointerTotns__updateGameHookTextWithId(struct soap*, const char*, tns__updateGameHookTextWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__updateGameHookTextWithId(struct soap*, tns__updateGameHookTextWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__updateGameHookTextWithId
#define soap_write_PointerTotns__updateGameHookTextWithId(soap, data) ( Annot::soap_serialize_PointerTotns__updateGameHookTextWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__updateGameHookTextWithId(soap, data, "tns:updateGameHookTextWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__updateGameHookTextWithId ** SOAP_FMAC4 soap_get_PointerTotns__updateGameHookTextWithId(struct soap*, tns__updateGameHookTextWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__updateGameHookTextWithId
#define soap_read_PointerTotns__updateGameHookTextWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__updateGameHookTextWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaTokenUrlResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaTokenUrlResponse (298)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaTokenUrlResponse(struct soap*, tns__submitMediaTokenUrlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaTokenUrlResponse(struct soap*, const char *, int, tns__submitMediaTokenUrlResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaTokenUrlResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaTokenUrlResponse(struct soap*, const char*, tns__submitMediaTokenUrlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaTokenUrlResponse(struct soap*, tns__submitMediaTokenUrlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaTokenUrlResponse
#define soap_write_PointerTotns__submitMediaTokenUrlResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaTokenUrlResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaTokenUrlResponse(soap, data, "tns:submitMediaTokenUrlResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenUrlResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaTokenUrlResponse(struct soap*, tns__submitMediaTokenUrlResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaTokenUrlResponse
#define soap_read_PointerTotns__submitMediaTokenUrlResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaTokenUrlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaTokenUrl
#define SOAP_TYPE_Annot_PointerTotns__submitMediaTokenUrl (297)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaTokenUrl(struct soap*, tns__submitMediaTokenUrl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaTokenUrl(struct soap*, const char *, int, tns__submitMediaTokenUrl *const*, const char *);
SOAP_FMAC3 tns__submitMediaTokenUrl ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaTokenUrl(struct soap*, const char*, tns__submitMediaTokenUrl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaTokenUrl(struct soap*, tns__submitMediaTokenUrl *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaTokenUrl
#define soap_write_PointerTotns__submitMediaTokenUrl(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaTokenUrl(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaTokenUrl(soap, data, "tns:submitMediaTokenUrl", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenUrl ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaTokenUrl(struct soap*, tns__submitMediaTokenUrl **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaTokenUrl
#define soap_read_PointerTotns__submitMediaTokenUrl(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaTokenUrl(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaTokenDigestResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaTokenDigestResponse (294)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaTokenDigestResponse(struct soap*, tns__submitMediaTokenDigestResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaTokenDigestResponse(struct soap*, const char *, int, tns__submitMediaTokenDigestResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaTokenDigestResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaTokenDigestResponse(struct soap*, const char*, tns__submitMediaTokenDigestResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaTokenDigestResponse(struct soap*, tns__submitMediaTokenDigestResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaTokenDigestResponse
#define soap_write_PointerTotns__submitMediaTokenDigestResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaTokenDigestResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaTokenDigestResponse(soap, data, "tns:submitMediaTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenDigestResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaTokenDigestResponse(struct soap*, tns__submitMediaTokenDigestResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaTokenDigestResponse
#define soap_read_PointerTotns__submitMediaTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaTokenDigest
#define SOAP_TYPE_Annot_PointerTotns__submitMediaTokenDigest (293)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaTokenDigest(struct soap*, tns__submitMediaTokenDigest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaTokenDigest(struct soap*, const char *, int, tns__submitMediaTokenDigest *const*, const char *);
SOAP_FMAC3 tns__submitMediaTokenDigest ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaTokenDigest(struct soap*, const char*, tns__submitMediaTokenDigest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaTokenDigest(struct soap*, tns__submitMediaTokenDigest *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaTokenDigest
#define soap_write_PointerTotns__submitMediaTokenDigest(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaTokenDigest(soap, data, "tns:submitMediaTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenDigest ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaTokenDigest(struct soap*, tns__submitMediaTokenDigest **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaTokenDigest
#define soap_read_PointerTotns__submitMediaTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaTokenResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaTokenResponse (290)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaTokenResponse(struct soap*, tns__submitMediaTokenResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaTokenResponse(struct soap*, const char *, int, tns__submitMediaTokenResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaTokenResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaTokenResponse(struct soap*, const char*, tns__submitMediaTokenResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaTokenResponse(struct soap*, tns__submitMediaTokenResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaTokenResponse
#define soap_write_PointerTotns__submitMediaTokenResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaTokenResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaTokenResponse(soap, data, "tns:submitMediaTokenResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaTokenResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaTokenResponse(struct soap*, tns__submitMediaTokenResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaTokenResponse
#define soap_read_PointerTotns__submitMediaTokenResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaTokenResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaToken
#define SOAP_TYPE_Annot_PointerTotns__submitMediaToken (289)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaToken(struct soap*, tns__submitMediaToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaToken(struct soap*, const char *, int, tns__submitMediaToken *const*, const char *);
SOAP_FMAC3 tns__submitMediaToken ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaToken(struct soap*, const char*, tns__submitMediaToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaToken(struct soap*, tns__submitMediaToken *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaToken
#define soap_write_PointerTotns__submitMediaToken(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaToken(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaToken(soap, data, "tns:submitMediaToken", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaToken ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaToken(struct soap*, tns__submitMediaToken **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaToken
#define soap_read_PointerTotns__submitMediaToken(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaToken(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse (286)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, tns__submitMediaAnnotationTextWithTokenIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, const char *, int, tns__submitMediaAnnotationTextWithTokenIdResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaAnnotationTextWithTokenIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, const char*, tns__submitMediaAnnotationTextWithTokenIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, tns__submitMediaAnnotationTextWithTokenIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse
#define soap_write_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(soap, data, "tns:submitMediaAnnotationTextWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationTextWithTokenIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(struct soap*, tns__submitMediaAnnotationTextWithTokenIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse
#define soap_read_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAnnotationTextWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationTextWithTokenId
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationTextWithTokenId (285)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAnnotationTextWithTokenId(struct soap*, tns__submitMediaAnnotationTextWithTokenId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAnnotationTextWithTokenId(struct soap*, const char *, int, tns__submitMediaAnnotationTextWithTokenId *const*, const char *);
SOAP_FMAC3 tns__submitMediaAnnotationTextWithTokenId ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAnnotationTextWithTokenId(struct soap*, const char*, tns__submitMediaAnnotationTextWithTokenId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAnnotationTextWithTokenId(struct soap*, tns__submitMediaAnnotationTextWithTokenId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAnnotationTextWithTokenId
#define soap_write_PointerTotns__submitMediaAnnotationTextWithTokenId(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAnnotationTextWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAnnotationTextWithTokenId(soap, data, "tns:submitMediaAnnotationTextWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationTextWithTokenId ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAnnotationTextWithTokenId(struct soap*, tns__submitMediaAnnotationTextWithTokenId **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAnnotationTextWithTokenId
#define soap_read_PointerTotns__submitMediaAnnotationTextWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAnnotationTextWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse (282)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, tns__submitMediaAnnotationTextAndTokenDigestResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, const char *, int, tns__submitMediaAnnotationTextAndTokenDigestResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaAnnotationTextAndTokenDigestResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, const char*, tns__submitMediaAnnotationTextAndTokenDigestResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, tns__submitMediaAnnotationTextAndTokenDigestResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse
#define soap_write_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(soap, data, "tns:submitMediaAnnotationTextAndTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationTextAndTokenDigestResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(struct soap*, tns__submitMediaAnnotationTextAndTokenDigestResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse
#define soap_read_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAnnotationTextAndTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationTextAndTokenDigest
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationTextAndTokenDigest (281)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAnnotationTextAndTokenDigest(struct soap*, tns__submitMediaAnnotationTextAndTokenDigest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAnnotationTextAndTokenDigest(struct soap*, const char *, int, tns__submitMediaAnnotationTextAndTokenDigest *const*, const char *);
SOAP_FMAC3 tns__submitMediaAnnotationTextAndTokenDigest ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAnnotationTextAndTokenDigest(struct soap*, const char*, tns__submitMediaAnnotationTextAndTokenDigest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAnnotationTextAndTokenDigest(struct soap*, tns__submitMediaAnnotationTextAndTokenDigest *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAnnotationTextAndTokenDigest
#define soap_write_PointerTotns__submitMediaAnnotationTextAndTokenDigest(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAnnotationTextAndTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAnnotationTextAndTokenDigest(soap, data, "tns:submitMediaAnnotationTextAndTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationTextAndTokenDigest ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAnnotationTextAndTokenDigest(struct soap*, tns__submitMediaAnnotationTextAndTokenDigest **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAnnotationTextAndTokenDigest
#define soap_read_PointerTotns__submitMediaAnnotationTextAndTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAnnotationTextAndTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotationResponse (278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAnnotationResponse(struct soap*, tns__submitMediaAnnotationResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAnnotationResponse(struct soap*, const char *, int, tns__submitMediaAnnotationResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaAnnotationResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAnnotationResponse(struct soap*, const char*, tns__submitMediaAnnotationResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAnnotationResponse(struct soap*, tns__submitMediaAnnotationResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAnnotationResponse
#define soap_write_PointerTotns__submitMediaAnnotationResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAnnotationResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAnnotationResponse(soap, data, "tns:submitMediaAnnotationResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotationResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAnnotationResponse(struct soap*, tns__submitMediaAnnotationResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAnnotationResponse
#define soap_read_PointerTotns__submitMediaAnnotationResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAnnotationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotation
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAnnotation (277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAnnotation(struct soap*, tns__submitMediaAnnotation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAnnotation(struct soap*, const char *, int, tns__submitMediaAnnotation *const*, const char *);
SOAP_FMAC3 tns__submitMediaAnnotation ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAnnotation(struct soap*, const char*, tns__submitMediaAnnotation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAnnotation(struct soap*, tns__submitMediaAnnotation *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAnnotation
#define soap_write_PointerTotns__submitMediaAnnotation(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAnnotation(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAnnotation(soap, data, "tns:submitMediaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAnnotation ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAnnotation(struct soap*, tns__submitMediaAnnotation **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAnnotation
#define soap_read_PointerTotns__submitMediaAnnotation(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAliasTextWithTokenIdResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAliasTextWithTokenIdResponse (274)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAliasTextWithTokenIdResponse(struct soap*, tns__submitMediaAliasTextWithTokenIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAliasTextWithTokenIdResponse(struct soap*, const char *, int, tns__submitMediaAliasTextWithTokenIdResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaAliasTextWithTokenIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAliasTextWithTokenIdResponse(struct soap*, const char*, tns__submitMediaAliasTextWithTokenIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAliasTextWithTokenIdResponse(struct soap*, tns__submitMediaAliasTextWithTokenIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAliasTextWithTokenIdResponse
#define soap_write_PointerTotns__submitMediaAliasTextWithTokenIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAliasTextWithTokenIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAliasTextWithTokenIdResponse(soap, data, "tns:submitMediaAliasTextWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasTextWithTokenIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAliasTextWithTokenIdResponse(struct soap*, tns__submitMediaAliasTextWithTokenIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAliasTextWithTokenIdResponse
#define soap_read_PointerTotns__submitMediaAliasTextWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAliasTextWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAliasTextWithTokenId
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAliasTextWithTokenId (273)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAliasTextWithTokenId(struct soap*, tns__submitMediaAliasTextWithTokenId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAliasTextWithTokenId(struct soap*, const char *, int, tns__submitMediaAliasTextWithTokenId *const*, const char *);
SOAP_FMAC3 tns__submitMediaAliasTextWithTokenId ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAliasTextWithTokenId(struct soap*, const char*, tns__submitMediaAliasTextWithTokenId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAliasTextWithTokenId(struct soap*, tns__submitMediaAliasTextWithTokenId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAliasTextWithTokenId
#define soap_write_PointerTotns__submitMediaAliasTextWithTokenId(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAliasTextWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAliasTextWithTokenId(soap, data, "tns:submitMediaAliasTextWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasTextWithTokenId ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAliasTextWithTokenId(struct soap*, tns__submitMediaAliasTextWithTokenId **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAliasTextWithTokenId
#define soap_read_PointerTotns__submitMediaAliasTextWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAliasTextWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAliasTextAndTokenDigestResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAliasTextAndTokenDigestResponse (270)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, tns__submitMediaAliasTextAndTokenDigestResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, const char *, int, tns__submitMediaAliasTextAndTokenDigestResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaAliasTextAndTokenDigestResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, const char*, tns__submitMediaAliasTextAndTokenDigestResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, tns__submitMediaAliasTextAndTokenDigestResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAliasTextAndTokenDigestResponse
#define soap_write_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(soap, data, "tns:submitMediaAliasTextAndTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasTextAndTokenDigestResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(struct soap*, tns__submitMediaAliasTextAndTokenDigestResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAliasTextAndTokenDigestResponse
#define soap_read_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAliasTextAndTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAliasTextAndTokenDigest
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAliasTextAndTokenDigest (269)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAliasTextAndTokenDigest(struct soap*, tns__submitMediaAliasTextAndTokenDigest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAliasTextAndTokenDigest(struct soap*, const char *, int, tns__submitMediaAliasTextAndTokenDigest *const*, const char *);
SOAP_FMAC3 tns__submitMediaAliasTextAndTokenDigest ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAliasTextAndTokenDigest(struct soap*, const char*, tns__submitMediaAliasTextAndTokenDigest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAliasTextAndTokenDigest(struct soap*, tns__submitMediaAliasTextAndTokenDigest *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAliasTextAndTokenDigest
#define soap_write_PointerTotns__submitMediaAliasTextAndTokenDigest(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAliasTextAndTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAliasTextAndTokenDigest(soap, data, "tns:submitMediaAliasTextAndTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasTextAndTokenDigest ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAliasTextAndTokenDigest(struct soap*, tns__submitMediaAliasTextAndTokenDigest **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAliasTextAndTokenDigest
#define soap_read_PointerTotns__submitMediaAliasTextAndTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAliasTextAndTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAliasResponse
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAliasResponse (266)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAliasResponse(struct soap*, tns__submitMediaAliasResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAliasResponse(struct soap*, const char *, int, tns__submitMediaAliasResponse *const*, const char *);
SOAP_FMAC3 tns__submitMediaAliasResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAliasResponse(struct soap*, const char*, tns__submitMediaAliasResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAliasResponse(struct soap*, tns__submitMediaAliasResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAliasResponse
#define soap_write_PointerTotns__submitMediaAliasResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAliasResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAliasResponse(soap, data, "tns:submitMediaAliasResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAliasResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAliasResponse(struct soap*, tns__submitMediaAliasResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAliasResponse
#define soap_read_PointerTotns__submitMediaAliasResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAliasResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitMediaAlias
#define SOAP_TYPE_Annot_PointerTotns__submitMediaAlias (265)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitMediaAlias(struct soap*, tns__submitMediaAlias *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitMediaAlias(struct soap*, const char *, int, tns__submitMediaAlias *const*, const char *);
SOAP_FMAC3 tns__submitMediaAlias ** SOAP_FMAC4 soap_in_PointerTotns__submitMediaAlias(struct soap*, const char*, tns__submitMediaAlias **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitMediaAlias(struct soap*, tns__submitMediaAlias *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitMediaAlias
#define soap_write_PointerTotns__submitMediaAlias(soap, data) ( Annot::soap_serialize_PointerTotns__submitMediaAlias(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitMediaAlias(soap, data, "tns:submitMediaAlias", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitMediaAlias ** SOAP_FMAC4 soap_get_PointerTotns__submitMediaAlias(struct soap*, tns__submitMediaAlias **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitMediaAlias
#define soap_read_PointerTotns__submitMediaAlias(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitMediaAlias(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitGameThreadResponse
#define SOAP_TYPE_Annot_PointerTotns__submitGameThreadResponse (262)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitGameThreadResponse(struct soap*, tns__submitGameThreadResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitGameThreadResponse(struct soap*, const char *, int, tns__submitGameThreadResponse *const*, const char *);
SOAP_FMAC3 tns__submitGameThreadResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitGameThreadResponse(struct soap*, const char*, tns__submitGameThreadResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitGameThreadResponse(struct soap*, tns__submitGameThreadResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitGameThreadResponse
#define soap_write_PointerTotns__submitGameThreadResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitGameThreadResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitGameThreadResponse(soap, data, "tns:submitGameThreadResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitGameThreadResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitGameThreadResponse(struct soap*, tns__submitGameThreadResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitGameThreadResponse
#define soap_read_PointerTotns__submitGameThreadResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitGameThreadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitGameThread
#define SOAP_TYPE_Annot_PointerTotns__submitGameThread (261)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitGameThread(struct soap*, tns__submitGameThread *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitGameThread(struct soap*, const char *, int, tns__submitGameThread *const*, const char *);
SOAP_FMAC3 tns__submitGameThread ** SOAP_FMAC4 soap_in_PointerTotns__submitGameThread(struct soap*, const char*, tns__submitGameThread **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitGameThread(struct soap*, tns__submitGameThread *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitGameThread
#define soap_write_PointerTotns__submitGameThread(soap, data) ( Annot::soap_serialize_PointerTotns__submitGameThread(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitGameThread(soap, data, "tns:submitGameThread", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitGameThread ** SOAP_FMAC4 soap_get_PointerTotns__submitGameThread(struct soap*, tns__submitGameThread **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitGameThread
#define soap_read_PointerTotns__submitGameThread(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitGameThread(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitGameHookResponse
#define SOAP_TYPE_Annot_PointerTotns__submitGameHookResponse (258)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitGameHookResponse(struct soap*, tns__submitGameHookResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitGameHookResponse(struct soap*, const char *, int, tns__submitGameHookResponse *const*, const char *);
SOAP_FMAC3 tns__submitGameHookResponse ** SOAP_FMAC4 soap_in_PointerTotns__submitGameHookResponse(struct soap*, const char*, tns__submitGameHookResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitGameHookResponse(struct soap*, tns__submitGameHookResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitGameHookResponse
#define soap_write_PointerTotns__submitGameHookResponse(soap, data) ( Annot::soap_serialize_PointerTotns__submitGameHookResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitGameHookResponse(soap, data, "tns:submitGameHookResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitGameHookResponse ** SOAP_FMAC4 soap_get_PointerTotns__submitGameHookResponse(struct soap*, tns__submitGameHookResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitGameHookResponse
#define soap_read_PointerTotns__submitGameHookResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitGameHookResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__submitGameHook
#define SOAP_TYPE_Annot_PointerTotns__submitGameHook (257)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__submitGameHook(struct soap*, tns__submitGameHook *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__submitGameHook(struct soap*, const char *, int, tns__submitGameHook *const*, const char *);
SOAP_FMAC3 tns__submitGameHook ** SOAP_FMAC4 soap_in_PointerTotns__submitGameHook(struct soap*, const char*, tns__submitGameHook **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__submitGameHook(struct soap*, tns__submitGameHook *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__submitGameHook
#define soap_write_PointerTotns__submitGameHook(soap, data) ( Annot::soap_serialize_PointerTotns__submitGameHook(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__submitGameHook(soap, data, "tns:submitGameHook", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__submitGameHook ** SOAP_FMAC4 soap_get_PointerTotns__submitGameHook(struct soap*, tns__submitGameHook **, const char*, const char*);

#ifndef soap_read_PointerTotns__submitGameHook
#define soap_read_PointerTotns__submitGameHook(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__submitGameHook(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__setUserLanguageResponse
#define SOAP_TYPE_Annot_PointerTotns__setUserLanguageResponse (254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__setUserLanguageResponse(struct soap*, tns__setUserLanguageResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__setUserLanguageResponse(struct soap*, const char *, int, tns__setUserLanguageResponse *const*, const char *);
SOAP_FMAC3 tns__setUserLanguageResponse ** SOAP_FMAC4 soap_in_PointerTotns__setUserLanguageResponse(struct soap*, const char*, tns__setUserLanguageResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__setUserLanguageResponse(struct soap*, tns__setUserLanguageResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__setUserLanguageResponse
#define soap_write_PointerTotns__setUserLanguageResponse(soap, data) ( Annot::soap_serialize_PointerTotns__setUserLanguageResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__setUserLanguageResponse(soap, data, "tns:setUserLanguageResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__setUserLanguageResponse ** SOAP_FMAC4 soap_get_PointerTotns__setUserLanguageResponse(struct soap*, tns__setUserLanguageResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__setUserLanguageResponse
#define soap_read_PointerTotns__setUserLanguageResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__setUserLanguageResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__setUserLanguage
#define SOAP_TYPE_Annot_PointerTotns__setUserLanguage (253)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__setUserLanguage(struct soap*, tns__setUserLanguage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__setUserLanguage(struct soap*, const char *, int, tns__setUserLanguage *const*, const char *);
SOAP_FMAC3 tns__setUserLanguage ** SOAP_FMAC4 soap_in_PointerTotns__setUserLanguage(struct soap*, const char*, tns__setUserLanguage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__setUserLanguage(struct soap*, tns__setUserLanguage *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__setUserLanguage
#define soap_write_PointerTotns__setUserLanguage(soap, data) ( Annot::soap_serialize_PointerTotns__setUserLanguage(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__setUserLanguage(soap, data, "tns:setUserLanguage", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__setUserLanguage ** SOAP_FMAC4 soap_get_PointerTotns__setUserLanguage(struct soap*, tns__setUserLanguage **, const char*, const char*);

#ifndef soap_read_PointerTotns__setUserLanguage
#define soap_read_PointerTotns__setUserLanguage(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__setUserLanguage(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__setUserAnonymousResponse
#define SOAP_TYPE_Annot_PointerTotns__setUserAnonymousResponse (250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__setUserAnonymousResponse(struct soap*, tns__setUserAnonymousResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__setUserAnonymousResponse(struct soap*, const char *, int, tns__setUserAnonymousResponse *const*, const char *);
SOAP_FMAC3 tns__setUserAnonymousResponse ** SOAP_FMAC4 soap_in_PointerTotns__setUserAnonymousResponse(struct soap*, const char*, tns__setUserAnonymousResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__setUserAnonymousResponse(struct soap*, tns__setUserAnonymousResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__setUserAnonymousResponse
#define soap_write_PointerTotns__setUserAnonymousResponse(soap, data) ( Annot::soap_serialize_PointerTotns__setUserAnonymousResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__setUserAnonymousResponse(soap, data, "tns:setUserAnonymousResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__setUserAnonymousResponse ** SOAP_FMAC4 soap_get_PointerTotns__setUserAnonymousResponse(struct soap*, tns__setUserAnonymousResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__setUserAnonymousResponse
#define soap_read_PointerTotns__setUserAnonymousResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__setUserAnonymousResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__setUserAnonymous
#define SOAP_TYPE_Annot_PointerTotns__setUserAnonymous (249)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__setUserAnonymous(struct soap*, tns__setUserAnonymous *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__setUserAnonymous(struct soap*, const char *, int, tns__setUserAnonymous *const*, const char *);
SOAP_FMAC3 tns__setUserAnonymous ** SOAP_FMAC4 soap_in_PointerTotns__setUserAnonymous(struct soap*, const char*, tns__setUserAnonymous **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__setUserAnonymous(struct soap*, tns__setUserAnonymous *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__setUserAnonymous
#define soap_write_PointerTotns__setUserAnonymous(soap, data) ( Annot::soap_serialize_PointerTotns__setUserAnonymous(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__setUserAnonymous(soap, data, "tns:setUserAnonymous", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__setUserAnonymous ** SOAP_FMAC4 soap_get_PointerTotns__setUserAnonymous(struct soap*, tns__setUserAnonymous **, const char*, const char*);

#ifndef soap_read_PointerTotns__setUserAnonymous
#define soap_read_PointerTotns__setUserAnonymous(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__setUserAnonymous(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse
#define SOAP_TYPE_Annot_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse (246)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, tns__selectRelatedMediaAnnotationsWithTokenIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, const char *, int, tns__selectRelatedMediaAnnotationsWithTokenIdResponse *const*, const char *);
SOAP_FMAC3 tns__selectRelatedMediaAnnotationsWithTokenIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, const char*, tns__selectRelatedMediaAnnotationsWithTokenIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, tns__selectRelatedMediaAnnotationsWithTokenIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse
#define soap_write_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, data, "tns:selectRelatedMediaAnnotationsWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectRelatedMediaAnnotationsWithTokenIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(struct soap*, tns__selectRelatedMediaAnnotationsWithTokenIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse
#define soap_read_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectRelatedMediaAnnotationsWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectRelatedMediaAnnotationsWithTokenId
#define SOAP_TYPE_Annot_PointerTotns__selectRelatedMediaAnnotationsWithTokenId (245)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, tns__selectRelatedMediaAnnotationsWithTokenId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, const char *, int, tns__selectRelatedMediaAnnotationsWithTokenId *const*, const char *);
SOAP_FMAC3 tns__selectRelatedMediaAnnotationsWithTokenId ** SOAP_FMAC4 soap_in_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, const char*, tns__selectRelatedMediaAnnotationsWithTokenId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, tns__selectRelatedMediaAnnotationsWithTokenId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectRelatedMediaAnnotationsWithTokenId
#define soap_write_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(soap, data) ( Annot::soap_serialize_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(soap, data, "tns:selectRelatedMediaAnnotationsWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectRelatedMediaAnnotationsWithTokenId ** SOAP_FMAC4 soap_get_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(struct soap*, tns__selectRelatedMediaAnnotationsWithTokenId **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectRelatedMediaAnnotationsWithTokenId
#define soap_read_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectRelatedMediaAnnotationsWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse
#define SOAP_TYPE_Annot_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse (242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, tns__selectRelatedMediaAliasesWithTokenIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, const char *, int, tns__selectRelatedMediaAliasesWithTokenIdResponse *const*, const char *);
SOAP_FMAC3 tns__selectRelatedMediaAliasesWithTokenIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, const char*, tns__selectRelatedMediaAliasesWithTokenIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, tns__selectRelatedMediaAliasesWithTokenIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse
#define soap_write_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(soap, data, "tns:selectRelatedMediaAliasesWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectRelatedMediaAliasesWithTokenIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(struct soap*, tns__selectRelatedMediaAliasesWithTokenIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse
#define soap_read_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectRelatedMediaAliasesWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectRelatedMediaAliasesWithTokenId
#define SOAP_TYPE_Annot_PointerTotns__selectRelatedMediaAliasesWithTokenId (241)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectRelatedMediaAliasesWithTokenId(struct soap*, tns__selectRelatedMediaAliasesWithTokenId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectRelatedMediaAliasesWithTokenId(struct soap*, const char *, int, tns__selectRelatedMediaAliasesWithTokenId *const*, const char *);
SOAP_FMAC3 tns__selectRelatedMediaAliasesWithTokenId ** SOAP_FMAC4 soap_in_PointerTotns__selectRelatedMediaAliasesWithTokenId(struct soap*, const char*, tns__selectRelatedMediaAliasesWithTokenId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectRelatedMediaAliasesWithTokenId(struct soap*, tns__selectRelatedMediaAliasesWithTokenId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectRelatedMediaAliasesWithTokenId
#define soap_write_PointerTotns__selectRelatedMediaAliasesWithTokenId(soap, data) ( Annot::soap_serialize_PointerTotns__selectRelatedMediaAliasesWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectRelatedMediaAliasesWithTokenId(soap, data, "tns:selectRelatedMediaAliasesWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectRelatedMediaAliasesWithTokenId ** SOAP_FMAC4 soap_get_PointerTotns__selectRelatedMediaAliasesWithTokenId(struct soap*, tns__selectRelatedMediaAliasesWithTokenId **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectRelatedMediaAliasesWithTokenId
#define soap_read_PointerTotns__selectRelatedMediaAliasesWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectRelatedMediaAliasesWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaTokenWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__selectMediaTokenWithIdResponse (238)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaTokenWithIdResponse(struct soap*, tns__selectMediaTokenWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaTokenWithIdResponse(struct soap*, const char *, int, tns__selectMediaTokenWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__selectMediaTokenWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaTokenWithIdResponse(struct soap*, const char*, tns__selectMediaTokenWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaTokenWithIdResponse(struct soap*, tns__selectMediaTokenWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaTokenWithIdResponse
#define soap_write_PointerTotns__selectMediaTokenWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaTokenWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaTokenWithIdResponse(soap, data, "tns:selectMediaTokenWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaTokenWithIdResponse(struct soap*, tns__selectMediaTokenWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaTokenWithIdResponse
#define soap_read_PointerTotns__selectMediaTokenWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaTokenWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaTokenWithId
#define SOAP_TYPE_Annot_PointerTotns__selectMediaTokenWithId (237)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaTokenWithId(struct soap*, tns__selectMediaTokenWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaTokenWithId(struct soap*, const char *, int, tns__selectMediaTokenWithId *const*, const char *);
SOAP_FMAC3 tns__selectMediaTokenWithId ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaTokenWithId(struct soap*, const char*, tns__selectMediaTokenWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaTokenWithId(struct soap*, tns__selectMediaTokenWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaTokenWithId
#define soap_write_PointerTotns__selectMediaTokenWithId(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaTokenWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaTokenWithId(soap, data, "tns:selectMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenWithId ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaTokenWithId(struct soap*, tns__selectMediaTokenWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaTokenWithId
#define soap_read_PointerTotns__selectMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaTokenWithDigestResponse
#define SOAP_TYPE_Annot_PointerTotns__selectMediaTokenWithDigestResponse (234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaTokenWithDigestResponse(struct soap*, tns__selectMediaTokenWithDigestResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaTokenWithDigestResponse(struct soap*, const char *, int, tns__selectMediaTokenWithDigestResponse *const*, const char *);
SOAP_FMAC3 tns__selectMediaTokenWithDigestResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaTokenWithDigestResponse(struct soap*, const char*, tns__selectMediaTokenWithDigestResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaTokenWithDigestResponse(struct soap*, tns__selectMediaTokenWithDigestResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaTokenWithDigestResponse
#define soap_write_PointerTotns__selectMediaTokenWithDigestResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaTokenWithDigestResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaTokenWithDigestResponse(soap, data, "tns:selectMediaTokenWithDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenWithDigestResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaTokenWithDigestResponse(struct soap*, tns__selectMediaTokenWithDigestResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaTokenWithDigestResponse
#define soap_read_PointerTotns__selectMediaTokenWithDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaTokenWithDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaTokenWithDigest
#define SOAP_TYPE_Annot_PointerTotns__selectMediaTokenWithDigest (233)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaTokenWithDigest(struct soap*, tns__selectMediaTokenWithDigest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaTokenWithDigest(struct soap*, const char *, int, tns__selectMediaTokenWithDigest *const*, const char *);
SOAP_FMAC3 tns__selectMediaTokenWithDigest ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaTokenWithDigest(struct soap*, const char*, tns__selectMediaTokenWithDigest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaTokenWithDigest(struct soap*, tns__selectMediaTokenWithDigest *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaTokenWithDigest
#define soap_write_PointerTotns__selectMediaTokenWithDigest(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaTokenWithDigest(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaTokenWithDigest(soap, data, "tns:selectMediaTokenWithDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenWithDigest ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaTokenWithDigest(struct soap*, tns__selectMediaTokenWithDigest **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaTokenWithDigest
#define soap_read_PointerTotns__selectMediaTokenWithDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaTokenWithDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaTokenIdWithUrlResponse
#define SOAP_TYPE_Annot_PointerTotns__selectMediaTokenIdWithUrlResponse (230)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaTokenIdWithUrlResponse(struct soap*, tns__selectMediaTokenIdWithUrlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaTokenIdWithUrlResponse(struct soap*, const char *, int, tns__selectMediaTokenIdWithUrlResponse *const*, const char *);
SOAP_FMAC3 tns__selectMediaTokenIdWithUrlResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaTokenIdWithUrlResponse(struct soap*, const char*, tns__selectMediaTokenIdWithUrlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaTokenIdWithUrlResponse(struct soap*, tns__selectMediaTokenIdWithUrlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaTokenIdWithUrlResponse
#define soap_write_PointerTotns__selectMediaTokenIdWithUrlResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaTokenIdWithUrlResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaTokenIdWithUrlResponse(soap, data, "tns:selectMediaTokenIdWithUrlResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenIdWithUrlResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaTokenIdWithUrlResponse(struct soap*, tns__selectMediaTokenIdWithUrlResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaTokenIdWithUrlResponse
#define soap_read_PointerTotns__selectMediaTokenIdWithUrlResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaTokenIdWithUrlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaTokenIdWithUrl
#define SOAP_TYPE_Annot_PointerTotns__selectMediaTokenIdWithUrl (229)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaTokenIdWithUrl(struct soap*, tns__selectMediaTokenIdWithUrl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaTokenIdWithUrl(struct soap*, const char *, int, tns__selectMediaTokenIdWithUrl *const*, const char *);
SOAP_FMAC3 tns__selectMediaTokenIdWithUrl ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaTokenIdWithUrl(struct soap*, const char*, tns__selectMediaTokenIdWithUrl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaTokenIdWithUrl(struct soap*, tns__selectMediaTokenIdWithUrl *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaTokenIdWithUrl
#define soap_write_PointerTotns__selectMediaTokenIdWithUrl(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaTokenIdWithUrl(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaTokenIdWithUrl(soap, data, "tns:selectMediaTokenIdWithUrl", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenIdWithUrl ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaTokenIdWithUrl(struct soap*, tns__selectMediaTokenIdWithUrl **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaTokenIdWithUrl
#define soap_read_PointerTotns__selectMediaTokenIdWithUrl(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaTokenIdWithUrl(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaTokenIdWithDigestResponse
#define SOAP_TYPE_Annot_PointerTotns__selectMediaTokenIdWithDigestResponse (226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaTokenIdWithDigestResponse(struct soap*, tns__selectMediaTokenIdWithDigestResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaTokenIdWithDigestResponse(struct soap*, const char *, int, tns__selectMediaTokenIdWithDigestResponse *const*, const char *);
SOAP_FMAC3 tns__selectMediaTokenIdWithDigestResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaTokenIdWithDigestResponse(struct soap*, const char*, tns__selectMediaTokenIdWithDigestResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaTokenIdWithDigestResponse(struct soap*, tns__selectMediaTokenIdWithDigestResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaTokenIdWithDigestResponse
#define soap_write_PointerTotns__selectMediaTokenIdWithDigestResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaTokenIdWithDigestResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaTokenIdWithDigestResponse(soap, data, "tns:selectMediaTokenIdWithDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenIdWithDigestResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaTokenIdWithDigestResponse(struct soap*, tns__selectMediaTokenIdWithDigestResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaTokenIdWithDigestResponse
#define soap_read_PointerTotns__selectMediaTokenIdWithDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaTokenIdWithDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaTokenIdWithDigest
#define SOAP_TYPE_Annot_PointerTotns__selectMediaTokenIdWithDigest (225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaTokenIdWithDigest(struct soap*, tns__selectMediaTokenIdWithDigest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaTokenIdWithDigest(struct soap*, const char *, int, tns__selectMediaTokenIdWithDigest *const*, const char *);
SOAP_FMAC3 tns__selectMediaTokenIdWithDigest ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaTokenIdWithDigest(struct soap*, const char*, tns__selectMediaTokenIdWithDigest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaTokenIdWithDigest(struct soap*, tns__selectMediaTokenIdWithDigest *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaTokenIdWithDigest
#define soap_write_PointerTotns__selectMediaTokenIdWithDigest(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaTokenIdWithDigest(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaTokenIdWithDigest(soap, data, "tns:selectMediaTokenIdWithDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaTokenIdWithDigest ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaTokenIdWithDigest(struct soap*, tns__selectMediaTokenIdWithDigest **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaTokenIdWithDigest
#define soap_read_PointerTotns__selectMediaTokenIdWithDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaTokenIdWithDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaAnnotationsWithTokenIdResponse
#define SOAP_TYPE_Annot_PointerTotns__selectMediaAnnotationsWithTokenIdResponse (222)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, tns__selectMediaAnnotationsWithTokenIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, const char *, int, tns__selectMediaAnnotationsWithTokenIdResponse *const*, const char *);
SOAP_FMAC3 tns__selectMediaAnnotationsWithTokenIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, const char*, tns__selectMediaAnnotationsWithTokenIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, tns__selectMediaAnnotationsWithTokenIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaAnnotationsWithTokenIdResponse
#define soap_write_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(soap, data, "tns:selectMediaAnnotationsWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaAnnotationsWithTokenIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(struct soap*, tns__selectMediaAnnotationsWithTokenIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaAnnotationsWithTokenIdResponse
#define soap_read_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaAnnotationsWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaAnnotationsWithTokenId
#define SOAP_TYPE_Annot_PointerTotns__selectMediaAnnotationsWithTokenId (221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaAnnotationsWithTokenId(struct soap*, tns__selectMediaAnnotationsWithTokenId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaAnnotationsWithTokenId(struct soap*, const char *, int, tns__selectMediaAnnotationsWithTokenId *const*, const char *);
SOAP_FMAC3 tns__selectMediaAnnotationsWithTokenId ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaAnnotationsWithTokenId(struct soap*, const char*, tns__selectMediaAnnotationsWithTokenId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaAnnotationsWithTokenId(struct soap*, tns__selectMediaAnnotationsWithTokenId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaAnnotationsWithTokenId
#define soap_write_PointerTotns__selectMediaAnnotationsWithTokenId(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaAnnotationsWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaAnnotationsWithTokenId(soap, data, "tns:selectMediaAnnotationsWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaAnnotationsWithTokenId ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaAnnotationsWithTokenId(struct soap*, tns__selectMediaAnnotationsWithTokenId **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaAnnotationsWithTokenId
#define soap_read_PointerTotns__selectMediaAnnotationsWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaAnnotationsWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaAliasesWithTokenIdResponse
#define SOAP_TYPE_Annot_PointerTotns__selectMediaAliasesWithTokenIdResponse (218)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaAliasesWithTokenIdResponse(struct soap*, tns__selectMediaAliasesWithTokenIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaAliasesWithTokenIdResponse(struct soap*, const char *, int, tns__selectMediaAliasesWithTokenIdResponse *const*, const char *);
SOAP_FMAC3 tns__selectMediaAliasesWithTokenIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaAliasesWithTokenIdResponse(struct soap*, const char*, tns__selectMediaAliasesWithTokenIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaAliasesWithTokenIdResponse(struct soap*, tns__selectMediaAliasesWithTokenIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaAliasesWithTokenIdResponse
#define soap_write_PointerTotns__selectMediaAliasesWithTokenIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaAliasesWithTokenIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaAliasesWithTokenIdResponse(soap, data, "tns:selectMediaAliasesWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaAliasesWithTokenIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaAliasesWithTokenIdResponse(struct soap*, tns__selectMediaAliasesWithTokenIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaAliasesWithTokenIdResponse
#define soap_read_PointerTotns__selectMediaAliasesWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaAliasesWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectMediaAliasesWithTokenId
#define SOAP_TYPE_Annot_PointerTotns__selectMediaAliasesWithTokenId (217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectMediaAliasesWithTokenId(struct soap*, tns__selectMediaAliasesWithTokenId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectMediaAliasesWithTokenId(struct soap*, const char *, int, tns__selectMediaAliasesWithTokenId *const*, const char *);
SOAP_FMAC3 tns__selectMediaAliasesWithTokenId ** SOAP_FMAC4 soap_in_PointerTotns__selectMediaAliasesWithTokenId(struct soap*, const char*, tns__selectMediaAliasesWithTokenId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectMediaAliasesWithTokenId(struct soap*, tns__selectMediaAliasesWithTokenId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectMediaAliasesWithTokenId
#define soap_write_PointerTotns__selectMediaAliasesWithTokenId(soap, data) ( Annot::soap_serialize_PointerTotns__selectMediaAliasesWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectMediaAliasesWithTokenId(soap, data, "tns:selectMediaAliasesWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectMediaAliasesWithTokenId ** SOAP_FMAC4 soap_get_PointerTotns__selectMediaAliasesWithTokenId(struct soap*, tns__selectMediaAliasesWithTokenId **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectMediaAliasesWithTokenId
#define soap_read_PointerTotns__selectMediaAliasesWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectMediaAliasesWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectGameThreadWithTokenIdResponse
#define SOAP_TYPE_Annot_PointerTotns__selectGameThreadWithTokenIdResponse (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectGameThreadWithTokenIdResponse(struct soap*, tns__selectGameThreadWithTokenIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectGameThreadWithTokenIdResponse(struct soap*, const char *, int, tns__selectGameThreadWithTokenIdResponse *const*, const char *);
SOAP_FMAC3 tns__selectGameThreadWithTokenIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectGameThreadWithTokenIdResponse(struct soap*, const char*, tns__selectGameThreadWithTokenIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectGameThreadWithTokenIdResponse(struct soap*, tns__selectGameThreadWithTokenIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectGameThreadWithTokenIdResponse
#define soap_write_PointerTotns__selectGameThreadWithTokenIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectGameThreadWithTokenIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectGameThreadWithTokenIdResponse(soap, data, "tns:selectGameThreadWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameThreadWithTokenIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectGameThreadWithTokenIdResponse(struct soap*, tns__selectGameThreadWithTokenIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectGameThreadWithTokenIdResponse
#define soap_read_PointerTotns__selectGameThreadWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectGameThreadWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectGameThreadWithTokenId
#define SOAP_TYPE_Annot_PointerTotns__selectGameThreadWithTokenId (213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectGameThreadWithTokenId(struct soap*, tns__selectGameThreadWithTokenId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectGameThreadWithTokenId(struct soap*, const char *, int, tns__selectGameThreadWithTokenId *const*, const char *);
SOAP_FMAC3 tns__selectGameThreadWithTokenId ** SOAP_FMAC4 soap_in_PointerTotns__selectGameThreadWithTokenId(struct soap*, const char*, tns__selectGameThreadWithTokenId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectGameThreadWithTokenId(struct soap*, tns__selectGameThreadWithTokenId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectGameThreadWithTokenId
#define soap_write_PointerTotns__selectGameThreadWithTokenId(soap, data) ( Annot::soap_serialize_PointerTotns__selectGameThreadWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectGameThreadWithTokenId(soap, data, "tns:selectGameThreadWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameThreadWithTokenId ** SOAP_FMAC4 soap_get_PointerTotns__selectGameThreadWithTokenId(struct soap*, tns__selectGameThreadWithTokenId **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectGameThreadWithTokenId
#define soap_read_PointerTotns__selectGameThreadWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectGameThreadWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectGameThreadWithTokenDigestResponse
#define SOAP_TYPE_Annot_PointerTotns__selectGameThreadWithTokenDigestResponse (210)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectGameThreadWithTokenDigestResponse(struct soap*, tns__selectGameThreadWithTokenDigestResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectGameThreadWithTokenDigestResponse(struct soap*, const char *, int, tns__selectGameThreadWithTokenDigestResponse *const*, const char *);
SOAP_FMAC3 tns__selectGameThreadWithTokenDigestResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectGameThreadWithTokenDigestResponse(struct soap*, const char*, tns__selectGameThreadWithTokenDigestResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectGameThreadWithTokenDigestResponse(struct soap*, tns__selectGameThreadWithTokenDigestResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectGameThreadWithTokenDigestResponse
#define soap_write_PointerTotns__selectGameThreadWithTokenDigestResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectGameThreadWithTokenDigestResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectGameThreadWithTokenDigestResponse(soap, data, "tns:selectGameThreadWithTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameThreadWithTokenDigestResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectGameThreadWithTokenDigestResponse(struct soap*, tns__selectGameThreadWithTokenDigestResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectGameThreadWithTokenDigestResponse
#define soap_read_PointerTotns__selectGameThreadWithTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectGameThreadWithTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectGameThreadWithTokenDigest
#define SOAP_TYPE_Annot_PointerTotns__selectGameThreadWithTokenDigest (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectGameThreadWithTokenDigest(struct soap*, tns__selectGameThreadWithTokenDigest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectGameThreadWithTokenDigest(struct soap*, const char *, int, tns__selectGameThreadWithTokenDigest *const*, const char *);
SOAP_FMAC3 tns__selectGameThreadWithTokenDigest ** SOAP_FMAC4 soap_in_PointerTotns__selectGameThreadWithTokenDigest(struct soap*, const char*, tns__selectGameThreadWithTokenDigest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectGameThreadWithTokenDigest(struct soap*, tns__selectGameThreadWithTokenDigest *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectGameThreadWithTokenDigest
#define soap_write_PointerTotns__selectGameThreadWithTokenDigest(soap, data) ( Annot::soap_serialize_PointerTotns__selectGameThreadWithTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectGameThreadWithTokenDigest(soap, data, "tns:selectGameThreadWithTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameThreadWithTokenDigest ** SOAP_FMAC4 soap_get_PointerTotns__selectGameThreadWithTokenDigest(struct soap*, tns__selectGameThreadWithTokenDigest **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectGameThreadWithTokenDigest
#define soap_read_PointerTotns__selectGameThreadWithTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectGameThreadWithTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectGameHookWithTokenIdResponse
#define SOAP_TYPE_Annot_PointerTotns__selectGameHookWithTokenIdResponse (206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectGameHookWithTokenIdResponse(struct soap*, tns__selectGameHookWithTokenIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectGameHookWithTokenIdResponse(struct soap*, const char *, int, tns__selectGameHookWithTokenIdResponse *const*, const char *);
SOAP_FMAC3 tns__selectGameHookWithTokenIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectGameHookWithTokenIdResponse(struct soap*, const char*, tns__selectGameHookWithTokenIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectGameHookWithTokenIdResponse(struct soap*, tns__selectGameHookWithTokenIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectGameHookWithTokenIdResponse
#define soap_write_PointerTotns__selectGameHookWithTokenIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectGameHookWithTokenIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectGameHookWithTokenIdResponse(soap, data, "tns:selectGameHookWithTokenIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameHookWithTokenIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectGameHookWithTokenIdResponse(struct soap*, tns__selectGameHookWithTokenIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectGameHookWithTokenIdResponse
#define soap_read_PointerTotns__selectGameHookWithTokenIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectGameHookWithTokenIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectGameHookWithTokenId
#define SOAP_TYPE_Annot_PointerTotns__selectGameHookWithTokenId (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectGameHookWithTokenId(struct soap*, tns__selectGameHookWithTokenId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectGameHookWithTokenId(struct soap*, const char *, int, tns__selectGameHookWithTokenId *const*, const char *);
SOAP_FMAC3 tns__selectGameHookWithTokenId ** SOAP_FMAC4 soap_in_PointerTotns__selectGameHookWithTokenId(struct soap*, const char*, tns__selectGameHookWithTokenId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectGameHookWithTokenId(struct soap*, tns__selectGameHookWithTokenId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectGameHookWithTokenId
#define soap_write_PointerTotns__selectGameHookWithTokenId(soap, data) ( Annot::soap_serialize_PointerTotns__selectGameHookWithTokenId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectGameHookWithTokenId(soap, data, "tns:selectGameHookWithTokenId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameHookWithTokenId ** SOAP_FMAC4 soap_get_PointerTotns__selectGameHookWithTokenId(struct soap*, tns__selectGameHookWithTokenId **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectGameHookWithTokenId
#define soap_read_PointerTotns__selectGameHookWithTokenId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectGameHookWithTokenId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectGameHookWithTokenDigestResponse
#define SOAP_TYPE_Annot_PointerTotns__selectGameHookWithTokenDigestResponse (202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectGameHookWithTokenDigestResponse(struct soap*, tns__selectGameHookWithTokenDigestResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectGameHookWithTokenDigestResponse(struct soap*, const char *, int, tns__selectGameHookWithTokenDigestResponse *const*, const char *);
SOAP_FMAC3 tns__selectGameHookWithTokenDigestResponse ** SOAP_FMAC4 soap_in_PointerTotns__selectGameHookWithTokenDigestResponse(struct soap*, const char*, tns__selectGameHookWithTokenDigestResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectGameHookWithTokenDigestResponse(struct soap*, tns__selectGameHookWithTokenDigestResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectGameHookWithTokenDigestResponse
#define soap_write_PointerTotns__selectGameHookWithTokenDigestResponse(soap, data) ( Annot::soap_serialize_PointerTotns__selectGameHookWithTokenDigestResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectGameHookWithTokenDigestResponse(soap, data, "tns:selectGameHookWithTokenDigestResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameHookWithTokenDigestResponse ** SOAP_FMAC4 soap_get_PointerTotns__selectGameHookWithTokenDigestResponse(struct soap*, tns__selectGameHookWithTokenDigestResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectGameHookWithTokenDigestResponse
#define soap_read_PointerTotns__selectGameHookWithTokenDigestResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectGameHookWithTokenDigestResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__selectGameHookWithTokenDigest
#define SOAP_TYPE_Annot_PointerTotns__selectGameHookWithTokenDigest (201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__selectGameHookWithTokenDigest(struct soap*, tns__selectGameHookWithTokenDigest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__selectGameHookWithTokenDigest(struct soap*, const char *, int, tns__selectGameHookWithTokenDigest *const*, const char *);
SOAP_FMAC3 tns__selectGameHookWithTokenDigest ** SOAP_FMAC4 soap_in_PointerTotns__selectGameHookWithTokenDigest(struct soap*, const char*, tns__selectGameHookWithTokenDigest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__selectGameHookWithTokenDigest(struct soap*, tns__selectGameHookWithTokenDigest *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__selectGameHookWithTokenDigest
#define soap_write_PointerTotns__selectGameHookWithTokenDigest(soap, data) ( Annot::soap_serialize_PointerTotns__selectGameHookWithTokenDigest(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__selectGameHookWithTokenDigest(soap, data, "tns:selectGameHookWithTokenDigest", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__selectGameHookWithTokenDigest ** SOAP_FMAC4 soap_get_PointerTotns__selectGameHookWithTokenDigest(struct soap*, tns__selectGameHookWithTokenDigest **, const char*, const char*);

#ifndef soap_read_PointerTotns__selectGameHookWithTokenDigest
#define soap_read_PointerTotns__selectGameHookWithTokenDigest(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__selectGameHookWithTokenDigest(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__loginResponse
#define SOAP_TYPE_Annot_PointerTotns__loginResponse (198)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__loginResponse(struct soap*, tns__loginResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__loginResponse(struct soap*, const char *, int, tns__loginResponse *const*, const char *);
SOAP_FMAC3 tns__loginResponse ** SOAP_FMAC4 soap_in_PointerTotns__loginResponse(struct soap*, const char*, tns__loginResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__loginResponse(struct soap*, tns__loginResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__loginResponse
#define soap_write_PointerTotns__loginResponse(soap, data) ( Annot::soap_serialize_PointerTotns__loginResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__loginResponse(soap, data, "tns:loginResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__loginResponse ** SOAP_FMAC4 soap_get_PointerTotns__loginResponse(struct soap*, tns__loginResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__loginResponse
#define soap_read_PointerTotns__loginResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__loginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__login
#define SOAP_TYPE_Annot_PointerTotns__login (197)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__login(struct soap*, tns__login *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__login(struct soap*, const char *, int, tns__login *const*, const char *);
SOAP_FMAC3 tns__login ** SOAP_FMAC4 soap_in_PointerTotns__login(struct soap*, const char*, tns__login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__login(struct soap*, tns__login *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__login
#define soap_write_PointerTotns__login(soap, data) ( Annot::soap_serialize_PointerTotns__login(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__login(soap, data, "tns:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__login ** SOAP_FMAC4 soap_get_PointerTotns__login(struct soap*, tns__login **, const char*, const char*);

#ifndef soap_read_PointerTotns__login
#define soap_read_PointerTotns__login(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__isLatestAppResponse
#define SOAP_TYPE_Annot_PointerTotns__isLatestAppResponse (194)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isLatestAppResponse(struct soap*, tns__isLatestAppResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isLatestAppResponse(struct soap*, const char *, int, tns__isLatestAppResponse *const*, const char *);
SOAP_FMAC3 tns__isLatestAppResponse ** SOAP_FMAC4 soap_in_PointerTotns__isLatestAppResponse(struct soap*, const char*, tns__isLatestAppResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isLatestAppResponse(struct soap*, tns__isLatestAppResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__isLatestAppResponse
#define soap_write_PointerTotns__isLatestAppResponse(soap, data) ( Annot::soap_serialize_PointerTotns__isLatestAppResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__isLatestAppResponse(soap, data, "tns:isLatestAppResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isLatestAppResponse ** SOAP_FMAC4 soap_get_PointerTotns__isLatestAppResponse(struct soap*, tns__isLatestAppResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__isLatestAppResponse
#define soap_read_PointerTotns__isLatestAppResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__isLatestAppResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__isLatestApp
#define SOAP_TYPE_Annot_PointerTotns__isLatestApp (193)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isLatestApp(struct soap*, tns__isLatestApp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isLatestApp(struct soap*, const char *, int, tns__isLatestApp *const*, const char *);
SOAP_FMAC3 tns__isLatestApp ** SOAP_FMAC4 soap_in_PointerTotns__isLatestApp(struct soap*, const char*, tns__isLatestApp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isLatestApp(struct soap*, tns__isLatestApp *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__isLatestApp
#define soap_write_PointerTotns__isLatestApp(soap, data) ( Annot::soap_serialize_PointerTotns__isLatestApp(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__isLatestApp(soap, data, "tns:isLatestApp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isLatestApp ** SOAP_FMAC4 soap_get_PointerTotns__isLatestApp(struct soap*, tns__isLatestApp **, const char*, const char*);

#ifndef soap_read_PointerTotns__isLatestApp
#define soap_read_PointerTotns__isLatestApp(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__isLatestApp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__isConnectedResponse
#define SOAP_TYPE_Annot_PointerTotns__isConnectedResponse (190)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isConnectedResponse(struct soap*, tns__isConnectedResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isConnectedResponse(struct soap*, const char *, int, tns__isConnectedResponse *const*, const char *);
SOAP_FMAC3 tns__isConnectedResponse ** SOAP_FMAC4 soap_in_PointerTotns__isConnectedResponse(struct soap*, const char*, tns__isConnectedResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isConnectedResponse(struct soap*, tns__isConnectedResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__isConnectedResponse
#define soap_write_PointerTotns__isConnectedResponse(soap, data) ( Annot::soap_serialize_PointerTotns__isConnectedResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__isConnectedResponse(soap, data, "tns:isConnectedResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isConnectedResponse ** SOAP_FMAC4 soap_get_PointerTotns__isConnectedResponse(struct soap*, tns__isConnectedResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__isConnectedResponse
#define soap_read_PointerTotns__isConnectedResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__isConnectedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__isConnected
#define SOAP_TYPE_Annot_PointerTotns__isConnected (189)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isConnected(struct soap*, tns__isConnected *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isConnected(struct soap*, const char *, int, tns__isConnected *const*, const char *);
SOAP_FMAC3 tns__isConnected ** SOAP_FMAC4 soap_in_PointerTotns__isConnected(struct soap*, const char*, tns__isConnected **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isConnected(struct soap*, tns__isConnected *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__isConnected
#define soap_write_PointerTotns__isConnected(soap, data) ( Annot::soap_serialize_PointerTotns__isConnected(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__isConnected(soap, data, "tns:isConnected", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isConnected ** SOAP_FMAC4 soap_get_PointerTotns__isConnected(struct soap*, tns__isConnected **, const char*, const char*);

#ifndef soap_read_PointerTotns__isConnected
#define soap_read_PointerTotns__isConnected(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__isConnected(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__isAuthorizedResponse
#define SOAP_TYPE_Annot_PointerTotns__isAuthorizedResponse (186)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isAuthorizedResponse(struct soap*, tns__isAuthorizedResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isAuthorizedResponse(struct soap*, const char *, int, tns__isAuthorizedResponse *const*, const char *);
SOAP_FMAC3 tns__isAuthorizedResponse ** SOAP_FMAC4 soap_in_PointerTotns__isAuthorizedResponse(struct soap*, const char*, tns__isAuthorizedResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isAuthorizedResponse(struct soap*, tns__isAuthorizedResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__isAuthorizedResponse
#define soap_write_PointerTotns__isAuthorizedResponse(soap, data) ( Annot::soap_serialize_PointerTotns__isAuthorizedResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__isAuthorizedResponse(soap, data, "tns:isAuthorizedResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isAuthorizedResponse ** SOAP_FMAC4 soap_get_PointerTotns__isAuthorizedResponse(struct soap*, tns__isAuthorizedResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__isAuthorizedResponse
#define soap_read_PointerTotns__isAuthorizedResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__isAuthorizedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__isAuthorized
#define SOAP_TYPE_Annot_PointerTotns__isAuthorized (185)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isAuthorized(struct soap*, tns__isAuthorized *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isAuthorized(struct soap*, const char *, int, tns__isAuthorized *const*, const char *);
SOAP_FMAC3 tns__isAuthorized ** SOAP_FMAC4 soap_in_PointerTotns__isAuthorized(struct soap*, const char*, tns__isAuthorized **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isAuthorized(struct soap*, tns__isAuthorized *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__isAuthorized
#define soap_write_PointerTotns__isAuthorized(soap, data) ( Annot::soap_serialize_PointerTotns__isAuthorized(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__isAuthorized(soap, data, "tns:isAuthorized", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__isAuthorized ** SOAP_FMAC4 soap_get_PointerTotns__isAuthorized(struct soap*, tns__isAuthorized **, const char*, const char*);

#ifndef soap_read_PointerTotns__isAuthorized
#define soap_read_PointerTotns__isAuthorized(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__isAuthorized(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__getUserResponse
#define SOAP_TYPE_Annot_PointerTotns__getUserResponse (182)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__getUserResponse(struct soap*, tns__getUserResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__getUserResponse(struct soap*, const char *, int, tns__getUserResponse *const*, const char *);
SOAP_FMAC3 tns__getUserResponse ** SOAP_FMAC4 soap_in_PointerTotns__getUserResponse(struct soap*, const char*, tns__getUserResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__getUserResponse(struct soap*, tns__getUserResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__getUserResponse
#define soap_write_PointerTotns__getUserResponse(soap, data) ( Annot::soap_serialize_PointerTotns__getUserResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__getUserResponse(soap, data, "tns:getUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__getUserResponse ** SOAP_FMAC4 soap_get_PointerTotns__getUserResponse(struct soap*, tns__getUserResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__getUserResponse
#define soap_read_PointerTotns__getUserResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__getUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__getUser
#define SOAP_TYPE_Annot_PointerTotns__getUser (181)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__getUser(struct soap*, tns__getUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__getUser(struct soap*, const char *, int, tns__getUser *const*, const char *);
SOAP_FMAC3 tns__getUser ** SOAP_FMAC4 soap_in_PointerTotns__getUser(struct soap*, const char*, tns__getUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__getUser(struct soap*, tns__getUser *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__getUser
#define soap_write_PointerTotns__getUser(soap, data) ( Annot::soap_serialize_PointerTotns__getUser(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__getUser(soap, data, "tns:getUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__getUser ** SOAP_FMAC4 soap_get_PointerTotns__getUser(struct soap*, tns__getUser **, const char*, const char*);

#ifndef soap_read_PointerTotns__getUser
#define soap_read_PointerTotns__getUser(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__getUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__deleteMediaAnnotationWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__deleteMediaAnnotationWithIdResponse (178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__deleteMediaAnnotationWithIdResponse(struct soap*, tns__deleteMediaAnnotationWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__deleteMediaAnnotationWithIdResponse(struct soap*, const char *, int, tns__deleteMediaAnnotationWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__deleteMediaAnnotationWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__deleteMediaAnnotationWithIdResponse(struct soap*, const char*, tns__deleteMediaAnnotationWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__deleteMediaAnnotationWithIdResponse(struct soap*, tns__deleteMediaAnnotationWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__deleteMediaAnnotationWithIdResponse
#define soap_write_PointerTotns__deleteMediaAnnotationWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__deleteMediaAnnotationWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__deleteMediaAnnotationWithIdResponse(soap, data, "tns:deleteMediaAnnotationWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__deleteMediaAnnotationWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__deleteMediaAnnotationWithIdResponse(struct soap*, tns__deleteMediaAnnotationWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__deleteMediaAnnotationWithIdResponse
#define soap_read_PointerTotns__deleteMediaAnnotationWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__deleteMediaAnnotationWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__deleteMediaAnnotationWithId
#define SOAP_TYPE_Annot_PointerTotns__deleteMediaAnnotationWithId (177)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__deleteMediaAnnotationWithId(struct soap*, tns__deleteMediaAnnotationWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__deleteMediaAnnotationWithId(struct soap*, const char *, int, tns__deleteMediaAnnotationWithId *const*, const char *);
SOAP_FMAC3 tns__deleteMediaAnnotationWithId ** SOAP_FMAC4 soap_in_PointerTotns__deleteMediaAnnotationWithId(struct soap*, const char*, tns__deleteMediaAnnotationWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__deleteMediaAnnotationWithId(struct soap*, tns__deleteMediaAnnotationWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__deleteMediaAnnotationWithId
#define soap_write_PointerTotns__deleteMediaAnnotationWithId(soap, data) ( Annot::soap_serialize_PointerTotns__deleteMediaAnnotationWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__deleteMediaAnnotationWithId(soap, data, "tns:deleteMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__deleteMediaAnnotationWithId ** SOAP_FMAC4 soap_get_PointerTotns__deleteMediaAnnotationWithId(struct soap*, tns__deleteMediaAnnotationWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__deleteMediaAnnotationWithId
#define soap_read_PointerTotns__deleteMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__deleteMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__deleteMediaAliasWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__deleteMediaAliasWithIdResponse (174)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__deleteMediaAliasWithIdResponse(struct soap*, tns__deleteMediaAliasWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__deleteMediaAliasWithIdResponse(struct soap*, const char *, int, tns__deleteMediaAliasWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__deleteMediaAliasWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__deleteMediaAliasWithIdResponse(struct soap*, const char*, tns__deleteMediaAliasWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__deleteMediaAliasWithIdResponse(struct soap*, tns__deleteMediaAliasWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__deleteMediaAliasWithIdResponse
#define soap_write_PointerTotns__deleteMediaAliasWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__deleteMediaAliasWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__deleteMediaAliasWithIdResponse(soap, data, "tns:deleteMediaAliasWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__deleteMediaAliasWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__deleteMediaAliasWithIdResponse(struct soap*, tns__deleteMediaAliasWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__deleteMediaAliasWithIdResponse
#define soap_read_PointerTotns__deleteMediaAliasWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__deleteMediaAliasWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__deleteMediaAliasWithId
#define SOAP_TYPE_Annot_PointerTotns__deleteMediaAliasWithId (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__deleteMediaAliasWithId(struct soap*, tns__deleteMediaAliasWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__deleteMediaAliasWithId(struct soap*, const char *, int, tns__deleteMediaAliasWithId *const*, const char *);
SOAP_FMAC3 tns__deleteMediaAliasWithId ** SOAP_FMAC4 soap_in_PointerTotns__deleteMediaAliasWithId(struct soap*, const char*, tns__deleteMediaAliasWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__deleteMediaAliasWithId(struct soap*, tns__deleteMediaAliasWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__deleteMediaAliasWithId
#define soap_write_PointerTotns__deleteMediaAliasWithId(soap, data) ( Annot::soap_serialize_PointerTotns__deleteMediaAliasWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__deleteMediaAliasWithId(soap, data, "tns:deleteMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__deleteMediaAliasWithId ** SOAP_FMAC4 soap_get_PointerTotns__deleteMediaAliasWithId(struct soap*, tns__deleteMediaAliasWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__deleteMediaAliasWithId
#define soap_read_PointerTotns__deleteMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__deleteMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__curseUserWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__curseUserWithIdResponse (170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__curseUserWithIdResponse(struct soap*, tns__curseUserWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__curseUserWithIdResponse(struct soap*, const char *, int, tns__curseUserWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__curseUserWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__curseUserWithIdResponse(struct soap*, const char*, tns__curseUserWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__curseUserWithIdResponse(struct soap*, tns__curseUserWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__curseUserWithIdResponse
#define soap_write_PointerTotns__curseUserWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__curseUserWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__curseUserWithIdResponse(soap, data, "tns:curseUserWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseUserWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__curseUserWithIdResponse(struct soap*, tns__curseUserWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__curseUserWithIdResponse
#define soap_read_PointerTotns__curseUserWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__curseUserWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__curseUserWithId
#define SOAP_TYPE_Annot_PointerTotns__curseUserWithId (169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__curseUserWithId(struct soap*, tns__curseUserWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__curseUserWithId(struct soap*, const char *, int, tns__curseUserWithId *const*, const char *);
SOAP_FMAC3 tns__curseUserWithId ** SOAP_FMAC4 soap_in_PointerTotns__curseUserWithId(struct soap*, const char*, tns__curseUserWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__curseUserWithId(struct soap*, tns__curseUserWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__curseUserWithId
#define soap_write_PointerTotns__curseUserWithId(soap, data) ( Annot::soap_serialize_PointerTotns__curseUserWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__curseUserWithId(soap, data, "tns:curseUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseUserWithId ** SOAP_FMAC4 soap_get_PointerTotns__curseUserWithId(struct soap*, tns__curseUserWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__curseUserWithId
#define soap_read_PointerTotns__curseUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__curseUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__curseMediaTokenWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__curseMediaTokenWithIdResponse (166)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__curseMediaTokenWithIdResponse(struct soap*, tns__curseMediaTokenWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__curseMediaTokenWithIdResponse(struct soap*, const char *, int, tns__curseMediaTokenWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__curseMediaTokenWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__curseMediaTokenWithIdResponse(struct soap*, const char*, tns__curseMediaTokenWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__curseMediaTokenWithIdResponse(struct soap*, tns__curseMediaTokenWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__curseMediaTokenWithIdResponse
#define soap_write_PointerTotns__curseMediaTokenWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__curseMediaTokenWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__curseMediaTokenWithIdResponse(soap, data, "tns:curseMediaTokenWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaTokenWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__curseMediaTokenWithIdResponse(struct soap*, tns__curseMediaTokenWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__curseMediaTokenWithIdResponse
#define soap_read_PointerTotns__curseMediaTokenWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__curseMediaTokenWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__curseMediaTokenWithId
#define SOAP_TYPE_Annot_PointerTotns__curseMediaTokenWithId (165)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__curseMediaTokenWithId(struct soap*, tns__curseMediaTokenWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__curseMediaTokenWithId(struct soap*, const char *, int, tns__curseMediaTokenWithId *const*, const char *);
SOAP_FMAC3 tns__curseMediaTokenWithId ** SOAP_FMAC4 soap_in_PointerTotns__curseMediaTokenWithId(struct soap*, const char*, tns__curseMediaTokenWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__curseMediaTokenWithId(struct soap*, tns__curseMediaTokenWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__curseMediaTokenWithId
#define soap_write_PointerTotns__curseMediaTokenWithId(soap, data) ( Annot::soap_serialize_PointerTotns__curseMediaTokenWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__curseMediaTokenWithId(soap, data, "tns:curseMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaTokenWithId ** SOAP_FMAC4 soap_get_PointerTotns__curseMediaTokenWithId(struct soap*, tns__curseMediaTokenWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__curseMediaTokenWithId
#define soap_read_PointerTotns__curseMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__curseMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__curseMediaAnnotationWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__curseMediaAnnotationWithIdResponse (162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__curseMediaAnnotationWithIdResponse(struct soap*, tns__curseMediaAnnotationWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__curseMediaAnnotationWithIdResponse(struct soap*, const char *, int, tns__curseMediaAnnotationWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__curseMediaAnnotationWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__curseMediaAnnotationWithIdResponse(struct soap*, const char*, tns__curseMediaAnnotationWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__curseMediaAnnotationWithIdResponse(struct soap*, tns__curseMediaAnnotationWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__curseMediaAnnotationWithIdResponse
#define soap_write_PointerTotns__curseMediaAnnotationWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__curseMediaAnnotationWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__curseMediaAnnotationWithIdResponse(soap, data, "tns:curseMediaAnnotationWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaAnnotationWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__curseMediaAnnotationWithIdResponse(struct soap*, tns__curseMediaAnnotationWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__curseMediaAnnotationWithIdResponse
#define soap_read_PointerTotns__curseMediaAnnotationWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__curseMediaAnnotationWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__curseMediaAnnotationWithId
#define SOAP_TYPE_Annot_PointerTotns__curseMediaAnnotationWithId (161)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__curseMediaAnnotationWithId(struct soap*, tns__curseMediaAnnotationWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__curseMediaAnnotationWithId(struct soap*, const char *, int, tns__curseMediaAnnotationWithId *const*, const char *);
SOAP_FMAC3 tns__curseMediaAnnotationWithId ** SOAP_FMAC4 soap_in_PointerTotns__curseMediaAnnotationWithId(struct soap*, const char*, tns__curseMediaAnnotationWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__curseMediaAnnotationWithId(struct soap*, tns__curseMediaAnnotationWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__curseMediaAnnotationWithId
#define soap_write_PointerTotns__curseMediaAnnotationWithId(soap, data) ( Annot::soap_serialize_PointerTotns__curseMediaAnnotationWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__curseMediaAnnotationWithId(soap, data, "tns:curseMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaAnnotationWithId ** SOAP_FMAC4 soap_get_PointerTotns__curseMediaAnnotationWithId(struct soap*, tns__curseMediaAnnotationWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__curseMediaAnnotationWithId
#define soap_read_PointerTotns__curseMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__curseMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__curseMediaAliasWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__curseMediaAliasWithIdResponse (158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__curseMediaAliasWithIdResponse(struct soap*, tns__curseMediaAliasWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__curseMediaAliasWithIdResponse(struct soap*, const char *, int, tns__curseMediaAliasWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__curseMediaAliasWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__curseMediaAliasWithIdResponse(struct soap*, const char*, tns__curseMediaAliasWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__curseMediaAliasWithIdResponse(struct soap*, tns__curseMediaAliasWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__curseMediaAliasWithIdResponse
#define soap_write_PointerTotns__curseMediaAliasWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__curseMediaAliasWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__curseMediaAliasWithIdResponse(soap, data, "tns:curseMediaAliasWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaAliasWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__curseMediaAliasWithIdResponse(struct soap*, tns__curseMediaAliasWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__curseMediaAliasWithIdResponse
#define soap_read_PointerTotns__curseMediaAliasWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__curseMediaAliasWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__curseMediaAliasWithId
#define SOAP_TYPE_Annot_PointerTotns__curseMediaAliasWithId (157)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__curseMediaAliasWithId(struct soap*, tns__curseMediaAliasWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__curseMediaAliasWithId(struct soap*, const char *, int, tns__curseMediaAliasWithId *const*, const char *);
SOAP_FMAC3 tns__curseMediaAliasWithId ** SOAP_FMAC4 soap_in_PointerTotns__curseMediaAliasWithId(struct soap*, const char*, tns__curseMediaAliasWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__curseMediaAliasWithId(struct soap*, tns__curseMediaAliasWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__curseMediaAliasWithId
#define soap_write_PointerTotns__curseMediaAliasWithId(soap, data) ( Annot::soap_serialize_PointerTotns__curseMediaAliasWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__curseMediaAliasWithId(soap, data, "tns:curseMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__curseMediaAliasWithId ** SOAP_FMAC4 soap_get_PointerTotns__curseMediaAliasWithId(struct soap*, tns__curseMediaAliasWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__curseMediaAliasWithId
#define soap_read_PointerTotns__curseMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__curseMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__chatResponse
#define SOAP_TYPE_Annot_PointerTotns__chatResponse (154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__chatResponse(struct soap*, tns__chatResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__chatResponse(struct soap*, const char *, int, tns__chatResponse *const*, const char *);
SOAP_FMAC3 tns__chatResponse ** SOAP_FMAC4 soap_in_PointerTotns__chatResponse(struct soap*, const char*, tns__chatResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__chatResponse(struct soap*, tns__chatResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__chatResponse
#define soap_write_PointerTotns__chatResponse(soap, data) ( Annot::soap_serialize_PointerTotns__chatResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__chatResponse(soap, data, "tns:chatResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__chatResponse ** SOAP_FMAC4 soap_get_PointerTotns__chatResponse(struct soap*, tns__chatResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__chatResponse
#define soap_read_PointerTotns__chatResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__chatResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__chat
#define SOAP_TYPE_Annot_PointerTotns__chat (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__chat(struct soap*, tns__chat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__chat(struct soap*, const char *, int, tns__chat *const*, const char *);
SOAP_FMAC3 tns__chat ** SOAP_FMAC4 soap_in_PointerTotns__chat(struct soap*, const char*, tns__chat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__chat(struct soap*, tns__chat *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__chat
#define soap_write_PointerTotns__chat(soap, data) ( Annot::soap_serialize_PointerTotns__chat(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__chat(soap, data, "tns:chat", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__chat ** SOAP_FMAC4 soap_get_PointerTotns__chat(struct soap*, tns__chat **, const char*, const char*);

#ifndef soap_read_PointerTotns__chat
#define soap_read_PointerTotns__chat(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__chat(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blockUserWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__blockUserWithIdResponse (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blockUserWithIdResponse(struct soap*, tns__blockUserWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blockUserWithIdResponse(struct soap*, const char *, int, tns__blockUserWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__blockUserWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__blockUserWithIdResponse(struct soap*, const char*, tns__blockUserWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blockUserWithIdResponse(struct soap*, tns__blockUserWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blockUserWithIdResponse
#define soap_write_PointerTotns__blockUserWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__blockUserWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blockUserWithIdResponse(soap, data, "tns:blockUserWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockUserWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__blockUserWithIdResponse(struct soap*, tns__blockUserWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__blockUserWithIdResponse
#define soap_read_PointerTotns__blockUserWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blockUserWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blockUserWithId
#define SOAP_TYPE_Annot_PointerTotns__blockUserWithId (149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blockUserWithId(struct soap*, tns__blockUserWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blockUserWithId(struct soap*, const char *, int, tns__blockUserWithId *const*, const char *);
SOAP_FMAC3 tns__blockUserWithId ** SOAP_FMAC4 soap_in_PointerTotns__blockUserWithId(struct soap*, const char*, tns__blockUserWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blockUserWithId(struct soap*, tns__blockUserWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blockUserWithId
#define soap_write_PointerTotns__blockUserWithId(soap, data) ( Annot::soap_serialize_PointerTotns__blockUserWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blockUserWithId(soap, data, "tns:blockUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockUserWithId ** SOAP_FMAC4 soap_get_PointerTotns__blockUserWithId(struct soap*, tns__blockUserWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__blockUserWithId
#define soap_read_PointerTotns__blockUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blockUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blockMediaAnnotationWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__blockMediaAnnotationWithIdResponse (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blockMediaAnnotationWithIdResponse(struct soap*, tns__blockMediaAnnotationWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blockMediaAnnotationWithIdResponse(struct soap*, const char *, int, tns__blockMediaAnnotationWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__blockMediaAnnotationWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__blockMediaAnnotationWithIdResponse(struct soap*, const char*, tns__blockMediaAnnotationWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blockMediaAnnotationWithIdResponse(struct soap*, tns__blockMediaAnnotationWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blockMediaAnnotationWithIdResponse
#define soap_write_PointerTotns__blockMediaAnnotationWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__blockMediaAnnotationWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blockMediaAnnotationWithIdResponse(soap, data, "tns:blockMediaAnnotationWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockMediaAnnotationWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__blockMediaAnnotationWithIdResponse(struct soap*, tns__blockMediaAnnotationWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__blockMediaAnnotationWithIdResponse
#define soap_read_PointerTotns__blockMediaAnnotationWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blockMediaAnnotationWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blockMediaAnnotationWithId
#define SOAP_TYPE_Annot_PointerTotns__blockMediaAnnotationWithId (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blockMediaAnnotationWithId(struct soap*, tns__blockMediaAnnotationWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blockMediaAnnotationWithId(struct soap*, const char *, int, tns__blockMediaAnnotationWithId *const*, const char *);
SOAP_FMAC3 tns__blockMediaAnnotationWithId ** SOAP_FMAC4 soap_in_PointerTotns__blockMediaAnnotationWithId(struct soap*, const char*, tns__blockMediaAnnotationWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blockMediaAnnotationWithId(struct soap*, tns__blockMediaAnnotationWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blockMediaAnnotationWithId
#define soap_write_PointerTotns__blockMediaAnnotationWithId(soap, data) ( Annot::soap_serialize_PointerTotns__blockMediaAnnotationWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blockMediaAnnotationWithId(soap, data, "tns:blockMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockMediaAnnotationWithId ** SOAP_FMAC4 soap_get_PointerTotns__blockMediaAnnotationWithId(struct soap*, tns__blockMediaAnnotationWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__blockMediaAnnotationWithId
#define soap_read_PointerTotns__blockMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blockMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blockMediaAliasWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__blockMediaAliasWithIdResponse (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blockMediaAliasWithIdResponse(struct soap*, tns__blockMediaAliasWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blockMediaAliasWithIdResponse(struct soap*, const char *, int, tns__blockMediaAliasWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__blockMediaAliasWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__blockMediaAliasWithIdResponse(struct soap*, const char*, tns__blockMediaAliasWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blockMediaAliasWithIdResponse(struct soap*, tns__blockMediaAliasWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blockMediaAliasWithIdResponse
#define soap_write_PointerTotns__blockMediaAliasWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__blockMediaAliasWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blockMediaAliasWithIdResponse(soap, data, "tns:blockMediaAliasWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockMediaAliasWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__blockMediaAliasWithIdResponse(struct soap*, tns__blockMediaAliasWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__blockMediaAliasWithIdResponse
#define soap_read_PointerTotns__blockMediaAliasWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blockMediaAliasWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blockMediaAliasWithId
#define SOAP_TYPE_Annot_PointerTotns__blockMediaAliasWithId (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blockMediaAliasWithId(struct soap*, tns__blockMediaAliasWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blockMediaAliasWithId(struct soap*, const char *, int, tns__blockMediaAliasWithId *const*, const char *);
SOAP_FMAC3 tns__blockMediaAliasWithId ** SOAP_FMAC4 soap_in_PointerTotns__blockMediaAliasWithId(struct soap*, const char*, tns__blockMediaAliasWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blockMediaAliasWithId(struct soap*, tns__blockMediaAliasWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blockMediaAliasWithId
#define soap_write_PointerTotns__blockMediaAliasWithId(soap, data) ( Annot::soap_serialize_PointerTotns__blockMediaAliasWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blockMediaAliasWithId(soap, data, "tns:blockMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blockMediaAliasWithId ** SOAP_FMAC4 soap_get_PointerTotns__blockMediaAliasWithId(struct soap*, tns__blockMediaAliasWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__blockMediaAliasWithId
#define soap_read_PointerTotns__blockMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blockMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blessUserWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__blessUserWithIdResponse (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blessUserWithIdResponse(struct soap*, tns__blessUserWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blessUserWithIdResponse(struct soap*, const char *, int, tns__blessUserWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__blessUserWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__blessUserWithIdResponse(struct soap*, const char*, tns__blessUserWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blessUserWithIdResponse(struct soap*, tns__blessUserWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blessUserWithIdResponse
#define soap_write_PointerTotns__blessUserWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__blessUserWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blessUserWithIdResponse(soap, data, "tns:blessUserWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessUserWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__blessUserWithIdResponse(struct soap*, tns__blessUserWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__blessUserWithIdResponse
#define soap_read_PointerTotns__blessUserWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blessUserWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blessUserWithId
#define SOAP_TYPE_Annot_PointerTotns__blessUserWithId (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blessUserWithId(struct soap*, tns__blessUserWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blessUserWithId(struct soap*, const char *, int, tns__blessUserWithId *const*, const char *);
SOAP_FMAC3 tns__blessUserWithId ** SOAP_FMAC4 soap_in_PointerTotns__blessUserWithId(struct soap*, const char*, tns__blessUserWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blessUserWithId(struct soap*, tns__blessUserWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blessUserWithId
#define soap_write_PointerTotns__blessUserWithId(soap, data) ( Annot::soap_serialize_PointerTotns__blessUserWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blessUserWithId(soap, data, "tns:blessUserWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessUserWithId ** SOAP_FMAC4 soap_get_PointerTotns__blessUserWithId(struct soap*, tns__blessUserWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__blessUserWithId
#define soap_read_PointerTotns__blessUserWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blessUserWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blessMediaTokenWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__blessMediaTokenWithIdResponse (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blessMediaTokenWithIdResponse(struct soap*, tns__blessMediaTokenWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blessMediaTokenWithIdResponse(struct soap*, const char *, int, tns__blessMediaTokenWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__blessMediaTokenWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__blessMediaTokenWithIdResponse(struct soap*, const char*, tns__blessMediaTokenWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blessMediaTokenWithIdResponse(struct soap*, tns__blessMediaTokenWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blessMediaTokenWithIdResponse
#define soap_write_PointerTotns__blessMediaTokenWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__blessMediaTokenWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blessMediaTokenWithIdResponse(soap, data, "tns:blessMediaTokenWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaTokenWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__blessMediaTokenWithIdResponse(struct soap*, tns__blessMediaTokenWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__blessMediaTokenWithIdResponse
#define soap_read_PointerTotns__blessMediaTokenWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blessMediaTokenWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blessMediaTokenWithId
#define SOAP_TYPE_Annot_PointerTotns__blessMediaTokenWithId (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blessMediaTokenWithId(struct soap*, tns__blessMediaTokenWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blessMediaTokenWithId(struct soap*, const char *, int, tns__blessMediaTokenWithId *const*, const char *);
SOAP_FMAC3 tns__blessMediaTokenWithId ** SOAP_FMAC4 soap_in_PointerTotns__blessMediaTokenWithId(struct soap*, const char*, tns__blessMediaTokenWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blessMediaTokenWithId(struct soap*, tns__blessMediaTokenWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blessMediaTokenWithId
#define soap_write_PointerTotns__blessMediaTokenWithId(soap, data) ( Annot::soap_serialize_PointerTotns__blessMediaTokenWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blessMediaTokenWithId(soap, data, "tns:blessMediaTokenWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaTokenWithId ** SOAP_FMAC4 soap_get_PointerTotns__blessMediaTokenWithId(struct soap*, tns__blessMediaTokenWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__blessMediaTokenWithId
#define soap_read_PointerTotns__blessMediaTokenWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blessMediaTokenWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blessMediaAnnotationWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__blessMediaAnnotationWithIdResponse (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blessMediaAnnotationWithIdResponse(struct soap*, tns__blessMediaAnnotationWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blessMediaAnnotationWithIdResponse(struct soap*, const char *, int, tns__blessMediaAnnotationWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__blessMediaAnnotationWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__blessMediaAnnotationWithIdResponse(struct soap*, const char*, tns__blessMediaAnnotationWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blessMediaAnnotationWithIdResponse(struct soap*, tns__blessMediaAnnotationWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blessMediaAnnotationWithIdResponse
#define soap_write_PointerTotns__blessMediaAnnotationWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__blessMediaAnnotationWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blessMediaAnnotationWithIdResponse(soap, data, "tns:blessMediaAnnotationWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaAnnotationWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__blessMediaAnnotationWithIdResponse(struct soap*, tns__blessMediaAnnotationWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__blessMediaAnnotationWithIdResponse
#define soap_read_PointerTotns__blessMediaAnnotationWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blessMediaAnnotationWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blessMediaAnnotationWithId
#define SOAP_TYPE_Annot_PointerTotns__blessMediaAnnotationWithId (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blessMediaAnnotationWithId(struct soap*, tns__blessMediaAnnotationWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blessMediaAnnotationWithId(struct soap*, const char *, int, tns__blessMediaAnnotationWithId *const*, const char *);
SOAP_FMAC3 tns__blessMediaAnnotationWithId ** SOAP_FMAC4 soap_in_PointerTotns__blessMediaAnnotationWithId(struct soap*, const char*, tns__blessMediaAnnotationWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blessMediaAnnotationWithId(struct soap*, tns__blessMediaAnnotationWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blessMediaAnnotationWithId
#define soap_write_PointerTotns__blessMediaAnnotationWithId(soap, data) ( Annot::soap_serialize_PointerTotns__blessMediaAnnotationWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blessMediaAnnotationWithId(soap, data, "tns:blessMediaAnnotationWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaAnnotationWithId ** SOAP_FMAC4 soap_get_PointerTotns__blessMediaAnnotationWithId(struct soap*, tns__blessMediaAnnotationWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__blessMediaAnnotationWithId
#define soap_read_PointerTotns__blessMediaAnnotationWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blessMediaAnnotationWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blessMediaAliasWithIdResponse
#define SOAP_TYPE_Annot_PointerTotns__blessMediaAliasWithIdResponse (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blessMediaAliasWithIdResponse(struct soap*, tns__blessMediaAliasWithIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blessMediaAliasWithIdResponse(struct soap*, const char *, int, tns__blessMediaAliasWithIdResponse *const*, const char *);
SOAP_FMAC3 tns__blessMediaAliasWithIdResponse ** SOAP_FMAC4 soap_in_PointerTotns__blessMediaAliasWithIdResponse(struct soap*, const char*, tns__blessMediaAliasWithIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blessMediaAliasWithIdResponse(struct soap*, tns__blessMediaAliasWithIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blessMediaAliasWithIdResponse
#define soap_write_PointerTotns__blessMediaAliasWithIdResponse(soap, data) ( Annot::soap_serialize_PointerTotns__blessMediaAliasWithIdResponse(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blessMediaAliasWithIdResponse(soap, data, "tns:blessMediaAliasWithIdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaAliasWithIdResponse ** SOAP_FMAC4 soap_get_PointerTotns__blessMediaAliasWithIdResponse(struct soap*, tns__blessMediaAliasWithIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTotns__blessMediaAliasWithIdResponse
#define soap_read_PointerTotns__blessMediaAliasWithIdResponse(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blessMediaAliasWithIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__blessMediaAliasWithId
#define SOAP_TYPE_Annot_PointerTotns__blessMediaAliasWithId (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__blessMediaAliasWithId(struct soap*, tns__blessMediaAliasWithId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__blessMediaAliasWithId(struct soap*, const char *, int, tns__blessMediaAliasWithId *const*, const char *);
SOAP_FMAC3 tns__blessMediaAliasWithId ** SOAP_FMAC4 soap_in_PointerTotns__blessMediaAliasWithId(struct soap*, const char*, tns__blessMediaAliasWithId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__blessMediaAliasWithId(struct soap*, tns__blessMediaAliasWithId *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__blessMediaAliasWithId
#define soap_write_PointerTotns__blessMediaAliasWithId(soap, data) ( Annot::soap_serialize_PointerTotns__blessMediaAliasWithId(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__blessMediaAliasWithId(soap, data, "tns:blessMediaAliasWithId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__blessMediaAliasWithId ** SOAP_FMAC4 soap_get_PointerTotns__blessMediaAliasWithId(struct soap*, tns__blessMediaAliasWithId **, const char*, const char*);

#ifndef soap_read_PointerTotns__blessMediaAliasWithId
#define soap_read_PointerTotns__blessMediaAliasWithId(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__blessMediaAliasWithId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__mediaToken
#define SOAP_TYPE_Annot_PointerTotns__mediaToken (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__mediaToken(struct soap*, tns__mediaToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__mediaToken(struct soap*, const char *, int, tns__mediaToken *const*, const char *);
SOAP_FMAC3 tns__mediaToken ** SOAP_FMAC4 soap_in_PointerTotns__mediaToken(struct soap*, const char*, tns__mediaToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__mediaToken(struct soap*, tns__mediaToken *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__mediaToken
#define soap_write_PointerTotns__mediaToken(soap, data) ( Annot::soap_serialize_PointerTotns__mediaToken(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__mediaToken(soap, data, "tns:mediaToken", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__mediaToken ** SOAP_FMAC4 soap_get_PointerTotns__mediaToken(struct soap*, tns__mediaToken **, const char*, const char*);

#ifndef soap_read_PointerTotns__mediaToken
#define soap_read_PointerTotns__mediaToken(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__mediaToken(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__mediaAnnotation
#define SOAP_TYPE_Annot_PointerTotns__mediaAnnotation (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__mediaAnnotation(struct soap*, tns__mediaAnnotation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__mediaAnnotation(struct soap*, const char *, int, tns__mediaAnnotation *const*, const char *);
SOAP_FMAC3 tns__mediaAnnotation ** SOAP_FMAC4 soap_in_PointerTotns__mediaAnnotation(struct soap*, const char*, tns__mediaAnnotation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__mediaAnnotation(struct soap*, tns__mediaAnnotation *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__mediaAnnotation
#define soap_write_PointerTotns__mediaAnnotation(soap, data) ( Annot::soap_serialize_PointerTotns__mediaAnnotation(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__mediaAnnotation(soap, data, "tns:mediaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__mediaAnnotation ** SOAP_FMAC4 soap_get_PointerTotns__mediaAnnotation(struct soap*, tns__mediaAnnotation **, const char*, const char*);

#ifndef soap_read_PointerTotns__mediaAnnotation
#define soap_read_PointerTotns__mediaAnnotation(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__mediaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__mediaAlias
#define SOAP_TYPE_Annot_PointerTotns__mediaAlias (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__mediaAlias(struct soap*, tns__mediaAlias *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__mediaAlias(struct soap*, const char *, int, tns__mediaAlias *const*, const char *);
SOAP_FMAC3 tns__mediaAlias ** SOAP_FMAC4 soap_in_PointerTotns__mediaAlias(struct soap*, const char*, tns__mediaAlias **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__mediaAlias(struct soap*, tns__mediaAlias *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__mediaAlias
#define soap_write_PointerTotns__mediaAlias(soap, data) ( Annot::soap_serialize_PointerTotns__mediaAlias(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__mediaAlias(soap, data, "tns:mediaAlias", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__mediaAlias ** SOAP_FMAC4 soap_get_PointerTotns__mediaAlias(struct soap*, tns__mediaAlias **, const char*, const char*);

#ifndef soap_read_PointerTotns__mediaAlias
#define soap_read_PointerTotns__mediaAlias(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__mediaAlias(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__gameThread
#define SOAP_TYPE_Annot_PointerTotns__gameThread (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__gameThread(struct soap*, tns__gameThread *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__gameThread(struct soap*, const char *, int, tns__gameThread *const*, const char *);
SOAP_FMAC3 tns__gameThread ** SOAP_FMAC4 soap_in_PointerTotns__gameThread(struct soap*, const char*, tns__gameThread **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__gameThread(struct soap*, tns__gameThread *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__gameThread
#define soap_write_PointerTotns__gameThread(soap, data) ( Annot::soap_serialize_PointerTotns__gameThread(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__gameThread(soap, data, "tns:gameThread", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__gameThread ** SOAP_FMAC4 soap_get_PointerTotns__gameThread(struct soap*, tns__gameThread **, const char*, const char*);

#ifndef soap_read_PointerTotns__gameThread
#define soap_read_PointerTotns__gameThread(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__gameThread(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__gameHook
#define SOAP_TYPE_Annot_PointerTotns__gameHook (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__gameHook(struct soap*, tns__gameHook *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__gameHook(struct soap*, const char *, int, tns__gameHook *const*, const char *);
SOAP_FMAC3 tns__gameHook ** SOAP_FMAC4 soap_in_PointerTotns__gameHook(struct soap*, const char*, tns__gameHook **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__gameHook(struct soap*, tns__gameHook *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__gameHook
#define soap_write_PointerTotns__gameHook(soap, data) ( Annot::soap_serialize_PointerTotns__gameHook(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__gameHook(soap, data, "tns:gameHook", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__gameHook ** SOAP_FMAC4 soap_get_PointerTotns__gameHook(struct soap*, tns__gameHook **, const char*, const char*);

#ifndef soap_read_PointerTotns__gameHook
#define soap_read_PointerTotns__gameHook(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__gameHook(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTotns__user
#define SOAP_TYPE_Annot_PointerTotns__user (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__user(struct soap*, tns__user *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__user(struct soap*, const char *, int, tns__user *const*, const char *);
SOAP_FMAC3 tns__user ** SOAP_FMAC4 soap_in_PointerTotns__user(struct soap*, const char*, tns__user **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__user(struct soap*, tns__user *const*, const char*, const char*);

#ifndef soap_write_PointerTotns__user
#define soap_write_PointerTotns__user(soap, data) ( Annot::soap_serialize_PointerTotns__user(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTotns__user(soap, data, "tns:user", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 tns__user ** SOAP_FMAC4 soap_get_PointerTotns__user(struct soap*, tns__user **, const char*, const char*);

#ifndef soap_read_PointerTotns__user
#define soap_read_PointerTotns__user(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTotns__user(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_PointerTostd__string
#define SOAP_TYPE_Annot_PointerTostd__string (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( Annot::soap_serialize_PointerTostd__string(soap, data), soap_begin_send(soap) || Annot::soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot__QName
#define SOAP_TYPE_Annot__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( Annot::soap_serialize__QName(soap, data), soap_begin_send(soap) || Annot::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_string
#define SOAP_TYPE_Annot_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( Annot::soap_serialize_string(soap, data), soap_begin_send(soap) || Annot::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !Annot::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_Annot_std__vectorTemplateOfPointerTotns__mediaAnnotation
#define SOAP_TYPE_Annot_std__vectorTemplateOfPointerTotns__mediaAnnotation (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTotns__mediaAnnotation(struct soap*, std::vector<tns__mediaAnnotation * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTotns__mediaAnnotation(struct soap*, const std::vector<tns__mediaAnnotation * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTotns__mediaAnnotation(struct soap*, const char*, int, const std::vector<tns__mediaAnnotation * >*, const char*);
SOAP_FMAC3 std::vector<tns__mediaAnnotation * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTotns__mediaAnnotation(struct soap*, const char*, std::vector<tns__mediaAnnotation * >*, const char*);
SOAP_FMAC1 std::vector<tns__mediaAnnotation * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTotns__mediaAnnotation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tns__mediaAnnotation * > * soap_new_std__vectorTemplateOfPointerTotns__mediaAnnotation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTotns__mediaAnnotation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTotns__mediaAnnotation(struct soap *soap, std::vector<tns__mediaAnnotation * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTotns__mediaAnnotation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Annot_std__vectorTemplateOfPointerTotns__mediaAlias
#define SOAP_TYPE_Annot_std__vectorTemplateOfPointerTotns__mediaAlias (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTotns__mediaAlias(struct soap*, std::vector<tns__mediaAlias * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTotns__mediaAlias(struct soap*, const std::vector<tns__mediaAlias * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTotns__mediaAlias(struct soap*, const char*, int, const std::vector<tns__mediaAlias * >*, const char*);
SOAP_FMAC3 std::vector<tns__mediaAlias * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTotns__mediaAlias(struct soap*, const char*, std::vector<tns__mediaAlias * >*, const char*);
SOAP_FMAC1 std::vector<tns__mediaAlias * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTotns__mediaAlias(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tns__mediaAlias * > * soap_new_std__vectorTemplateOfPointerTotns__mediaAlias(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTotns__mediaAlias(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTotns__mediaAlias(struct soap *soap, std::vector<tns__mediaAlias * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTotns__mediaAlias(struct soap*, int, int, void*, size_t, const void*, size_t);

} // namespace Annot


#endif

/* End of AnnotH.h */
