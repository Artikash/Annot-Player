/* ClientSoapC.cpp
   Generated by gSOAP 2.8.3 from _clientsoap.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "ClientSoapH.h"

namespace ClientSoap {

SOAP_SOURCE_STAMP("@(#) ClientSoapC.cpp ver 2.8.3 2011-10-25 11:11:01 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_ClientSoap_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_ClientSoap_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ClientSoap_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_ClientSoap_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ClientSoap_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ClientSoap_tns__deauthorizeResponse:
		return soap_in_tns__deauthorizeResponse(soap, NULL, NULL, "tns:deauthorizeResponse");
	case SOAP_TYPE_ClientSoap_tns__deauthorize:
		return soap_in_tns__deauthorize(soap, NULL, NULL, "tns:deauthorize");
	case SOAP_TYPE_ClientSoap_tns__authorizeResponse:
		return soap_in_tns__authorizeResponse(soap, NULL, NULL, "tns:authorizeResponse");
	case SOAP_TYPE_ClientSoap_tns__authorize:
		return soap_in_tns__authorize(soap, NULL, NULL, "tns:authorize");
	case SOAP_TYPE_ClientSoap_tns__chatResponse:
		return soap_in_tns__chatResponse(soap, NULL, NULL, "tns:chatResponse");
	case SOAP_TYPE_ClientSoap_tns__chat:
		return soap_in_tns__chat(soap, NULL, NULL, "tns:chat");
	case SOAP_TYPE_ClientSoap_tns__isConnectedResponse:
		return soap_in_tns__isConnectedResponse(soap, NULL, NULL, "tns:isConnectedResponse");
	case SOAP_TYPE_ClientSoap_tns__isConnected:
		return soap_in_tns__isConnected(soap, NULL, NULL, "tns:isConnected");
	case SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse:
		return soap_in_tns__isAuthorizedResponse(soap, NULL, NULL, "tns:isAuthorizedResponse");
	case SOAP_TYPE_ClientSoap_tns__isAuthorized:
		return soap_in_tns__isAuthorized(soap, NULL, NULL, "tns:isAuthorized");
	case SOAP_TYPE_ClientSoap_PointerTotns__chatResponse:
		return soap_in_PointerTotns__chatResponse(soap, NULL, NULL, "tns:chatResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__chat:
		return soap_in_PointerTotns__chat(soap, NULL, NULL, "tns:chat");
	case SOAP_TYPE_ClientSoap_PointerTotns__isConnectedResponse:
		return soap_in_PointerTotns__isConnectedResponse(soap, NULL, NULL, "tns:isConnectedResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__isConnected:
		return soap_in_PointerTotns__isConnected(soap, NULL, NULL, "tns:isConnected");
	case SOAP_TYPE_ClientSoap_PointerTotns__isAuthorizedResponse:
		return soap_in_PointerTotns__isAuthorizedResponse(soap, NULL, NULL, "tns:isAuthorizedResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__isAuthorized:
		return soap_in_PointerTotns__isAuthorized(soap, NULL, NULL, "tns:isAuthorized");
	case SOAP_TYPE_ClientSoap_PointerTotns__deauthorizeResponse:
		return soap_in_PointerTotns__deauthorizeResponse(soap, NULL, NULL, "tns:deauthorizeResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__deauthorize:
		return soap_in_PointerTotns__deauthorize(soap, NULL, NULL, "tns:deauthorize");
	case SOAP_TYPE_ClientSoap_PointerTotns__authorizeResponse:
		return soap_in_PointerTotns__authorizeResponse(soap, NULL, NULL, "tns:authorizeResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__authorize:
		return soap_in_PointerTotns__authorize(soap, NULL, NULL, "tns:authorize");
	case SOAP_TYPE_ClientSoap_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ClientSoap__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_ClientSoap_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_ClientSoap_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:deauthorizeResponse"))
		{	*type = SOAP_TYPE_ClientSoap_tns__deauthorizeResponse;
			return soap_in_tns__deauthorizeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:deauthorize"))
		{	*type = SOAP_TYPE_ClientSoap_tns__deauthorize;
			return soap_in_tns__deauthorize(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:authorizeResponse"))
		{	*type = SOAP_TYPE_ClientSoap_tns__authorizeResponse;
			return soap_in_tns__authorizeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:authorize"))
		{	*type = SOAP_TYPE_ClientSoap_tns__authorize;
			return soap_in_tns__authorize(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:chatResponse"))
		{	*type = SOAP_TYPE_ClientSoap_tns__chatResponse;
			return soap_in_tns__chatResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:chat"))
		{	*type = SOAP_TYPE_ClientSoap_tns__chat;
			return soap_in_tns__chat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:isConnectedResponse"))
		{	*type = SOAP_TYPE_ClientSoap_tns__isConnectedResponse;
			return soap_in_tns__isConnectedResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:isConnected"))
		{	*type = SOAP_TYPE_ClientSoap_tns__isConnected;
			return soap_in_tns__isConnected(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:isAuthorizedResponse"))
		{	*type = SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse;
			return soap_in_tns__isAuthorizedResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tns:isAuthorized"))
		{	*type = SOAP_TYPE_ClientSoap_tns__isAuthorized;
			return soap_in_tns__isAuthorized(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_ClientSoap_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_ClientSoap_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_ClientSoap_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_ClientSoap_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_ClientSoap__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_ClientSoap_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_ClientSoap_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_ClientSoap_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ClientSoap_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_ClientSoap_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ClientSoap_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ClientSoap_tns__deauthorizeResponse:
		return ((tns__deauthorizeResponse *)ptr)->soap_out(soap, tag, id, "tns:deauthorizeResponse");
	case SOAP_TYPE_ClientSoap_tns__deauthorize:
		return ((tns__deauthorize *)ptr)->soap_out(soap, tag, id, "tns:deauthorize");
	case SOAP_TYPE_ClientSoap_tns__authorizeResponse:
		return ((tns__authorizeResponse *)ptr)->soap_out(soap, tag, id, "tns:authorizeResponse");
	case SOAP_TYPE_ClientSoap_tns__authorize:
		return ((tns__authorize *)ptr)->soap_out(soap, tag, id, "tns:authorize");
	case SOAP_TYPE_ClientSoap_tns__chatResponse:
		return ((tns__chatResponse *)ptr)->soap_out(soap, tag, id, "tns:chatResponse");
	case SOAP_TYPE_ClientSoap_tns__chat:
		return ((tns__chat *)ptr)->soap_out(soap, tag, id, "tns:chat");
	case SOAP_TYPE_ClientSoap_tns__isConnectedResponse:
		return ((tns__isConnectedResponse *)ptr)->soap_out(soap, tag, id, "tns:isConnectedResponse");
	case SOAP_TYPE_ClientSoap_tns__isConnected:
		return ((tns__isConnected *)ptr)->soap_out(soap, tag, id, "tns:isConnected");
	case SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse:
		return ((tns__isAuthorizedResponse *)ptr)->soap_out(soap, tag, id, "tns:isAuthorizedResponse");
	case SOAP_TYPE_ClientSoap_tns__isAuthorized:
		return ((tns__isAuthorized *)ptr)->soap_out(soap, tag, id, "tns:isAuthorized");
	case SOAP_TYPE_ClientSoap_PointerTotns__chatResponse:
		return soap_out_PointerTotns__chatResponse(soap, tag, id, (tns__chatResponse *const*)ptr, "tns:chatResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__chat:
		return soap_out_PointerTotns__chat(soap, tag, id, (tns__chat *const*)ptr, "tns:chat");
	case SOAP_TYPE_ClientSoap_PointerTotns__isConnectedResponse:
		return soap_out_PointerTotns__isConnectedResponse(soap, tag, id, (tns__isConnectedResponse *const*)ptr, "tns:isConnectedResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__isConnected:
		return soap_out_PointerTotns__isConnected(soap, tag, id, (tns__isConnected *const*)ptr, "tns:isConnected");
	case SOAP_TYPE_ClientSoap_PointerTotns__isAuthorizedResponse:
		return soap_out_PointerTotns__isAuthorizedResponse(soap, tag, id, (tns__isAuthorizedResponse *const*)ptr, "tns:isAuthorizedResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__isAuthorized:
		return soap_out_PointerTotns__isAuthorized(soap, tag, id, (tns__isAuthorized *const*)ptr, "tns:isAuthorized");
	case SOAP_TYPE_ClientSoap_PointerTotns__deauthorizeResponse:
		return soap_out_PointerTotns__deauthorizeResponse(soap, tag, id, (tns__deauthorizeResponse *const*)ptr, "tns:deauthorizeResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__deauthorize:
		return soap_out_PointerTotns__deauthorize(soap, tag, id, (tns__deauthorize *const*)ptr, "tns:deauthorize");
	case SOAP_TYPE_ClientSoap_PointerTotns__authorizeResponse:
		return soap_out_PointerTotns__authorizeResponse(soap, tag, id, (tns__authorizeResponse *const*)ptr, "tns:authorizeResponse");
	case SOAP_TYPE_ClientSoap_PointerTotns__authorize:
		return soap_out_PointerTotns__authorize(soap, tag, id, (tns__authorize *const*)ptr, "tns:authorize");
	case SOAP_TYPE_ClientSoap_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_ClientSoap__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_ClientSoap_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ClientSoap_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__deauthorizeResponse:
		((tns__deauthorizeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__deauthorize:
		((tns__deauthorize *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__authorizeResponse:
		((tns__authorizeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__authorize:
		((tns__authorize *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__chatResponse:
		((tns__chatResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__chat:
		((tns__chat *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__isConnectedResponse:
		((tns__isConnectedResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__isConnected:
		((tns__isConnected *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse:
		((tns__isAuthorizedResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap_tns__isAuthorized:
		((tns__isAuthorized *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ClientSoap___tns__chat:
		soap_serialize___tns__chat(soap, (const struct __tns__chat *)ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__isConnected:
		soap_serialize___tns__isConnected(soap, (const struct __tns__isConnected *)ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__isAuthorized:
		soap_serialize___tns__isAuthorized(soap, (const struct __tns__isAuthorized *)ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__deauthorize:
		soap_serialize___tns__deauthorize(soap, (const struct __tns__deauthorize *)ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__authorize:
		soap_serialize___tns__authorize(soap, (const struct __tns__authorize *)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__chatResponse:
		soap_serialize_PointerTotns__chatResponse(soap, (tns__chatResponse *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__chat:
		soap_serialize_PointerTotns__chat(soap, (tns__chat *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__isConnectedResponse:
		soap_serialize_PointerTotns__isConnectedResponse(soap, (tns__isConnectedResponse *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__isConnected:
		soap_serialize_PointerTotns__isConnected(soap, (tns__isConnected *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__isAuthorizedResponse:
		soap_serialize_PointerTotns__isAuthorizedResponse(soap, (tns__isAuthorizedResponse *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__isAuthorized:
		soap_serialize_PointerTotns__isAuthorized(soap, (tns__isAuthorized *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__deauthorizeResponse:
		soap_serialize_PointerTotns__deauthorizeResponse(soap, (tns__deauthorizeResponse *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__deauthorize:
		soap_serialize_PointerTotns__deauthorize(soap, (tns__deauthorize *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__authorizeResponse:
		soap_serialize_PointerTotns__authorizeResponse(soap, (tns__authorizeResponse *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTotns__authorize:
		soap_serialize_PointerTotns__authorize(soap, (tns__authorize *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_ClientSoap__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_ClientSoap_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 ClientSoap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_ClientSoap_tns__isAuthorized:
		return (void*)soap_instantiate_tns__isAuthorized(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse:
		return (void*)soap_instantiate_tns__isAuthorizedResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__isConnected:
		return (void*)soap_instantiate_tns__isConnected(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__isConnectedResponse:
		return (void*)soap_instantiate_tns__isConnectedResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__chat:
		return (void*)soap_instantiate_tns__chat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__chatResponse:
		return (void*)soap_instantiate_tns__chatResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__authorize:
		return (void*)soap_instantiate_tns__authorize(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__authorizeResponse:
		return (void*)soap_instantiate_tns__authorizeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__deauthorize:
		return (void*)soap_instantiate_tns__deauthorize(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap_tns__deauthorizeResponse:
		return (void*)soap_instantiate_tns__deauthorizeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap___tns__authorize:
		return (void*)soap_instantiate___tns__authorize(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap___tns__deauthorize:
		return (void*)soap_instantiate___tns__deauthorize(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap___tns__isAuthorized:
		return (void*)soap_instantiate___tns__isAuthorized(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap___tns__isConnected:
		return (void*)soap_instantiate___tns__isConnected(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ClientSoap___tns__chat:
		return (void*)soap_instantiate___tns__chat(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 ClientSoap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ClientSoap_tns__isAuthorized:
		if (p->size < 0)
			SOAP_DELETE((tns__isAuthorized*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__isAuthorized*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse:
		if (p->size < 0)
			SOAP_DELETE((tns__isAuthorizedResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__isAuthorizedResponse*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__isConnected:
		if (p->size < 0)
			SOAP_DELETE((tns__isConnected*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__isConnected*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__isConnectedResponse:
		if (p->size < 0)
			SOAP_DELETE((tns__isConnectedResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__isConnectedResponse*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__chat:
		if (p->size < 0)
			SOAP_DELETE((tns__chat*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__chat*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__chatResponse:
		if (p->size < 0)
			SOAP_DELETE((tns__chatResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__chatResponse*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__authorize:
		if (p->size < 0)
			SOAP_DELETE((tns__authorize*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__authorize*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__authorizeResponse:
		if (p->size < 0)
			SOAP_DELETE((tns__authorizeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__authorizeResponse*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__deauthorize:
		if (p->size < 0)
			SOAP_DELETE((tns__deauthorize*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__deauthorize*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap_tns__deauthorizeResponse:
		if (p->size < 0)
			SOAP_DELETE((tns__deauthorizeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((tns__deauthorizeResponse*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__authorize:
		if (p->size < 0)
			SOAP_DELETE((struct __tns__authorize*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tns__authorize*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__deauthorize:
		if (p->size < 0)
			SOAP_DELETE((struct __tns__deauthorize*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tns__deauthorize*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__isAuthorized:
		if (p->size < 0)
			SOAP_DELETE((struct __tns__isAuthorized*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tns__isAuthorized*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__isConnected:
		if (p->size < 0)
			SOAP_DELETE((struct __tns__isConnected*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tns__isConnected*)p->ptr);
		break;
	case SOAP_TYPE_ClientSoap___tns__chat:
		if (p->size < 0)
			SOAP_DELETE((struct __tns__chat*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tns__chat*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ClientSoap_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, ClientSoap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, ClientSoap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 ClientSoap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_ClientSoap_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_ClientSoap_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ClientSoap_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_ClientSoap_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_ClientSoap_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_ClientSoap_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ClientSoap_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ClientSoap_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ClientSoap_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ClientSoap_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_std__string, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void tns__deauthorizeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void tns__deauthorizeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__deauthorizeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__deauthorizeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__deauthorizeResponse(struct soap *soap, const char *tag, int id, const tns__deauthorizeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__deauthorizeResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__deauthorizeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__deauthorizeResponse(soap, tag, this, type);
}

SOAP_FMAC3 tns__deauthorizeResponse * SOAP_FMAC4 soap_in_tns__deauthorizeResponse(struct soap *soap, const char *tag, tns__deauthorizeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__deauthorizeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__deauthorizeResponse, sizeof(tns__deauthorizeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__deauthorizeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__deauthorizeResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__deauthorizeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__deauthorizeResponse, 0, sizeof(tns__deauthorizeResponse), 0, soap_copy_tns__deauthorizeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int tns__deauthorizeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__deauthorizeResponse);
	if (this->soap_out(soap, tag?tag:"tns:deauthorizeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__deauthorizeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__deauthorizeResponse(soap, this, tag, type);
}

SOAP_FMAC3 tns__deauthorizeResponse * SOAP_FMAC4 soap_get_tns__deauthorizeResponse(struct soap *soap, tns__deauthorizeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__deauthorizeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__deauthorizeResponse * SOAP_FMAC2 soap_instantiate_tns__deauthorizeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__deauthorizeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__deauthorizeResponse, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__deauthorizeResponse);
		if (size)
			*size = sizeof(tns__deauthorizeResponse);
		((tns__deauthorizeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__deauthorizeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__deauthorizeResponse);
		for (int i = 0; i < n; i++)
			((tns__deauthorizeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__deauthorizeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__deauthorizeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__deauthorizeResponse %p -> %p\n", q, p));
	*(tns__deauthorizeResponse*)p = *(tns__deauthorizeResponse*)q;
}

void tns__deauthorize::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void tns__deauthorize::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__deauthorize::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__deauthorize(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__deauthorize(struct soap *soap, const char *tag, int id, const tns__deauthorize *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__deauthorize), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__deauthorize::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__deauthorize(soap, tag, this, type);
}

SOAP_FMAC3 tns__deauthorize * SOAP_FMAC4 soap_in_tns__deauthorize(struct soap *soap, const char *tag, tns__deauthorize *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__deauthorize *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__deauthorize, sizeof(tns__deauthorize), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__deauthorize)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__deauthorize *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__deauthorize *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__deauthorize, 0, sizeof(tns__deauthorize), 0, soap_copy_tns__deauthorize);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int tns__deauthorize::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__deauthorize);
	if (this->soap_out(soap, tag?tag:"tns:deauthorize", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__deauthorize::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__deauthorize(soap, this, tag, type);
}

SOAP_FMAC3 tns__deauthorize * SOAP_FMAC4 soap_get_tns__deauthorize(struct soap *soap, tns__deauthorize *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__deauthorize(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__deauthorize * SOAP_FMAC2 soap_instantiate_tns__deauthorize(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__deauthorize(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__deauthorize, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__deauthorize);
		if (size)
			*size = sizeof(tns__deauthorize);
		((tns__deauthorize*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__deauthorize[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__deauthorize);
		for (int i = 0; i < n; i++)
			((tns__deauthorize*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__deauthorize*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__deauthorize(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__deauthorize %p -> %p\n", q, p));
	*(tns__deauthorize*)p = *(tns__deauthorize*)q;
}

void tns__authorizeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->tns__authorizeResponse::return_);
	/* transient soap skipped */
}

void tns__authorizeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__authorizeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__authorizeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__authorizeResponse(struct soap *soap, const char *tag, int id, const tns__authorizeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__authorizeResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &(a->tns__authorizeResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__authorizeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__authorizeResponse(soap, tag, this, type);
}

SOAP_FMAC3 tns__authorizeResponse * SOAP_FMAC4 soap_in_tns__authorizeResponse(struct soap *soap, const char *tag, tns__authorizeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__authorizeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__authorizeResponse, sizeof(tns__authorizeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__authorizeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__authorizeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "return", &(a->tns__authorizeResponse::return_), "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__authorizeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__authorizeResponse, 0, sizeof(tns__authorizeResponse), 0, soap_copy_tns__authorizeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int tns__authorizeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__authorizeResponse);
	if (this->soap_out(soap, tag?tag:"tns:authorizeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__authorizeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__authorizeResponse(soap, this, tag, type);
}

SOAP_FMAC3 tns__authorizeResponse * SOAP_FMAC4 soap_get_tns__authorizeResponse(struct soap *soap, tns__authorizeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__authorizeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__authorizeResponse * SOAP_FMAC2 soap_instantiate_tns__authorizeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__authorizeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__authorizeResponse, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__authorizeResponse);
		if (size)
			*size = sizeof(tns__authorizeResponse);
		((tns__authorizeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__authorizeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__authorizeResponse);
		for (int i = 0; i < n; i++)
			((tns__authorizeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__authorizeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__authorizeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__authorizeResponse %p -> %p\n", q, p));
	*(tns__authorizeResponse*)p = *(tns__authorizeResponse*)q;
}

void tns__authorize::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->tns__authorize::arg0);
	/* transient soap skipped */
}

void tns__authorize::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__authorize::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__authorize(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__authorize(struct soap *soap, const char *tag, int id, const tns__authorize *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__authorize), type))
		return soap->error;
	if (soap_out_LONG64(soap, "arg0", -1, &(a->tns__authorize::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__authorize::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__authorize(soap, tag, this, type);
}

SOAP_FMAC3 tns__authorize * SOAP_FMAC4 soap_in_tns__authorize(struct soap *soap, const char *tag, tns__authorize *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__authorize *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__authorize, sizeof(tns__authorize), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__authorize)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__authorize *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "arg0", &(a->tns__authorize::arg0), "xsd:long"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__authorize *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__authorize, 0, sizeof(tns__authorize), 0, soap_copy_tns__authorize);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int tns__authorize::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__authorize);
	if (this->soap_out(soap, tag?tag:"tns:authorize", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__authorize::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__authorize(soap, this, tag, type);
}

SOAP_FMAC3 tns__authorize * SOAP_FMAC4 soap_get_tns__authorize(struct soap *soap, tns__authorize *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__authorize(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__authorize * SOAP_FMAC2 soap_instantiate_tns__authorize(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__authorize(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__authorize, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__authorize);
		if (size)
			*size = sizeof(tns__authorize);
		((tns__authorize*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__authorize[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__authorize);
		for (int i = 0; i < n; i++)
			((tns__authorize*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__authorize*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__authorize(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__authorize %p -> %p\n", q, p));
	*(tns__authorize*)p = *(tns__authorize*)q;
}

void tns__chatResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void tns__chatResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__chatResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__chatResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__chatResponse(struct soap *soap, const char *tag, int id, const tns__chatResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__chatResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__chatResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__chatResponse(soap, tag, this, type);
}

SOAP_FMAC3 tns__chatResponse * SOAP_FMAC4 soap_in_tns__chatResponse(struct soap *soap, const char *tag, tns__chatResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__chatResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__chatResponse, sizeof(tns__chatResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__chatResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__chatResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__chatResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__chatResponse, 0, sizeof(tns__chatResponse), 0, soap_copy_tns__chatResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int tns__chatResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__chatResponse);
	if (this->soap_out(soap, tag?tag:"tns:chatResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__chatResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__chatResponse(soap, this, tag, type);
}

SOAP_FMAC3 tns__chatResponse * SOAP_FMAC4 soap_get_tns__chatResponse(struct soap *soap, tns__chatResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__chatResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__chatResponse * SOAP_FMAC2 soap_instantiate_tns__chatResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__chatResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__chatResponse, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__chatResponse);
		if (size)
			*size = sizeof(tns__chatResponse);
		((tns__chatResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__chatResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__chatResponse);
		for (int i = 0; i < n; i++)
			((tns__chatResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__chatResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__chatResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__chatResponse %p -> %p\n", q, p));
	*(tns__chatResponse*)p = *(tns__chatResponse*)q;
}

void tns__chat::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->tns__chat::arg0 = NULL;
	/* transient soap skipped */
}

void tns__chat::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->tns__chat::arg0);
	/* transient soap skipped */
}

int tns__chat::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__chat(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__chat(struct soap *soap, const char *tag, int id, const tns__chat *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__chat), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->tns__chat::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__chat::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__chat(soap, tag, this, type);
}

SOAP_FMAC3 tns__chat * SOAP_FMAC4 soap_in_tns__chat(struct soap *soap, const char *tag, tns__chat *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__chat *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__chat, sizeof(tns__chat), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__chat)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__chat *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->tns__chat::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__chat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__chat, 0, sizeof(tns__chat), 0, soap_copy_tns__chat);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int tns__chat::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__chat);
	if (this->soap_out(soap, tag?tag:"tns:chat", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__chat::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__chat(soap, this, tag, type);
}

SOAP_FMAC3 tns__chat * SOAP_FMAC4 soap_get_tns__chat(struct soap *soap, tns__chat *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__chat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__chat * SOAP_FMAC2 soap_instantiate_tns__chat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__chat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__chat, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__chat);
		if (size)
			*size = sizeof(tns__chat);
		((tns__chat*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__chat[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__chat);
		for (int i = 0; i < n; i++)
			((tns__chat*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__chat*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__chat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__chat %p -> %p\n", q, p));
	*(tns__chat*)p = *(tns__chat*)q;
}

void tns__isConnectedResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->tns__isConnectedResponse::return_);
	/* transient soap skipped */
}

void tns__isConnectedResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__isConnectedResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__isConnectedResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isConnectedResponse(struct soap *soap, const char *tag, int id, const tns__isConnectedResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__isConnectedResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &(a->tns__isConnectedResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__isConnectedResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__isConnectedResponse(soap, tag, this, type);
}

SOAP_FMAC3 tns__isConnectedResponse * SOAP_FMAC4 soap_in_tns__isConnectedResponse(struct soap *soap, const char *tag, tns__isConnectedResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__isConnectedResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__isConnectedResponse, sizeof(tns__isConnectedResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__isConnectedResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__isConnectedResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "return", &(a->tns__isConnectedResponse::return_), "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__isConnectedResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__isConnectedResponse, 0, sizeof(tns__isConnectedResponse), 0, soap_copy_tns__isConnectedResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int tns__isConnectedResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__isConnectedResponse);
	if (this->soap_out(soap, tag?tag:"tns:isConnectedResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__isConnectedResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__isConnectedResponse(soap, this, tag, type);
}

SOAP_FMAC3 tns__isConnectedResponse * SOAP_FMAC4 soap_get_tns__isConnectedResponse(struct soap *soap, tns__isConnectedResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__isConnectedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__isConnectedResponse * SOAP_FMAC2 soap_instantiate_tns__isConnectedResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__isConnectedResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__isConnectedResponse, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__isConnectedResponse);
		if (size)
			*size = sizeof(tns__isConnectedResponse);
		((tns__isConnectedResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__isConnectedResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__isConnectedResponse);
		for (int i = 0; i < n; i++)
			((tns__isConnectedResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__isConnectedResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isConnectedResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__isConnectedResponse %p -> %p\n", q, p));
	*(tns__isConnectedResponse*)p = *(tns__isConnectedResponse*)q;
}

void tns__isConnected::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void tns__isConnected::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__isConnected::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__isConnected(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isConnected(struct soap *soap, const char *tag, int id, const tns__isConnected *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__isConnected), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__isConnected::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__isConnected(soap, tag, this, type);
}

SOAP_FMAC3 tns__isConnected * SOAP_FMAC4 soap_in_tns__isConnected(struct soap *soap, const char *tag, tns__isConnected *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__isConnected *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__isConnected, sizeof(tns__isConnected), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__isConnected)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__isConnected *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__isConnected *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__isConnected, 0, sizeof(tns__isConnected), 0, soap_copy_tns__isConnected);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int tns__isConnected::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__isConnected);
	if (this->soap_out(soap, tag?tag:"tns:isConnected", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__isConnected::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__isConnected(soap, this, tag, type);
}

SOAP_FMAC3 tns__isConnected * SOAP_FMAC4 soap_get_tns__isConnected(struct soap *soap, tns__isConnected *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__isConnected(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__isConnected * SOAP_FMAC2 soap_instantiate_tns__isConnected(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__isConnected(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__isConnected, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__isConnected);
		if (size)
			*size = sizeof(tns__isConnected);
		((tns__isConnected*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__isConnected[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__isConnected);
		for (int i = 0; i < n; i++)
			((tns__isConnected*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__isConnected*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isConnected(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__isConnected %p -> %p\n", q, p));
	*(tns__isConnected*)p = *(tns__isConnected*)q;
}

void tns__isAuthorizedResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->tns__isAuthorizedResponse::return_);
	/* transient soap skipped */
}

void tns__isAuthorizedResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__isAuthorizedResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__isAuthorizedResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isAuthorizedResponse(struct soap *soap, const char *tag, int id, const tns__isAuthorizedResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &(a->tns__isAuthorizedResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__isAuthorizedResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__isAuthorizedResponse(soap, tag, this, type);
}

SOAP_FMAC3 tns__isAuthorizedResponse * SOAP_FMAC4 soap_in_tns__isAuthorizedResponse(struct soap *soap, const char *tag, tns__isAuthorizedResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__isAuthorizedResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse, sizeof(tns__isAuthorizedResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__isAuthorizedResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "return", &(a->tns__isAuthorizedResponse::return_), "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__isAuthorizedResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse, 0, sizeof(tns__isAuthorizedResponse), 0, soap_copy_tns__isAuthorizedResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int tns__isAuthorizedResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse);
	if (this->soap_out(soap, tag?tag:"tns:isAuthorizedResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__isAuthorizedResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__isAuthorizedResponse(soap, this, tag, type);
}

SOAP_FMAC3 tns__isAuthorizedResponse * SOAP_FMAC4 soap_get_tns__isAuthorizedResponse(struct soap *soap, tns__isAuthorizedResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__isAuthorizedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__isAuthorizedResponse * SOAP_FMAC2 soap_instantiate_tns__isAuthorizedResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__isAuthorizedResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__isAuthorizedResponse);
		if (size)
			*size = sizeof(tns__isAuthorizedResponse);
		((tns__isAuthorizedResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__isAuthorizedResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__isAuthorizedResponse);
		for (int i = 0; i < n; i++)
			((tns__isAuthorizedResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__isAuthorizedResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isAuthorizedResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__isAuthorizedResponse %p -> %p\n", q, p));
	*(tns__isAuthorizedResponse*)p = *(tns__isAuthorizedResponse*)q;
}

void tns__isAuthorized::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void tns__isAuthorized::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int tns__isAuthorized::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_tns__isAuthorized(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isAuthorized(struct soap *soap, const char *tag, int id, const tns__isAuthorized *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_tns__isAuthorized), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *tns__isAuthorized::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_tns__isAuthorized(soap, tag, this, type);
}

SOAP_FMAC3 tns__isAuthorized * SOAP_FMAC4 soap_in_tns__isAuthorized(struct soap *soap, const char *tag, tns__isAuthorized *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (tns__isAuthorized *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_tns__isAuthorized, sizeof(tns__isAuthorized), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ClientSoap_tns__isAuthorized)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (tns__isAuthorized *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (tns__isAuthorized *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_tns__isAuthorized, 0, sizeof(tns__isAuthorized), 0, soap_copy_tns__isAuthorized);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int tns__isAuthorized::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ClientSoap_tns__isAuthorized);
	if (this->soap_out(soap, tag?tag:"tns:isAuthorized", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *tns__isAuthorized::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_tns__isAuthorized(soap, this, tag, type);
}

SOAP_FMAC3 tns__isAuthorized * SOAP_FMAC4 soap_get_tns__isAuthorized(struct soap *soap, tns__isAuthorized *p, const char *tag, const char *type)
{
	if ((p = soap_in_tns__isAuthorized(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 tns__isAuthorized * SOAP_FMAC2 soap_instantiate_tns__isAuthorized(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tns__isAuthorized(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_tns__isAuthorized, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(tns__isAuthorized);
		if (size)
			*size = sizeof(tns__isAuthorized);
		((tns__isAuthorized*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(tns__isAuthorized[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(tns__isAuthorized);
		for (int i = 0; i < n; i++)
			((tns__isAuthorized*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (tns__isAuthorized*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isAuthorized(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying tns__isAuthorized %p -> %p\n", q, p));
	*(tns__isAuthorized*)p = *(tns__isAuthorized*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_SOAP_ENV__Fault, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_SOAP_ENV__Reason, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_SOAP_ENV__Detail, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_SOAP_ENV__Code, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClientSoap_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ClientSoap_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap_SOAP_ENV__Header, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__chat(struct soap *soap, struct __tns__chat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tns__chat_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__chat(struct soap *soap, const struct __tns__chat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTotns__chat(soap, &a->tns__chat_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__chat(struct soap *soap, const char *tag, int id, const struct __tns__chat *a, const char *type)
{
	if (soap_out_PointerTotns__chat(soap, "tns:chat", -1, &a->tns__chat_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__chat * SOAP_FMAC4 soap_in___tns__chat(struct soap *soap, const char *tag, struct __tns__chat *a, const char *type)
{
	size_t soap_flag_tns__chat_ = 1;
	short soap_flag;
	a = (struct __tns__chat *)soap_id_enter(soap, "", a, SOAP_TYPE_ClientSoap___tns__chat, sizeof(struct __tns__chat), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tns__chat(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tns__chat_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotns__chat(soap, "tns:chat", &a->tns__chat_, "tns:chat"))
				{	soap_flag_tns__chat_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__chat(struct soap *soap, const struct __tns__chat *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tns__chat(soap, tag?tag:"-tns:chat", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__chat * SOAP_FMAC4 soap_get___tns__chat(struct soap *soap, struct __tns__chat *p, const char *tag, const char *type)
{
	if ((p = soap_in___tns__chat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tns__chat * SOAP_FMAC2 soap_instantiate___tns__chat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tns__chat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap___tns__chat, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__chat);
		if (size)
			*size = sizeof(struct __tns__chat);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__chat[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tns__chat);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tns__chat*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__chat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tns__chat %p -> %p\n", q, p));
	*(struct __tns__chat*)p = *(struct __tns__chat*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__isConnected(struct soap *soap, struct __tns__isConnected *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tns__isConnected_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__isConnected(struct soap *soap, const struct __tns__isConnected *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTotns__isConnected(soap, &a->tns__isConnected_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__isConnected(struct soap *soap, const char *tag, int id, const struct __tns__isConnected *a, const char *type)
{
	if (soap_out_PointerTotns__isConnected(soap, "tns:isConnected", -1, &a->tns__isConnected_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__isConnected * SOAP_FMAC4 soap_in___tns__isConnected(struct soap *soap, const char *tag, struct __tns__isConnected *a, const char *type)
{
	size_t soap_flag_tns__isConnected_ = 1;
	short soap_flag;
	a = (struct __tns__isConnected *)soap_id_enter(soap, "", a, SOAP_TYPE_ClientSoap___tns__isConnected, sizeof(struct __tns__isConnected), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tns__isConnected(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tns__isConnected_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotns__isConnected(soap, "tns:isConnected", &a->tns__isConnected_, "tns:isConnected"))
				{	soap_flag_tns__isConnected_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__isConnected(struct soap *soap, const struct __tns__isConnected *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tns__isConnected(soap, tag?tag:"-tns:isConnected", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__isConnected * SOAP_FMAC4 soap_get___tns__isConnected(struct soap *soap, struct __tns__isConnected *p, const char *tag, const char *type)
{
	if ((p = soap_in___tns__isConnected(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tns__isConnected * SOAP_FMAC2 soap_instantiate___tns__isConnected(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tns__isConnected(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap___tns__isConnected, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__isConnected);
		if (size)
			*size = sizeof(struct __tns__isConnected);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__isConnected[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tns__isConnected);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tns__isConnected*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__isConnected(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tns__isConnected %p -> %p\n", q, p));
	*(struct __tns__isConnected*)p = *(struct __tns__isConnected*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__isAuthorized(struct soap *soap, struct __tns__isAuthorized *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tns__isAuthorized_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__isAuthorized(struct soap *soap, const struct __tns__isAuthorized *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTotns__isAuthorized(soap, &a->tns__isAuthorized_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__isAuthorized(struct soap *soap, const char *tag, int id, const struct __tns__isAuthorized *a, const char *type)
{
	if (soap_out_PointerTotns__isAuthorized(soap, "tns:isAuthorized", -1, &a->tns__isAuthorized_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__isAuthorized * SOAP_FMAC4 soap_in___tns__isAuthorized(struct soap *soap, const char *tag, struct __tns__isAuthorized *a, const char *type)
{
	size_t soap_flag_tns__isAuthorized_ = 1;
	short soap_flag;
	a = (struct __tns__isAuthorized *)soap_id_enter(soap, "", a, SOAP_TYPE_ClientSoap___tns__isAuthorized, sizeof(struct __tns__isAuthorized), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tns__isAuthorized(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tns__isAuthorized_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotns__isAuthorized(soap, "tns:isAuthorized", &a->tns__isAuthorized_, "tns:isAuthorized"))
				{	soap_flag_tns__isAuthorized_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__isAuthorized(struct soap *soap, const struct __tns__isAuthorized *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tns__isAuthorized(soap, tag?tag:"-tns:isAuthorized", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__isAuthorized * SOAP_FMAC4 soap_get___tns__isAuthorized(struct soap *soap, struct __tns__isAuthorized *p, const char *tag, const char *type)
{
	if ((p = soap_in___tns__isAuthorized(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tns__isAuthorized * SOAP_FMAC2 soap_instantiate___tns__isAuthorized(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tns__isAuthorized(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap___tns__isAuthorized, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__isAuthorized);
		if (size)
			*size = sizeof(struct __tns__isAuthorized);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__isAuthorized[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tns__isAuthorized);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tns__isAuthorized*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__isAuthorized(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tns__isAuthorized %p -> %p\n", q, p));
	*(struct __tns__isAuthorized*)p = *(struct __tns__isAuthorized*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__deauthorize(struct soap *soap, struct __tns__deauthorize *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tns__deauthorize_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__deauthorize(struct soap *soap, const struct __tns__deauthorize *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTotns__deauthorize(soap, &a->tns__deauthorize_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__deauthorize(struct soap *soap, const char *tag, int id, const struct __tns__deauthorize *a, const char *type)
{
	if (soap_out_PointerTotns__deauthorize(soap, "tns:deauthorize", -1, &a->tns__deauthorize_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__deauthorize * SOAP_FMAC4 soap_in___tns__deauthorize(struct soap *soap, const char *tag, struct __tns__deauthorize *a, const char *type)
{
	size_t soap_flag_tns__deauthorize_ = 1;
	short soap_flag;
	a = (struct __tns__deauthorize *)soap_id_enter(soap, "", a, SOAP_TYPE_ClientSoap___tns__deauthorize, sizeof(struct __tns__deauthorize), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tns__deauthorize(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tns__deauthorize_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotns__deauthorize(soap, "tns:deauthorize", &a->tns__deauthorize_, "tns:deauthorize"))
				{	soap_flag_tns__deauthorize_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__deauthorize(struct soap *soap, const struct __tns__deauthorize *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tns__deauthorize(soap, tag?tag:"-tns:deauthorize", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__deauthorize * SOAP_FMAC4 soap_get___tns__deauthorize(struct soap *soap, struct __tns__deauthorize *p, const char *tag, const char *type)
{
	if ((p = soap_in___tns__deauthorize(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tns__deauthorize * SOAP_FMAC2 soap_instantiate___tns__deauthorize(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tns__deauthorize(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap___tns__deauthorize, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__deauthorize);
		if (size)
			*size = sizeof(struct __tns__deauthorize);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__deauthorize[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tns__deauthorize);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tns__deauthorize*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__deauthorize(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tns__deauthorize %p -> %p\n", q, p));
	*(struct __tns__deauthorize*)p = *(struct __tns__deauthorize*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__authorize(struct soap *soap, struct __tns__authorize *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tns__authorize_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__authorize(struct soap *soap, const struct __tns__authorize *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTotns__authorize(soap, &a->tns__authorize_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__authorize(struct soap *soap, const char *tag, int id, const struct __tns__authorize *a, const char *type)
{
	if (soap_out_PointerTotns__authorize(soap, "tns:authorize", -1, &a->tns__authorize_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__authorize * SOAP_FMAC4 soap_in___tns__authorize(struct soap *soap, const char *tag, struct __tns__authorize *a, const char *type)
{
	size_t soap_flag_tns__authorize_ = 1;
	short soap_flag;
	a = (struct __tns__authorize *)soap_id_enter(soap, "", a, SOAP_TYPE_ClientSoap___tns__authorize, sizeof(struct __tns__authorize), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tns__authorize(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tns__authorize_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotns__authorize(soap, "tns:authorize", &a->tns__authorize_, "tns:authorize"))
				{	soap_flag_tns__authorize_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__authorize(struct soap *soap, const struct __tns__authorize *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tns__authorize(soap, tag?tag:"-tns:authorize", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tns__authorize * SOAP_FMAC4 soap_get___tns__authorize(struct soap *soap, struct __tns__authorize *p, const char *tag, const char *type)
{
	if ((p = soap_in___tns__authorize(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tns__authorize * SOAP_FMAC2 soap_instantiate___tns__authorize(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tns__authorize(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ClientSoap___tns__authorize, n, ClientSoap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__authorize);
		if (size)
			*size = sizeof(struct __tns__authorize);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tns__authorize[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tns__authorize);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tns__authorize*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__authorize(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tns__authorize %p -> %p\n", q, p));
	*(struct __tns__authorize*)p = *(struct __tns__authorize*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__chatResponse(struct soap *soap, tns__chatResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__chatResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__chatResponse(struct soap *soap, const char *tag, int id, tns__chatResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__chatResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__chatResponse ** SOAP_FMAC4 soap_in_PointerTotns__chatResponse(struct soap *soap, const char *tag, tns__chatResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__chatResponse **)soap_malloc(soap, sizeof(tns__chatResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__chatResponse *)soap_instantiate_tns__chatResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__chatResponse ** p = (tns__chatResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__chatResponse, sizeof(tns__chatResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__chatResponse(struct soap *soap, tns__chatResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__chatResponse);
	if (soap_out_PointerTotns__chatResponse(soap, tag?tag:"tns:chatResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__chatResponse ** SOAP_FMAC4 soap_get_PointerTotns__chatResponse(struct soap *soap, tns__chatResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__chatResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__chat(struct soap *soap, tns__chat *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__chat))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__chat(struct soap *soap, const char *tag, int id, tns__chat *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__chat);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__chat ** SOAP_FMAC4 soap_in_PointerTotns__chat(struct soap *soap, const char *tag, tns__chat **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__chat **)soap_malloc(soap, sizeof(tns__chat *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__chat *)soap_instantiate_tns__chat(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__chat ** p = (tns__chat **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__chat, sizeof(tns__chat), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__chat(struct soap *soap, tns__chat *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__chat);
	if (soap_out_PointerTotns__chat(soap, tag?tag:"tns:chat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__chat ** SOAP_FMAC4 soap_get_PointerTotns__chat(struct soap *soap, tns__chat **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__chat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isConnectedResponse(struct soap *soap, tns__isConnectedResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__isConnectedResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isConnectedResponse(struct soap *soap, const char *tag, int id, tns__isConnectedResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__isConnectedResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__isConnectedResponse ** SOAP_FMAC4 soap_in_PointerTotns__isConnectedResponse(struct soap *soap, const char *tag, tns__isConnectedResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__isConnectedResponse **)soap_malloc(soap, sizeof(tns__isConnectedResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__isConnectedResponse *)soap_instantiate_tns__isConnectedResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__isConnectedResponse ** p = (tns__isConnectedResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__isConnectedResponse, sizeof(tns__isConnectedResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isConnectedResponse(struct soap *soap, tns__isConnectedResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__isConnectedResponse);
	if (soap_out_PointerTotns__isConnectedResponse(soap, tag?tag:"tns:isConnectedResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__isConnectedResponse ** SOAP_FMAC4 soap_get_PointerTotns__isConnectedResponse(struct soap *soap, tns__isConnectedResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__isConnectedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isConnected(struct soap *soap, tns__isConnected *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__isConnected))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isConnected(struct soap *soap, const char *tag, int id, tns__isConnected *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__isConnected);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__isConnected ** SOAP_FMAC4 soap_in_PointerTotns__isConnected(struct soap *soap, const char *tag, tns__isConnected **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__isConnected **)soap_malloc(soap, sizeof(tns__isConnected *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__isConnected *)soap_instantiate_tns__isConnected(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__isConnected ** p = (tns__isConnected **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__isConnected, sizeof(tns__isConnected), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isConnected(struct soap *soap, tns__isConnected *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__isConnected);
	if (soap_out_PointerTotns__isConnected(soap, tag?tag:"tns:isConnected", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__isConnected ** SOAP_FMAC4 soap_get_PointerTotns__isConnected(struct soap *soap, tns__isConnected **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__isConnected(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isAuthorizedResponse(struct soap *soap, tns__isAuthorizedResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isAuthorizedResponse(struct soap *soap, const char *tag, int id, tns__isAuthorizedResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__isAuthorizedResponse ** SOAP_FMAC4 soap_in_PointerTotns__isAuthorizedResponse(struct soap *soap, const char *tag, tns__isAuthorizedResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__isAuthorizedResponse **)soap_malloc(soap, sizeof(tns__isAuthorizedResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__isAuthorizedResponse *)soap_instantiate_tns__isAuthorizedResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__isAuthorizedResponse ** p = (tns__isAuthorizedResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse, sizeof(tns__isAuthorizedResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isAuthorizedResponse(struct soap *soap, tns__isAuthorizedResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__isAuthorizedResponse);
	if (soap_out_PointerTotns__isAuthorizedResponse(soap, tag?tag:"tns:isAuthorizedResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__isAuthorizedResponse ** SOAP_FMAC4 soap_get_PointerTotns__isAuthorizedResponse(struct soap *soap, tns__isAuthorizedResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__isAuthorizedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isAuthorized(struct soap *soap, tns__isAuthorized *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__isAuthorized))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isAuthorized(struct soap *soap, const char *tag, int id, tns__isAuthorized *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__isAuthorized);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__isAuthorized ** SOAP_FMAC4 soap_in_PointerTotns__isAuthorized(struct soap *soap, const char *tag, tns__isAuthorized **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__isAuthorized **)soap_malloc(soap, sizeof(tns__isAuthorized *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__isAuthorized *)soap_instantiate_tns__isAuthorized(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__isAuthorized ** p = (tns__isAuthorized **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__isAuthorized, sizeof(tns__isAuthorized), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isAuthorized(struct soap *soap, tns__isAuthorized *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__isAuthorized);
	if (soap_out_PointerTotns__isAuthorized(soap, tag?tag:"tns:isAuthorized", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__isAuthorized ** SOAP_FMAC4 soap_get_PointerTotns__isAuthorized(struct soap *soap, tns__isAuthorized **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__isAuthorized(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__deauthorizeResponse(struct soap *soap, tns__deauthorizeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__deauthorizeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__deauthorizeResponse(struct soap *soap, const char *tag, int id, tns__deauthorizeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__deauthorizeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__deauthorizeResponse ** SOAP_FMAC4 soap_in_PointerTotns__deauthorizeResponse(struct soap *soap, const char *tag, tns__deauthorizeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__deauthorizeResponse **)soap_malloc(soap, sizeof(tns__deauthorizeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__deauthorizeResponse *)soap_instantiate_tns__deauthorizeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__deauthorizeResponse ** p = (tns__deauthorizeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__deauthorizeResponse, sizeof(tns__deauthorizeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__deauthorizeResponse(struct soap *soap, tns__deauthorizeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__deauthorizeResponse);
	if (soap_out_PointerTotns__deauthorizeResponse(soap, tag?tag:"tns:deauthorizeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__deauthorizeResponse ** SOAP_FMAC4 soap_get_PointerTotns__deauthorizeResponse(struct soap *soap, tns__deauthorizeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__deauthorizeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__deauthorize(struct soap *soap, tns__deauthorize *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__deauthorize))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__deauthorize(struct soap *soap, const char *tag, int id, tns__deauthorize *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__deauthorize);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__deauthorize ** SOAP_FMAC4 soap_in_PointerTotns__deauthorize(struct soap *soap, const char *tag, tns__deauthorize **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__deauthorize **)soap_malloc(soap, sizeof(tns__deauthorize *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__deauthorize *)soap_instantiate_tns__deauthorize(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__deauthorize ** p = (tns__deauthorize **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__deauthorize, sizeof(tns__deauthorize), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__deauthorize(struct soap *soap, tns__deauthorize *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__deauthorize);
	if (soap_out_PointerTotns__deauthorize(soap, tag?tag:"tns:deauthorize", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__deauthorize ** SOAP_FMAC4 soap_get_PointerTotns__deauthorize(struct soap *soap, tns__deauthorize **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__deauthorize(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__authorizeResponse(struct soap *soap, tns__authorizeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__authorizeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__authorizeResponse(struct soap *soap, const char *tag, int id, tns__authorizeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__authorizeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__authorizeResponse ** SOAP_FMAC4 soap_in_PointerTotns__authorizeResponse(struct soap *soap, const char *tag, tns__authorizeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__authorizeResponse **)soap_malloc(soap, sizeof(tns__authorizeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__authorizeResponse *)soap_instantiate_tns__authorizeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__authorizeResponse ** p = (tns__authorizeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__authorizeResponse, sizeof(tns__authorizeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__authorizeResponse(struct soap *soap, tns__authorizeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__authorizeResponse);
	if (soap_out_PointerTotns__authorizeResponse(soap, tag?tag:"tns:authorizeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__authorizeResponse ** SOAP_FMAC4 soap_get_PointerTotns__authorizeResponse(struct soap *soap, tns__authorizeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__authorizeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__authorize(struct soap *soap, tns__authorize *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_tns__authorize))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__authorize(struct soap *soap, const char *tag, int id, tns__authorize *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_tns__authorize);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 tns__authorize ** SOAP_FMAC4 soap_in_PointerTotns__authorize(struct soap *soap, const char *tag, tns__authorize **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (tns__authorize **)soap_malloc(soap, sizeof(tns__authorize *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (tns__authorize *)soap_instantiate_tns__authorize(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	tns__authorize ** p = (tns__authorize **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_tns__authorize, sizeof(tns__authorize), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__authorize(struct soap *soap, tns__authorize *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTotns__authorize);
	if (soap_out_PointerTotns__authorize(soap, tag?tag:"tns:authorize", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 tns__authorize ** SOAP_FMAC4 soap_get_PointerTotns__authorize(struct soap *soap, tns__authorize **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotns__authorize(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ClientSoap_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ClientSoap_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ClientSoap_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_ClientSoap__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_ClientSoap__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_ClientSoap_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_ClientSoap_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_ClientSoap_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ClientSoap_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

} // namespace ClientSoap


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of ClientSoapC.cpp */
