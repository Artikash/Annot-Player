/* ClientSoapClientAgentServiceSoapBindingService.cpp
   Generated by gSOAP 2.8.3 from _clientsoap.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "ClientSoapClientAgentServiceSoapBindingService.h"

namespace ClientSoap {

ClientAgentServiceSoapBindingService::ClientAgentServiceSoapBindingService()
{	ClientAgentServiceSoapBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ClientAgentServiceSoapBindingService::ClientAgentServiceSoapBindingService(const struct soap &_soap) : soap(_soap)
{ }

ClientAgentServiceSoapBindingService::ClientAgentServiceSoapBindingService(soap_mode iomode)
{	ClientAgentServiceSoapBindingService_init(iomode, iomode);
}

ClientAgentServiceSoapBindingService::ClientAgentServiceSoapBindingService(soap_mode imode, soap_mode omode)
{	ClientAgentServiceSoapBindingService_init(imode, omode);
}

ClientAgentServiceSoapBindingService::~ClientAgentServiceSoapBindingService()
{ }

void ClientAgentServiceSoapBindingService::ClientAgentServiceSoapBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"tns", "http://service.annot.me/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
};

void ClientAgentServiceSoapBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

#ifndef WITH_PURE_VIRTUAL
ClientAgentServiceSoapBindingService *ClientAgentServiceSoapBindingService::copy()
{	ClientAgentServiceSoapBindingService *dup = SOAP_NEW_COPY(ClientAgentServiceSoapBindingService(*(struct soap*)this));
	return dup;
}
#endif

int ClientAgentServiceSoapBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int ClientAgentServiceSoapBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int ClientAgentServiceSoapBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int ClientAgentServiceSoapBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int ClientAgentServiceSoapBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void ClientAgentServiceSoapBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void ClientAgentServiceSoapBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *ClientAgentServiceSoapBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void ClientAgentServiceSoapBindingService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *ClientAgentServiceSoapBindingService::soap_header()
{	return this->header;
}

int ClientAgentServiceSoapBindingService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET ClientAgentServiceSoapBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET ClientAgentServiceSoapBindingService::accept()
{	return soap_accept(this);
}

int ClientAgentServiceSoapBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tns__authorize(ClientAgentServiceSoapBindingService*);
static int serve___tns__deauthorize(ClientAgentServiceSoapBindingService*);
static int serve___tns__isAuthorized(ClientAgentServiceSoapBindingService*);
static int serve___tns__isConnected(ClientAgentServiceSoapBindingService*);
static int serve___tns__chat(ClientAgentServiceSoapBindingService*);

int ClientAgentServiceSoapBindingService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "tns:authorize"))
		return serve___tns__authorize(this);
	if (!soap_match_tag(this, this->tag, "tns:deauthorize"))
		return serve___tns__deauthorize(this);
	if (!soap_match_tag(this, this->tag, "tns:isAuthorized"))
		return serve___tns__isAuthorized(this);
	if (!soap_match_tag(this, this->tag, "tns:isConnected"))
		return serve___tns__isConnected(this);
	if (!soap_match_tag(this, this->tag, "tns:chat"))
		return serve___tns__chat(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___tns__authorize(ClientAgentServiceSoapBindingService *soap)
{	struct __tns__authorize soap_tmp___tns__authorize;
	tns__authorizeResponse tns__authorizeResponse_;
	tns__authorizeResponse_.soap_default(soap);
	soap_default___tns__authorize(soap, &soap_tmp___tns__authorize);
	soap->encodingStyle = NULL;
	if (!soap_get___tns__authorize(soap, &soap_tmp___tns__authorize, "-tns:authorize", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->authorize(soap_tmp___tns__authorize.tns__authorize_, &tns__authorizeResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	tns__authorizeResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__authorizeResponse_.soap_put(soap, "tns:authorizeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__authorizeResponse_.soap_put(soap, "tns:authorizeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tns__deauthorize(ClientAgentServiceSoapBindingService *soap)
{	struct __tns__deauthorize soap_tmp___tns__deauthorize;
	tns__deauthorizeResponse tns__deauthorizeResponse_;
	tns__deauthorizeResponse_.soap_default(soap);
	soap_default___tns__deauthorize(soap, &soap_tmp___tns__deauthorize);
	soap->encodingStyle = NULL;
	if (!soap_get___tns__deauthorize(soap, &soap_tmp___tns__deauthorize, "-tns:deauthorize", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->deauthorize(soap_tmp___tns__deauthorize.tns__deauthorize_, &tns__deauthorizeResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	tns__deauthorizeResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__deauthorizeResponse_.soap_put(soap, "tns:deauthorizeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__deauthorizeResponse_.soap_put(soap, "tns:deauthorizeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tns__isAuthorized(ClientAgentServiceSoapBindingService *soap)
{	struct __tns__isAuthorized soap_tmp___tns__isAuthorized;
	tns__isAuthorizedResponse tns__isAuthorizedResponse_;
	tns__isAuthorizedResponse_.soap_default(soap);
	soap_default___tns__isAuthorized(soap, &soap_tmp___tns__isAuthorized);
	soap->encodingStyle = NULL;
	if (!soap_get___tns__isAuthorized(soap, &soap_tmp___tns__isAuthorized, "-tns:isAuthorized", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->isAuthorized(soap_tmp___tns__isAuthorized.tns__isAuthorized_, &tns__isAuthorizedResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	tns__isAuthorizedResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__isAuthorizedResponse_.soap_put(soap, "tns:isAuthorizedResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__isAuthorizedResponse_.soap_put(soap, "tns:isAuthorizedResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tns__isConnected(ClientAgentServiceSoapBindingService *soap)
{	struct __tns__isConnected soap_tmp___tns__isConnected;
	tns__isConnectedResponse tns__isConnectedResponse_;
	tns__isConnectedResponse_.soap_default(soap);
	soap_default___tns__isConnected(soap, &soap_tmp___tns__isConnected);
	soap->encodingStyle = NULL;
	if (!soap_get___tns__isConnected(soap, &soap_tmp___tns__isConnected, "-tns:isConnected", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->isConnected(soap_tmp___tns__isConnected.tns__isConnected_, &tns__isConnectedResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	tns__isConnectedResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__isConnectedResponse_.soap_put(soap, "tns:isConnectedResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__isConnectedResponse_.soap_put(soap, "tns:isConnectedResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tns__chat(ClientAgentServiceSoapBindingService *soap)
{	struct __tns__chat soap_tmp___tns__chat;
	tns__chatResponse tns__chatResponse_;
	tns__chatResponse_.soap_default(soap);
	soap_default___tns__chat(soap, &soap_tmp___tns__chat);
	soap->encodingStyle = NULL;
	if (!soap_get___tns__chat(soap, &soap_tmp___tns__chat, "-tns:chat", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->chat(soap_tmp___tns__chat.tns__chat_, &tns__chatResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	tns__chatResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__chatResponse_.soap_put(soap, "tns:chatResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__chatResponse_.soap_put(soap, "tns:chatResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

} // namespace ClientSoap

/* End of server object code */
