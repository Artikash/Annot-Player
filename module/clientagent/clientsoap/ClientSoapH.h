/* ClientSoapH.h
   Generated by gSOAP 2.8.3 from _clientsoap.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef ClientSoapH_H
#define ClientSoapH_H
#include "ClientSoapStub.h"

namespace ClientSoap {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 void * SOAP_FMAC4 ClientSoap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 ClientSoap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 ClientSoap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_byte
#define SOAP_TYPE_ClientSoap_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin_send(soap) || ClientSoap::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_int
#define SOAP_TYPE_ClientSoap_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin_send(soap) || ClientSoap::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_LONG64
#define SOAP_TYPE_ClientSoap_LONG64 (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_begin_send(soap) || ClientSoap::soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_bool
#define SOAP_TYPE_ClientSoap_bool (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_begin_send(soap) || ClientSoap::soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_std__string
#define SOAP_TYPE_ClientSoap_std__string (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "string", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#define soap_new_std__string(soap, n) soap_instantiate_std__string(soap, n, NULL, NULL, NULL)


#define soap_delete_std__string(soap, p) soap_delete(soap, p)

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__deauthorizeResponse
#define SOAP_TYPE_ClientSoap_tns__deauthorizeResponse (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__deauthorizeResponse(struct soap*, const char*, int, const tns__deauthorizeResponse *, const char*);
SOAP_FMAC3 tns__deauthorizeResponse * SOAP_FMAC4 soap_in_tns__deauthorizeResponse(struct soap*, const char*, tns__deauthorizeResponse *, const char*);

#ifndef soap_write_tns__deauthorizeResponse
#define soap_write_tns__deauthorizeResponse(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:deauthorizeResponse", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__deauthorizeResponse
#define soap_read_tns__deauthorizeResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__deauthorizeResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__deauthorizeResponse * SOAP_FMAC4 soap_get_tns__deauthorizeResponse(struct soap*, tns__deauthorizeResponse *, const char*, const char*);

#define soap_new_tns__deauthorizeResponse(soap, n) soap_instantiate_tns__deauthorizeResponse(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__deauthorizeResponse(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__deauthorizeResponse * SOAP_FMAC2 soap_instantiate_tns__deauthorizeResponse(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__deauthorizeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__deauthorize
#define SOAP_TYPE_ClientSoap_tns__deauthorize (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__deauthorize(struct soap*, const char*, int, const tns__deauthorize *, const char*);
SOAP_FMAC3 tns__deauthorize * SOAP_FMAC4 soap_in_tns__deauthorize(struct soap*, const char*, tns__deauthorize *, const char*);

#ifndef soap_write_tns__deauthorize
#define soap_write_tns__deauthorize(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:deauthorize", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__deauthorize
#define soap_read_tns__deauthorize(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__deauthorize(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__deauthorize * SOAP_FMAC4 soap_get_tns__deauthorize(struct soap*, tns__deauthorize *, const char*, const char*);

#define soap_new_tns__deauthorize(soap, n) soap_instantiate_tns__deauthorize(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__deauthorize(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__deauthorize * SOAP_FMAC2 soap_instantiate_tns__deauthorize(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__deauthorize(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__authorizeResponse
#define SOAP_TYPE_ClientSoap_tns__authorizeResponse (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__authorizeResponse(struct soap*, const char*, int, const tns__authorizeResponse *, const char*);
SOAP_FMAC3 tns__authorizeResponse * SOAP_FMAC4 soap_in_tns__authorizeResponse(struct soap*, const char*, tns__authorizeResponse *, const char*);

#ifndef soap_write_tns__authorizeResponse
#define soap_write_tns__authorizeResponse(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:authorizeResponse", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__authorizeResponse
#define soap_read_tns__authorizeResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__authorizeResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__authorizeResponse * SOAP_FMAC4 soap_get_tns__authorizeResponse(struct soap*, tns__authorizeResponse *, const char*, const char*);

#define soap_new_tns__authorizeResponse(soap, n) soap_instantiate_tns__authorizeResponse(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__authorizeResponse(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__authorizeResponse * SOAP_FMAC2 soap_instantiate_tns__authorizeResponse(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__authorizeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__authorize
#define SOAP_TYPE_ClientSoap_tns__authorize (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__authorize(struct soap*, const char*, int, const tns__authorize *, const char*);
SOAP_FMAC3 tns__authorize * SOAP_FMAC4 soap_in_tns__authorize(struct soap*, const char*, tns__authorize *, const char*);

#ifndef soap_write_tns__authorize
#define soap_write_tns__authorize(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:authorize", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__authorize
#define soap_read_tns__authorize(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__authorize(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__authorize * SOAP_FMAC4 soap_get_tns__authorize(struct soap*, tns__authorize *, const char*, const char*);

#define soap_new_tns__authorize(soap, n) soap_instantiate_tns__authorize(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__authorize(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__authorize * SOAP_FMAC2 soap_instantiate_tns__authorize(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__authorize(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__chatResponse
#define SOAP_TYPE_ClientSoap_tns__chatResponse (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__chatResponse(struct soap*, const char*, int, const tns__chatResponse *, const char*);
SOAP_FMAC3 tns__chatResponse * SOAP_FMAC4 soap_in_tns__chatResponse(struct soap*, const char*, tns__chatResponse *, const char*);

#ifndef soap_write_tns__chatResponse
#define soap_write_tns__chatResponse(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:chatResponse", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__chatResponse
#define soap_read_tns__chatResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__chatResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__chatResponse * SOAP_FMAC4 soap_get_tns__chatResponse(struct soap*, tns__chatResponse *, const char*, const char*);

#define soap_new_tns__chatResponse(soap, n) soap_instantiate_tns__chatResponse(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__chatResponse(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__chatResponse * SOAP_FMAC2 soap_instantiate_tns__chatResponse(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__chatResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__chat
#define SOAP_TYPE_ClientSoap_tns__chat (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__chat(struct soap*, const char*, int, const tns__chat *, const char*);
SOAP_FMAC3 tns__chat * SOAP_FMAC4 soap_in_tns__chat(struct soap*, const char*, tns__chat *, const char*);

#ifndef soap_write_tns__chat
#define soap_write_tns__chat(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:chat", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__chat
#define soap_read_tns__chat(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__chat(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__chat * SOAP_FMAC4 soap_get_tns__chat(struct soap*, tns__chat *, const char*, const char*);

#define soap_new_tns__chat(soap, n) soap_instantiate_tns__chat(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__chat(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__chat * SOAP_FMAC2 soap_instantiate_tns__chat(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__chat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__isConnectedResponse
#define SOAP_TYPE_ClientSoap_tns__isConnectedResponse (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isConnectedResponse(struct soap*, const char*, int, const tns__isConnectedResponse *, const char*);
SOAP_FMAC3 tns__isConnectedResponse * SOAP_FMAC4 soap_in_tns__isConnectedResponse(struct soap*, const char*, tns__isConnectedResponse *, const char*);

#ifndef soap_write_tns__isConnectedResponse
#define soap_write_tns__isConnectedResponse(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:isConnectedResponse", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__isConnectedResponse
#define soap_read_tns__isConnectedResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__isConnectedResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__isConnectedResponse * SOAP_FMAC4 soap_get_tns__isConnectedResponse(struct soap*, tns__isConnectedResponse *, const char*, const char*);

#define soap_new_tns__isConnectedResponse(soap, n) soap_instantiate_tns__isConnectedResponse(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__isConnectedResponse(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__isConnectedResponse * SOAP_FMAC2 soap_instantiate_tns__isConnectedResponse(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isConnectedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__isConnected
#define SOAP_TYPE_ClientSoap_tns__isConnected (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isConnected(struct soap*, const char*, int, const tns__isConnected *, const char*);
SOAP_FMAC3 tns__isConnected * SOAP_FMAC4 soap_in_tns__isConnected(struct soap*, const char*, tns__isConnected *, const char*);

#ifndef soap_write_tns__isConnected
#define soap_write_tns__isConnected(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:isConnected", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__isConnected
#define soap_read_tns__isConnected(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__isConnected(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__isConnected * SOAP_FMAC4 soap_get_tns__isConnected(struct soap*, tns__isConnected *, const char*, const char*);

#define soap_new_tns__isConnected(soap, n) soap_instantiate_tns__isConnected(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__isConnected(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__isConnected * SOAP_FMAC2 soap_instantiate_tns__isConnected(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isConnected(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse
#define SOAP_TYPE_ClientSoap_tns__isAuthorizedResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isAuthorizedResponse(struct soap*, const char*, int, const tns__isAuthorizedResponse *, const char*);
SOAP_FMAC3 tns__isAuthorizedResponse * SOAP_FMAC4 soap_in_tns__isAuthorizedResponse(struct soap*, const char*, tns__isAuthorizedResponse *, const char*);

#ifndef soap_write_tns__isAuthorizedResponse
#define soap_write_tns__isAuthorizedResponse(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:isAuthorizedResponse", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__isAuthorizedResponse
#define soap_read_tns__isAuthorizedResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__isAuthorizedResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__isAuthorizedResponse * SOAP_FMAC4 soap_get_tns__isAuthorizedResponse(struct soap*, tns__isAuthorizedResponse *, const char*, const char*);

#define soap_new_tns__isAuthorizedResponse(soap, n) soap_instantiate_tns__isAuthorizedResponse(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__isAuthorizedResponse(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__isAuthorizedResponse * SOAP_FMAC2 soap_instantiate_tns__isAuthorizedResponse(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isAuthorizedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap_tns__isAuthorized
#define SOAP_TYPE_ClientSoap_tns__isAuthorized (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tns__isAuthorized(struct soap*, const char*, int, const tns__isAuthorized *, const char*);
SOAP_FMAC3 tns__isAuthorized * SOAP_FMAC4 soap_in_tns__isAuthorized(struct soap*, const char*, tns__isAuthorized *, const char*);

#ifndef soap_write_tns__isAuthorized
#define soap_write_tns__isAuthorized(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tns:isAuthorized", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_tns__isAuthorized
#define soap_read_tns__isAuthorized(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_tns__isAuthorized(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__isAuthorized * SOAP_FMAC4 soap_get_tns__isAuthorized(struct soap*, tns__isAuthorized *, const char*, const char*);

#define soap_new_tns__isAuthorized(soap, n) soap_instantiate_tns__isAuthorized(soap, n, NULL, NULL, NULL)


#define soap_delete_tns__isAuthorized(soap, p) soap_delete(soap, p)

SOAP_FMAC1 tns__isAuthorized * SOAP_FMAC2 soap_instantiate_tns__isAuthorized(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tns__isAuthorized(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ClientSoap_SOAP_ENV__Fault
#define SOAP_TYPE_ClientSoap_SOAP_ENV__Fault (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_SOAP_ENV__Fault(soap, data), 0) || ClientSoap::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#define soap_new_SOAP_ENV__Fault(soap, n) soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Fault(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ClientSoap_SOAP_ENV__Reason
#define SOAP_TYPE_ClientSoap_SOAP_ENV__Reason (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_SOAP_ENV__Reason(soap, data), 0) || ClientSoap::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#define soap_new_SOAP_ENV__Reason(soap, n) soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Reason(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ClientSoap_SOAP_ENV__Detail
#define SOAP_TYPE_ClientSoap_SOAP_ENV__Detail (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_SOAP_ENV__Detail(soap, data), 0) || ClientSoap::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#define soap_new_SOAP_ENV__Detail(soap, n) soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Detail(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ClientSoap_SOAP_ENV__Code
#define SOAP_TYPE_ClientSoap_SOAP_ENV__Code (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_SOAP_ENV__Code(soap, data), 0) || ClientSoap::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#define soap_new_SOAP_ENV__Code(soap, n) soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Code(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ClientSoap_SOAP_ENV__Header
#define SOAP_TYPE_ClientSoap_SOAP_ENV__Header (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_SOAP_ENV__Header(soap, data), 0) || ClientSoap::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#define soap_new_SOAP_ENV__Header(soap, n) soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Header(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ClientSoap___tns__chat
#define SOAP_TYPE_ClientSoap___tns__chat (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__chat(struct soap*, struct __tns__chat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__chat(struct soap*, const struct __tns__chat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__chat(struct soap*, const char*, int, const struct __tns__chat *, const char*);
SOAP_FMAC3 struct __tns__chat * SOAP_FMAC4 soap_in___tns__chat(struct soap*, const char*, struct __tns__chat *, const char*);

#ifndef soap_write___tns__chat
#define soap_write___tns__chat(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize___tns__chat(soap, data), 0) || ClientSoap::soap_put___tns__chat(soap, data, "-tns:chat", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__chat(struct soap*, const struct __tns__chat *, const char*, const char*);

#ifndef soap_read___tns__chat
#define soap_read___tns__chat(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get___tns__chat(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct __tns__chat * SOAP_FMAC4 soap_get___tns__chat(struct soap*, struct __tns__chat *, const char*, const char*);

#define soap_new___tns__chat(soap, n) soap_instantiate___tns__chat(soap, n, NULL, NULL, NULL)


#define soap_delete___tns__chat(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct __tns__chat * SOAP_FMAC2 soap_instantiate___tns__chat(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__chat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap___tns__isConnected
#define SOAP_TYPE_ClientSoap___tns__isConnected (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__isConnected(struct soap*, struct __tns__isConnected *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__isConnected(struct soap*, const struct __tns__isConnected *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__isConnected(struct soap*, const char*, int, const struct __tns__isConnected *, const char*);
SOAP_FMAC3 struct __tns__isConnected * SOAP_FMAC4 soap_in___tns__isConnected(struct soap*, const char*, struct __tns__isConnected *, const char*);

#ifndef soap_write___tns__isConnected
#define soap_write___tns__isConnected(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize___tns__isConnected(soap, data), 0) || ClientSoap::soap_put___tns__isConnected(soap, data, "-tns:isConnected", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__isConnected(struct soap*, const struct __tns__isConnected *, const char*, const char*);

#ifndef soap_read___tns__isConnected
#define soap_read___tns__isConnected(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get___tns__isConnected(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct __tns__isConnected * SOAP_FMAC4 soap_get___tns__isConnected(struct soap*, struct __tns__isConnected *, const char*, const char*);

#define soap_new___tns__isConnected(soap, n) soap_instantiate___tns__isConnected(soap, n, NULL, NULL, NULL)


#define soap_delete___tns__isConnected(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct __tns__isConnected * SOAP_FMAC2 soap_instantiate___tns__isConnected(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__isConnected(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap___tns__isAuthorized
#define SOAP_TYPE_ClientSoap___tns__isAuthorized (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__isAuthorized(struct soap*, struct __tns__isAuthorized *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__isAuthorized(struct soap*, const struct __tns__isAuthorized *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__isAuthorized(struct soap*, const char*, int, const struct __tns__isAuthorized *, const char*);
SOAP_FMAC3 struct __tns__isAuthorized * SOAP_FMAC4 soap_in___tns__isAuthorized(struct soap*, const char*, struct __tns__isAuthorized *, const char*);

#ifndef soap_write___tns__isAuthorized
#define soap_write___tns__isAuthorized(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize___tns__isAuthorized(soap, data), 0) || ClientSoap::soap_put___tns__isAuthorized(soap, data, "-tns:isAuthorized", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__isAuthorized(struct soap*, const struct __tns__isAuthorized *, const char*, const char*);

#ifndef soap_read___tns__isAuthorized
#define soap_read___tns__isAuthorized(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get___tns__isAuthorized(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct __tns__isAuthorized * SOAP_FMAC4 soap_get___tns__isAuthorized(struct soap*, struct __tns__isAuthorized *, const char*, const char*);

#define soap_new___tns__isAuthorized(soap, n) soap_instantiate___tns__isAuthorized(soap, n, NULL, NULL, NULL)


#define soap_delete___tns__isAuthorized(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct __tns__isAuthorized * SOAP_FMAC2 soap_instantiate___tns__isAuthorized(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__isAuthorized(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap___tns__deauthorize
#define SOAP_TYPE_ClientSoap___tns__deauthorize (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__deauthorize(struct soap*, struct __tns__deauthorize *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__deauthorize(struct soap*, const struct __tns__deauthorize *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__deauthorize(struct soap*, const char*, int, const struct __tns__deauthorize *, const char*);
SOAP_FMAC3 struct __tns__deauthorize * SOAP_FMAC4 soap_in___tns__deauthorize(struct soap*, const char*, struct __tns__deauthorize *, const char*);

#ifndef soap_write___tns__deauthorize
#define soap_write___tns__deauthorize(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize___tns__deauthorize(soap, data), 0) || ClientSoap::soap_put___tns__deauthorize(soap, data, "-tns:deauthorize", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__deauthorize(struct soap*, const struct __tns__deauthorize *, const char*, const char*);

#ifndef soap_read___tns__deauthorize
#define soap_read___tns__deauthorize(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get___tns__deauthorize(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct __tns__deauthorize * SOAP_FMAC4 soap_get___tns__deauthorize(struct soap*, struct __tns__deauthorize *, const char*, const char*);

#define soap_new___tns__deauthorize(soap, n) soap_instantiate___tns__deauthorize(soap, n, NULL, NULL, NULL)


#define soap_delete___tns__deauthorize(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct __tns__deauthorize * SOAP_FMAC2 soap_instantiate___tns__deauthorize(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__deauthorize(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ClientSoap___tns__authorize
#define SOAP_TYPE_ClientSoap___tns__authorize (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tns__authorize(struct soap*, struct __tns__authorize *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tns__authorize(struct soap*, const struct __tns__authorize *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tns__authorize(struct soap*, const char*, int, const struct __tns__authorize *, const char*);
SOAP_FMAC3 struct __tns__authorize * SOAP_FMAC4 soap_in___tns__authorize(struct soap*, const char*, struct __tns__authorize *, const char*);

#ifndef soap_write___tns__authorize
#define soap_write___tns__authorize(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize___tns__authorize(soap, data), 0) || ClientSoap::soap_put___tns__authorize(soap, data, "-tns:authorize", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put___tns__authorize(struct soap*, const struct __tns__authorize *, const char*, const char*);

#ifndef soap_read___tns__authorize
#define soap_read___tns__authorize(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get___tns__authorize(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct __tns__authorize * SOAP_FMAC4 soap_get___tns__authorize(struct soap*, struct __tns__authorize *, const char*, const char*);

#define soap_new___tns__authorize(soap, n) soap_instantiate___tns__authorize(soap, n, NULL, NULL, NULL)


#define soap_delete___tns__authorize(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct __tns__authorize * SOAP_FMAC2 soap_instantiate___tns__authorize(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tns__authorize(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Reason (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || ClientSoap::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Detail (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || ClientSoap::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Code
#define SOAP_TYPE_ClientSoap_PointerToSOAP_ENV__Code (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || ClientSoap::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#endif

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__chatResponse
#define SOAP_TYPE_ClientSoap_PointerTotns__chatResponse (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__chatResponse(struct soap*, tns__chatResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__chatResponse(struct soap*, const char *, int, tns__chatResponse *const*, const char *);
SOAP_FMAC3 tns__chatResponse ** SOAP_FMAC4 soap_in_PointerTotns__chatResponse(struct soap*, const char*, tns__chatResponse **, const char*);

#ifndef soap_write_PointerTotns__chatResponse
#define soap_write_PointerTotns__chatResponse(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__chatResponse(soap, data), 0) || ClientSoap::soap_put_PointerTotns__chatResponse(soap, data, "tns:chatResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__chatResponse(struct soap*, tns__chatResponse *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__chatResponse
#define soap_read_PointerTotns__chatResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__chatResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__chatResponse ** SOAP_FMAC4 soap_get_PointerTotns__chatResponse(struct soap*, tns__chatResponse **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__chat
#define SOAP_TYPE_ClientSoap_PointerTotns__chat (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__chat(struct soap*, tns__chat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__chat(struct soap*, const char *, int, tns__chat *const*, const char *);
SOAP_FMAC3 tns__chat ** SOAP_FMAC4 soap_in_PointerTotns__chat(struct soap*, const char*, tns__chat **, const char*);

#ifndef soap_write_PointerTotns__chat
#define soap_write_PointerTotns__chat(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__chat(soap, data), 0) || ClientSoap::soap_put_PointerTotns__chat(soap, data, "tns:chat", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__chat(struct soap*, tns__chat *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__chat
#define soap_read_PointerTotns__chat(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__chat(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__chat ** SOAP_FMAC4 soap_get_PointerTotns__chat(struct soap*, tns__chat **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__isConnectedResponse
#define SOAP_TYPE_ClientSoap_PointerTotns__isConnectedResponse (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isConnectedResponse(struct soap*, tns__isConnectedResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isConnectedResponse(struct soap*, const char *, int, tns__isConnectedResponse *const*, const char *);
SOAP_FMAC3 tns__isConnectedResponse ** SOAP_FMAC4 soap_in_PointerTotns__isConnectedResponse(struct soap*, const char*, tns__isConnectedResponse **, const char*);

#ifndef soap_write_PointerTotns__isConnectedResponse
#define soap_write_PointerTotns__isConnectedResponse(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__isConnectedResponse(soap, data), 0) || ClientSoap::soap_put_PointerTotns__isConnectedResponse(soap, data, "tns:isConnectedResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isConnectedResponse(struct soap*, tns__isConnectedResponse *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__isConnectedResponse
#define soap_read_PointerTotns__isConnectedResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__isConnectedResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__isConnectedResponse ** SOAP_FMAC4 soap_get_PointerTotns__isConnectedResponse(struct soap*, tns__isConnectedResponse **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__isConnected
#define SOAP_TYPE_ClientSoap_PointerTotns__isConnected (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isConnected(struct soap*, tns__isConnected *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isConnected(struct soap*, const char *, int, tns__isConnected *const*, const char *);
SOAP_FMAC3 tns__isConnected ** SOAP_FMAC4 soap_in_PointerTotns__isConnected(struct soap*, const char*, tns__isConnected **, const char*);

#ifndef soap_write_PointerTotns__isConnected
#define soap_write_PointerTotns__isConnected(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__isConnected(soap, data), 0) || ClientSoap::soap_put_PointerTotns__isConnected(soap, data, "tns:isConnected", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isConnected(struct soap*, tns__isConnected *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__isConnected
#define soap_read_PointerTotns__isConnected(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__isConnected(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__isConnected ** SOAP_FMAC4 soap_get_PointerTotns__isConnected(struct soap*, tns__isConnected **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__isAuthorizedResponse
#define SOAP_TYPE_ClientSoap_PointerTotns__isAuthorizedResponse (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isAuthorizedResponse(struct soap*, tns__isAuthorizedResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isAuthorizedResponse(struct soap*, const char *, int, tns__isAuthorizedResponse *const*, const char *);
SOAP_FMAC3 tns__isAuthorizedResponse ** SOAP_FMAC4 soap_in_PointerTotns__isAuthorizedResponse(struct soap*, const char*, tns__isAuthorizedResponse **, const char*);

#ifndef soap_write_PointerTotns__isAuthorizedResponse
#define soap_write_PointerTotns__isAuthorizedResponse(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__isAuthorizedResponse(soap, data), 0) || ClientSoap::soap_put_PointerTotns__isAuthorizedResponse(soap, data, "tns:isAuthorizedResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isAuthorizedResponse(struct soap*, tns__isAuthorizedResponse *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__isAuthorizedResponse
#define soap_read_PointerTotns__isAuthorizedResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__isAuthorizedResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__isAuthorizedResponse ** SOAP_FMAC4 soap_get_PointerTotns__isAuthorizedResponse(struct soap*, tns__isAuthorizedResponse **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__isAuthorized
#define SOAP_TYPE_ClientSoap_PointerTotns__isAuthorized (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__isAuthorized(struct soap*, tns__isAuthorized *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__isAuthorized(struct soap*, const char *, int, tns__isAuthorized *const*, const char *);
SOAP_FMAC3 tns__isAuthorized ** SOAP_FMAC4 soap_in_PointerTotns__isAuthorized(struct soap*, const char*, tns__isAuthorized **, const char*);

#ifndef soap_write_PointerTotns__isAuthorized
#define soap_write_PointerTotns__isAuthorized(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__isAuthorized(soap, data), 0) || ClientSoap::soap_put_PointerTotns__isAuthorized(soap, data, "tns:isAuthorized", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__isAuthorized(struct soap*, tns__isAuthorized *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__isAuthorized
#define soap_read_PointerTotns__isAuthorized(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__isAuthorized(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__isAuthorized ** SOAP_FMAC4 soap_get_PointerTotns__isAuthorized(struct soap*, tns__isAuthorized **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__deauthorizeResponse
#define SOAP_TYPE_ClientSoap_PointerTotns__deauthorizeResponse (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__deauthorizeResponse(struct soap*, tns__deauthorizeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__deauthorizeResponse(struct soap*, const char *, int, tns__deauthorizeResponse *const*, const char *);
SOAP_FMAC3 tns__deauthorizeResponse ** SOAP_FMAC4 soap_in_PointerTotns__deauthorizeResponse(struct soap*, const char*, tns__deauthorizeResponse **, const char*);

#ifndef soap_write_PointerTotns__deauthorizeResponse
#define soap_write_PointerTotns__deauthorizeResponse(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__deauthorizeResponse(soap, data), 0) || ClientSoap::soap_put_PointerTotns__deauthorizeResponse(soap, data, "tns:deauthorizeResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__deauthorizeResponse(struct soap*, tns__deauthorizeResponse *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__deauthorizeResponse
#define soap_read_PointerTotns__deauthorizeResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__deauthorizeResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__deauthorizeResponse ** SOAP_FMAC4 soap_get_PointerTotns__deauthorizeResponse(struct soap*, tns__deauthorizeResponse **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__deauthorize
#define SOAP_TYPE_ClientSoap_PointerTotns__deauthorize (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__deauthorize(struct soap*, tns__deauthorize *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__deauthorize(struct soap*, const char *, int, tns__deauthorize *const*, const char *);
SOAP_FMAC3 tns__deauthorize ** SOAP_FMAC4 soap_in_PointerTotns__deauthorize(struct soap*, const char*, tns__deauthorize **, const char*);

#ifndef soap_write_PointerTotns__deauthorize
#define soap_write_PointerTotns__deauthorize(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__deauthorize(soap, data), 0) || ClientSoap::soap_put_PointerTotns__deauthorize(soap, data, "tns:deauthorize", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__deauthorize(struct soap*, tns__deauthorize *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__deauthorize
#define soap_read_PointerTotns__deauthorize(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__deauthorize(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__deauthorize ** SOAP_FMAC4 soap_get_PointerTotns__deauthorize(struct soap*, tns__deauthorize **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__authorizeResponse
#define SOAP_TYPE_ClientSoap_PointerTotns__authorizeResponse (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__authorizeResponse(struct soap*, tns__authorizeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__authorizeResponse(struct soap*, const char *, int, tns__authorizeResponse *const*, const char *);
SOAP_FMAC3 tns__authorizeResponse ** SOAP_FMAC4 soap_in_PointerTotns__authorizeResponse(struct soap*, const char*, tns__authorizeResponse **, const char*);

#ifndef soap_write_PointerTotns__authorizeResponse
#define soap_write_PointerTotns__authorizeResponse(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__authorizeResponse(soap, data), 0) || ClientSoap::soap_put_PointerTotns__authorizeResponse(soap, data, "tns:authorizeResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__authorizeResponse(struct soap*, tns__authorizeResponse *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__authorizeResponse
#define soap_read_PointerTotns__authorizeResponse(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__authorizeResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__authorizeResponse ** SOAP_FMAC4 soap_get_PointerTotns__authorizeResponse(struct soap*, tns__authorizeResponse **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTotns__authorize
#define SOAP_TYPE_ClientSoap_PointerTotns__authorize (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotns__authorize(struct soap*, tns__authorize *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotns__authorize(struct soap*, const char *, int, tns__authorize *const*, const char *);
SOAP_FMAC3 tns__authorize ** SOAP_FMAC4 soap_in_PointerTotns__authorize(struct soap*, const char*, tns__authorize **, const char*);

#ifndef soap_write_PointerTotns__authorize
#define soap_write_PointerTotns__authorize(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTotns__authorize(soap, data), 0) || ClientSoap::soap_put_PointerTotns__authorize(soap, data, "tns:authorize", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotns__authorize(struct soap*, tns__authorize *const*, const char*, const char*);

#ifndef soap_read_PointerTotns__authorize
#define soap_read_PointerTotns__authorize(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTotns__authorize(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 tns__authorize ** SOAP_FMAC4 soap_get_PointerTotns__authorize(struct soap*, tns__authorize **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_PointerTostd__string
#define SOAP_TYPE_ClientSoap_PointerTostd__string (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_PointerTostd__string(soap, data), 0) || ClientSoap::soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap__QName
#define SOAP_TYPE_ClientSoap__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)


#define soap_serialize__QName(soap, a) soap_serialize_string(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize__QName(soap, data), 0) || ClientSoap::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef SOAP_TYPE_ClientSoap_string
#define SOAP_TYPE_ClientSoap_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin_send(soap) || (ClientSoap::soap_serialize_string(soap, data), 0) || ClientSoap::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !ClientSoap::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

} // namespace ClientSoap


#endif

/* End of ClientSoapH.h */
