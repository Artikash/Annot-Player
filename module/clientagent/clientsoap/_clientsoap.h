namespace ClientSoap {
/* _clientsoap.h
   Generated by wsdl2h 2.8.3 from D:\project\touch\module\clientagent\\wsdl\clientagent.wsdl and typemap.dat
   2011-10-16 06:55:13 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on _clientsoap.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

tns = "http://service.annot.me/"
ns1 = ""

*/

#define SOAP_NAMESPACE_OF_ns1	""
//gsoap ns1   schema namespace:	
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_tns	"http://service.annot.me/"
//gsoap tns   schema namespace:	http://service.annot.me/
//gsoap tns   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class tns__isAuthorized.
class tns__isAuthorized;

//  Forward declaration of class tns__isAuthorizedResponse.
class tns__isAuthorizedResponse;

//  Forward declaration of class tns__isConnected.
class tns__isConnected;

//  Forward declaration of class tns__isConnectedResponse.
class tns__isConnectedResponse;

//  Forward declaration of class tns__chat.
class tns__chat;

//  Forward declaration of class tns__chatResponse.
class tns__chatResponse;

//  Forward declaration of class tns__authorize.
class tns__authorize;

//  Forward declaration of class tns__authorizeResponse.
class tns__authorizeResponse;

//  Forward declaration of class tns__deauthorize.
class tns__deauthorize;

//  Forward declaration of class tns__deauthorizeResponse.
class tns__deauthorizeResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/// "http://service.annot.me/":isAuthorized is a complexType.
class tns__isAuthorized
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":isAuthorizedResponse is a complexType.
class tns__isAuthorizedResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":isConnected is a complexType.
class tns__isConnected
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":isConnectedResponse is a complexType.
class tns__isConnectedResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":chat is a complexType.
class tns__chat
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":chatResponse is a complexType.
class tns__chatResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":authorize is a complexType.
class tns__authorize
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":authorizeResponse is a complexType.
class tns__authorizeResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":deauthorize is a complexType.
class tns__deauthorize
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":deauthorizeResponse is a complexType.
class tns__deauthorizeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://service.annot.me/":chat of type "http://service.annot.me/":chat.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":chatResponse of type "http://service.annot.me/":chatResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":isAuthorized of type "http://service.annot.me/":isAuthorized.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":isAuthorizedResponse of type "http://service.annot.me/":isAuthorizedResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":isConnected of type "http://service.annot.me/":isConnected.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":isConnectedResponse of type "http://service.annot.me/":isConnectedResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":authorize of type "http://service.annot.me/":authorize.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":authorizeResponse of type "http://service.annot.me/":authorizeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":deauthorize of type "http://service.annot.me/":deauthorize.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":deauthorizeResponse of type "http://service.annot.me/":deauthorizeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap tns  service name:	ClientAgentServiceSoapBinding 
//gsoap tns  service type:	ClientAgent 
//gsoap tns  service port:	http://localhost:233/services/ClientAgentPort 
//gsoap tns  service namespace:	http://service.annot.me/ 
//gsoap tns  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ClientAgentService Definitions

@section ClientAgentService_bindings Service Bindings

  - @ref ClientAgentServiceSoapBinding

@section ClientAgentService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ClientAgentServiceSoapBinding Binding "ClientAgentServiceSoapBinding"

@section ClientAgentServiceSoapBinding_operations Operations of Binding  "ClientAgentServiceSoapBinding"

  - @ref __tns__authorize

  - @ref __tns__deauthorize

  - @ref __tns__isAuthorized

  - @ref __tns__isConnected

  - @ref __tns__chat

@section ClientAgentServiceSoapBinding_ports Endpoints of Binding  "ClientAgentServiceSoapBinding"

  - http://localhost:233/services/ClientAgentPort

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ClientAgentServiceSoapBinding                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__authorize                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__authorize" of service binding "ClientAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="ClientAgent#authorize"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__authorize(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__authorize*                     tns__authorize_,
    // response parameters:
    tns__authorizeResponse*             tns__authorizeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__authorize(
    struct soap *soap,
    // request parameters:
    tns__authorize*                     tns__authorize_,
    // response parameters:
    tns__authorizeResponse*             tns__authorizeResponse_
  );
@endcode

C++ proxy class (defined in soapClientAgentServiceSoapBindingProxy.h):
@code
  class ClientAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapClientAgentServiceSoapBindingService.h):
@code
  class ClientAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	authorize document
//gsoap tns  service method-encoding:	authorize literal
//gsoap tns  service method-action:	authorize ClientAgent#authorize
int __tns__authorize(
    tns__authorize*                     tns__authorize_,	///< Request parameter
    tns__authorizeResponse*             tns__authorizeResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__deauthorize                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__deauthorize" of service binding "ClientAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="ClientAgent#deauthorize"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__deauthorize(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__deauthorize*                   tns__deauthorize_,
    // response parameters:
    tns__deauthorizeResponse*           tns__deauthorizeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__deauthorize(
    struct soap *soap,
    // request parameters:
    tns__deauthorize*                   tns__deauthorize_,
    // response parameters:
    tns__deauthorizeResponse*           tns__deauthorizeResponse_
  );
@endcode

C++ proxy class (defined in soapClientAgentServiceSoapBindingProxy.h):
@code
  class ClientAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapClientAgentServiceSoapBindingService.h):
@code
  class ClientAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	deauthorize document
//gsoap tns  service method-encoding:	deauthorize literal
//gsoap tns  service method-action:	deauthorize ClientAgent#deauthorize
int __tns__deauthorize(
    tns__deauthorize*                   tns__deauthorize_,	///< Request parameter
    tns__deauthorizeResponse*           tns__deauthorizeResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__isAuthorized                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__isAuthorized" of service binding "ClientAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="ClientAgent#isAuthorized"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__isAuthorized(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__isAuthorized*                  tns__isAuthorized_,
    // response parameters:
    tns__isAuthorizedResponse*          tns__isAuthorizedResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__isAuthorized(
    struct soap *soap,
    // request parameters:
    tns__isAuthorized*                  tns__isAuthorized_,
    // response parameters:
    tns__isAuthorizedResponse*          tns__isAuthorizedResponse_
  );
@endcode

C++ proxy class (defined in soapClientAgentServiceSoapBindingProxy.h):
@code
  class ClientAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapClientAgentServiceSoapBindingService.h):
@code
  class ClientAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	isAuthorized document
//gsoap tns  service method-encoding:	isAuthorized literal
//gsoap tns  service method-action:	isAuthorized ClientAgent#isAuthorized
int __tns__isAuthorized(
    tns__isAuthorized*                  tns__isAuthorized_,	///< Request parameter
    tns__isAuthorizedResponse*          tns__isAuthorizedResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__isConnected                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__isConnected" of service binding "ClientAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="ClientAgent#isConnected"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__isConnected(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__isConnected*                   tns__isConnected_,
    // response parameters:
    tns__isConnectedResponse*           tns__isConnectedResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__isConnected(
    struct soap *soap,
    // request parameters:
    tns__isConnected*                   tns__isConnected_,
    // response parameters:
    tns__isConnectedResponse*           tns__isConnectedResponse_
  );
@endcode

C++ proxy class (defined in soapClientAgentServiceSoapBindingProxy.h):
@code
  class ClientAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapClientAgentServiceSoapBindingService.h):
@code
  class ClientAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	isConnected document
//gsoap tns  service method-encoding:	isConnected literal
//gsoap tns  service method-action:	isConnected ClientAgent#isConnected
int __tns__isConnected(
    tns__isConnected*                   tns__isConnected_,	///< Request parameter
    tns__isConnectedResponse*           tns__isConnectedResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__chat                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__chat" of service binding "ClientAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="ClientAgent#chat"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__chat(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__chat*                          tns__chat_,
    // response parameters:
    tns__chatResponse*                  tns__chatResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__chat(
    struct soap *soap,
    // request parameters:
    tns__chat*                          tns__chat_,
    // response parameters:
    tns__chatResponse*                  tns__chatResponse_
  );
@endcode

C++ proxy class (defined in soapClientAgentServiceSoapBindingProxy.h):
@code
  class ClientAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapClientAgentServiceSoapBindingService.h):
@code
  class ClientAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	chat document
//gsoap tns  service method-encoding:	chat literal
//gsoap tns  service method-action:	chat ClientAgent#chat
int __tns__chat(
    tns__chat*                          tns__chat_,	///< Request parameter
    tns__chatResponse*                  tns__chatResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema ""

@section tns Top-level root elements of schema "http://service.annot.me/"

  - <tns:chat> (use wsdl2h option -g to auto-generate)

  - <tns:chatResponse> (use wsdl2h option -g to auto-generate)

  - <tns:isAuthorized> (use wsdl2h option -g to auto-generate)

  - <tns:isAuthorizedResponse> (use wsdl2h option -g to auto-generate)

  - <tns:isConnected> (use wsdl2h option -g to auto-generate)

  - <tns:isConnectedResponse> (use wsdl2h option -g to auto-generate)

  - <tns:authorize> (use wsdl2h option -g to auto-generate)

  - <tns:authorizeResponse> (use wsdl2h option -g to auto-generate)

  - <tns:deauthorize> (use wsdl2h option -g to auto-generate)

  - <tns:deauthorizeResponse> (use wsdl2h option -g to auto-generate)

*/

} // namespace ClientSoap

/* End of _clientsoap.h */
