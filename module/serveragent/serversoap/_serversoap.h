namespace ServerSoap {
/* _serversoap.h
   Generated by wsdl2h 2.8.5 from http://annotcloud.com/services/ServerAgentPort?wsdl and typemap.dat
   2012-01-13 03:08:27 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on _serversoap.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

tns = "http://service.annot.me/"
ns1 = ""

*/

#define SOAP_NAMESPACE_OF_ns1	""
//gsoap ns1   schema namespace:	
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_tns	"http://service.annot.me/"
//gsoap tns   schema namespace:	http://service.annot.me/
//gsoap tns   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class tns__liveAnnotation.
class tns__liveAnnotation;

//  Forward declaration of class tns__liveToken.
class tns__liveToken;

//  Forward declaration of class tns__mediaAnnotation.
class tns__mediaAnnotation;

//  Forward declaration of class tns__mediaToken.
class tns__mediaToken;

//  Forward declaration of class tns__mediaAlias.
class tns__mediaAlias;

//  Forward declaration of class tns__user.
class tns__user;

//  Forward declaration of class tns__blessMediaAliasWithId.
class tns__blessMediaAliasWithId;

//  Forward declaration of class tns__blessMediaAliasWithIdResponse.
class tns__blessMediaAliasWithIdResponse;

//  Forward declaration of class tns__blessMediaAnnotationWithId.
class tns__blessMediaAnnotationWithId;

//  Forward declaration of class tns__blessMediaAnnotationWithIdResponse.
class tns__blessMediaAnnotationWithIdResponse;

//  Forward declaration of class tns__blessMediaTokenWithId.
class tns__blessMediaTokenWithId;

//  Forward declaration of class tns__blessMediaTokenWithIdResponse.
class tns__blessMediaTokenWithIdResponse;

//  Forward declaration of class tns__blockMediaAliasWithId.
class tns__blockMediaAliasWithId;

//  Forward declaration of class tns__blockMediaAliasWithIdResponse.
class tns__blockMediaAliasWithIdResponse;

//  Forward declaration of class tns__blockMediaAnnotationWithId.
class tns__blockMediaAnnotationWithId;

//  Forward declaration of class tns__blockMediaAnnotationWithIdResponse.
class tns__blockMediaAnnotationWithIdResponse;

//  Forward declaration of class tns__blockUserWithId.
class tns__blockUserWithId;

//  Forward declaration of class tns__blockUserWithIdResponse.
class tns__blockUserWithIdResponse;

//  Forward declaration of class tns__chat.
class tns__chat;

//  Forward declaration of class tns__chatResponse.
class tns__chatResponse;

//  Forward declaration of class tns__curseMediaAliasWithId.
class tns__curseMediaAliasWithId;

//  Forward declaration of class tns__curseMediaAliasWithIdResponse.
class tns__curseMediaAliasWithIdResponse;

//  Forward declaration of class tns__curseMediaAnnotationWithId.
class tns__curseMediaAnnotationWithId;

//  Forward declaration of class tns__curseMediaAnnotationWithIdResponse.
class tns__curseMediaAnnotationWithIdResponse;

//  Forward declaration of class tns__curseMediaTokenWithId.
class tns__curseMediaTokenWithId;

//  Forward declaration of class tns__curseMediaTokenWithIdResponse.
class tns__curseMediaTokenWithIdResponse;

//  Forward declaration of class tns__deleteMediaAliasWithId.
class tns__deleteMediaAliasWithId;

//  Forward declaration of class tns__deleteMediaAliasWithIdResponse.
class tns__deleteMediaAliasWithIdResponse;

//  Forward declaration of class tns__deleteMediaAnnotationWithId.
class tns__deleteMediaAnnotationWithId;

//  Forward declaration of class tns__deleteMediaAnnotationWithIdResponse.
class tns__deleteMediaAnnotationWithIdResponse;

//  Forward declaration of class tns__isClientUpdated.
class tns__isClientUpdated;

//  Forward declaration of class tns__isClientUpdatedResponse.
class tns__isClientUpdatedResponse;

//  Forward declaration of class tns__isConnected.
class tns__isConnected;

//  Forward declaration of class tns__isConnectedResponse.
class tns__isConnectedResponse;

//  Forward declaration of class tns__selectLiveAnnotationsWithTokenId.
class tns__selectLiveAnnotationsWithTokenId;

//  Forward declaration of class tns__selectLiveAnnotationsWithTokenIdResponse.
class tns__selectLiveAnnotationsWithTokenIdResponse;

//  Forward declaration of class tns__selectLiveTokenWithId.
class tns__selectLiveTokenWithId;

//  Forward declaration of class tns__selectLiveTokenWithIdResponse.
class tns__selectLiveTokenWithIdResponse;

//  Forward declaration of class tns__selectMediaAliasesWithTokenId.
class tns__selectMediaAliasesWithTokenId;

//  Forward declaration of class tns__selectMediaAliasesWithTokenIdResponse.
class tns__selectMediaAliasesWithTokenIdResponse;

//  Forward declaration of class tns__selectMediaAnnotationsWithTokenId.
class tns__selectMediaAnnotationsWithTokenId;

//  Forward declaration of class tns__selectMediaAnnotationsWithTokenIdResponse.
class tns__selectMediaAnnotationsWithTokenIdResponse;

//  Forward declaration of class tns__selectMediaTokenWithDigest.
class tns__selectMediaTokenWithDigest;

//  Forward declaration of class tns__selectMediaTokenWithDigestResponse.
class tns__selectMediaTokenWithDigestResponse;

//  Forward declaration of class tns__selectMediaTokenWithId.
class tns__selectMediaTokenWithId;

//  Forward declaration of class tns__selectMediaTokenWithIdResponse.
class tns__selectMediaTokenWithIdResponse;

//  Forward declaration of class tns__selectRelatedMediaAnnotationsWithTokenId.
class tns__selectRelatedMediaAnnotationsWithTokenId;

//  Forward declaration of class tns__selectRelatedMediaAnnotationsWithTokenIdResponse.
class tns__selectRelatedMediaAnnotationsWithTokenIdResponse;

//  Forward declaration of class tns__selectUser.
class tns__selectUser;

//  Forward declaration of class tns__selectUserResponse.
class tns__selectUserResponse;

//  Forward declaration of class tns__setUserAnonymous.
class tns__setUserAnonymous;

//  Forward declaration of class tns__setUserAnonymousResponse.
class tns__setUserAnonymousResponse;

//  Forward declaration of class tns__setUserLanguage.
class tns__setUserLanguage;

//  Forward declaration of class tns__setUserLanguageResponse.
class tns__setUserLanguageResponse;

//  Forward declaration of class tns__submitLiveAnnotationTextWithTokenId.
class tns__submitLiveAnnotationTextWithTokenId;

//  Forward declaration of class tns__submitLiveAnnotationTextWithTokenIdResponse.
class tns__submitLiveAnnotationTextWithTokenIdResponse;

//  Forward declaration of class tns__submitMediaAlias.
class tns__submitMediaAlias;

//  Forward declaration of class tns__submitMediaAliasResponse.
class tns__submitMediaAliasResponse;

//  Forward declaration of class tns__submitMediaAliasTextAndTokenDigest.
class tns__submitMediaAliasTextAndTokenDigest;

//  Forward declaration of class tns__submitMediaAliasTextAndTokenDigestResponse.
class tns__submitMediaAliasTextAndTokenDigestResponse;

//  Forward declaration of class tns__submitMediaAliasTextWithTokenId.
class tns__submitMediaAliasTextWithTokenId;

//  Forward declaration of class tns__submitMediaAliasTextWithTokenIdResponse.
class tns__submitMediaAliasTextWithTokenIdResponse;

//  Forward declaration of class tns__submitMediaAnnotation.
class tns__submitMediaAnnotation;

//  Forward declaration of class tns__submitMediaAnnotationResponse.
class tns__submitMediaAnnotationResponse;

//  Forward declaration of class tns__submitMediaAnnotationTextAndTokenDigest.
class tns__submitMediaAnnotationTextAndTokenDigest;

//  Forward declaration of class tns__submitMediaAnnotationTextAndTokenDigestResponse.
class tns__submitMediaAnnotationTextAndTokenDigestResponse;

//  Forward declaration of class tns__submitMediaAnnotationTextWithTokenId.
class tns__submitMediaAnnotationTextWithTokenId;

//  Forward declaration of class tns__submitMediaAnnotationTextWithTokenIdResponse.
class tns__submitMediaAnnotationTextWithTokenIdResponse;

//  Forward declaration of class tns__submitMediaToken.
class tns__submitMediaToken;

//  Forward declaration of class tns__submitMediaTokenResponse.
class tns__submitMediaTokenResponse;

//  Forward declaration of class tns__submitMediaTokenDigest.
class tns__submitMediaTokenDigest;

//  Forward declaration of class tns__submitMediaTokenDigestResponse.
class tns__submitMediaTokenDigestResponse;

//  Forward declaration of class tns__updateMediaAnnotationTextWithId.
class tns__updateMediaAnnotationTextWithId;

//  Forward declaration of class tns__updateMediaAnnotationTextWithIdResponse.
class tns__updateMediaAnnotationTextWithIdResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/// "http://service.annot.me/":liveAnnotation is a complexType.
class tns__liveAnnotation
{ public:
/// Element createTime of type xs:long.
    LONG64                               createTime                     1;	///< Required element.
/// Element flags of type xs:long.
    LONG64                               flags                          1;	///< Required element.
/// Element id of type xs:long.
    LONG64                               id                             1;	///< Required element.
/// Element language of type xs:int.
    int                                  language                       1;	///< Required element.
/// Element userAlias of type xs:string.
    std::string*                         userAlias                      0;	///< Optional element.
/// Element status of type xs:int.
    int                                  status                         1;	///< Required element.
/// Element text of type xs:string.
    std::string*                         text                           0;	///< Optional element.
/// Element tokenId of type xs:long.
    LONG64                               tokenId                        1;	///< Required element.
/// Element userId of type xs:long.
    LONG64                               userId                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":liveToken is a complexType.
class tns__liveToken
{ public:
/// Element id of type xs:long.
    LONG64                               id                             1;	///< Required element.
/// Element interval of type xs:int.
    int                                  interval                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":mediaAnnotation is a complexType.
class tns__mediaAnnotation
{ public:
/// Element blessedCount of type xs:int.
    int                                  blessedCount                   1;	///< Required element.
/// Element blockedCount of type xs:int.
    int                                  blockedCount                   1;	///< Required element.
/// Element createTime of type xs:long.
    LONG64                               createTime                     1;	///< Required element.
/// Element cursedCount of type xs:int.
    int                                  cursedCount                    1;	///< Required element.
/// Element flags of type xs:long.
    LONG64                               flags                          1;	///< Required element.
/// Element id of type xs:long.
    LONG64                               id                             1;	///< Required element.
/// Element language of type xs:int.
    int                                  language                       1;	///< Required element.
/// Element pos of type xs:long.
    LONG64                               pos                            1;	///< Required element.
/// Element posType of type xs:int.
    int                                  posType                        1;	///< Required element.
/// Element time of type xs:int.
    int                                  time                           1;	///< Required element.
/// Element status of type xs:int.
    int                                  status                         1;	///< Required element.
/// Element text of type xs:string.
    std::string*                         text                           0;	///< Optional element.
/// Element tokenId of type xs:long.
    LONG64                               tokenId                        1;	///< Required element.
/// Element updateTime of type xs:long.
    LONG64                               updateTime                     1;	///< Required element.
/// Element userAlias of type xs:string.
    std::string*                         userAlias                      0;	///< Optional element.
/// Element userId of type xs:long.
    LONG64                               userId                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":mediaToken is a complexType.
class tns__mediaToken
{ public:
/// Element annotCount of type xs:int.
    int                                  annotCount                     1;	///< Required element.
/// Element blessedCount of type xs:int.
    int                                  blessedCount                   1;	///< Required element.
/// Element blockedCount of type xs:int.
    int                                  blockedCount                   1;	///< Required element.
/// Element createTime of type xs:long.
    LONG64                               createTime                     1;	///< Required element.
/// Element cursedCount of type xs:int.
    int                                  cursedCount                    1;	///< Required element.
/// Element digest of type xs:string.
    std::string*                         digest                         0;	///< Optional element.
/// Element digestType of type xs:int.
    int                                  digestType                     1;	///< Required element.
/// Element flags of type xs:long.
    LONG64                               flags                          1;	///< Required element.
/// Element id of type xs:long.
    LONG64                               id                             1;	///< Required element.
/// Element type of type xs:int.
    int                                  type                           1;	///< Required element.
/// Element status of type xs:int.
    int                                  status                         1;	///< Required element.
/// Element userId of type xs:long.
    LONG64                               userId                         1;	///< Required element.
/// Element visitedCount of type xs:int.
    int                                  visitedCount                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":mediaAlias is a complexType.
class tns__mediaAlias
{ public:
/// Element blessedCount of type xs:int.
    int                                  blessedCount                   1;	///< Required element.
/// Element blockedCount of type xs:int.
    int                                  blockedCount                   1;	///< Required element.
/// Element cursedCount of type xs:int.
    int                                  cursedCount                    1;	///< Required element.
/// Element flags of type xs:long.
    LONG64                               flags                          1;	///< Required element.
/// Element id of type xs:long.
    LONG64                               id                             1;	///< Required element.
/// Element language of type xs:int.
    int                                  language                       1;	///< Required element.
/// Element status of type xs:int.
    int                                  status                         1;	///< Required element.
/// Element text of type xs:string.
    std::string*                         text                           0;	///< Optional element.
/// Element tokenId of type xs:long.
    LONG64                               tokenId                        1;	///< Required element.
/// Element type of type xs:int.
    int                                  type                           1;	///< Required element.
/// Element updateTime of type xs:long.
    LONG64                               updateTime                     1;	///< Required element.
/// Element userId of type xs:long.
    LONG64                               userId                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":user is a complexType.
class tns__user
{ public:
/// Element annotCount of type xs:int.
    int                                  annotCount                     1;	///< Required element.
/// Element blessedCount of type xs:int.
    int                                  blessedCount                   1;	///< Required element.
/// Element blockedCount of type xs:int.
    int                                  blockedCount                   1;	///< Required element.
/// Element createTime of type xs:long.
    LONG64                               createTime                     1;	///< Required element.
/// Element cursedCount of type xs:int.
    int                                  cursedCount                    1;	///< Required element.
/// Element email of type xs:string.
    std::string*                         email                          0;	///< Optional element.
/// Element flags of type xs:long.
    LONG64                               flags                          1;	///< Required element.
/// Element groupId of type xs:long.
    LONG64                               groupId                        1;	///< Required element.
/// Element id of type xs:long.
    LONG64                               id                             1;	///< Required element.
/// Element language of type xs:int.
    int                                  language                       1;	///< Required element.
/// Element loginTime of type xs:long.
    LONG64                               loginTime                      1;	///< Required element.
/// Element name of type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// Element nickname of type xs:string.
    std::string*                         nickname                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// Element status of type xs:int.
    int                                  status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blessMediaAliasWithId is a complexType.
class tns__blessMediaAliasWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blessMediaAliasWithIdResponse is a complexType.
class tns__blessMediaAliasWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blessMediaAnnotationWithId is a complexType.
class tns__blessMediaAnnotationWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blessMediaAnnotationWithIdResponse is a complexType.
class tns__blessMediaAnnotationWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blessMediaTokenWithId is a complexType.
class tns__blessMediaTokenWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blessMediaTokenWithIdResponse is a complexType.
class tns__blessMediaTokenWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blockMediaAliasWithId is a complexType.
class tns__blockMediaAliasWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blockMediaAliasWithIdResponse is a complexType.
class tns__blockMediaAliasWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blockMediaAnnotationWithId is a complexType.
class tns__blockMediaAnnotationWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blockMediaAnnotationWithIdResponse is a complexType.
class tns__blockMediaAnnotationWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blockUserWithId is a complexType.
class tns__blockUserWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":blockUserWithIdResponse is a complexType.
class tns__blockUserWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":chat is a complexType.
class tns__chat
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":chatResponse is a complexType.
class tns__chatResponse
{ public:
/// Element return of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":curseMediaAliasWithId is a complexType.
class tns__curseMediaAliasWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":curseMediaAliasWithIdResponse is a complexType.
class tns__curseMediaAliasWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":curseMediaAnnotationWithId is a complexType.
class tns__curseMediaAnnotationWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":curseMediaAnnotationWithIdResponse is a complexType.
class tns__curseMediaAnnotationWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":curseMediaTokenWithId is a complexType.
class tns__curseMediaTokenWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":curseMediaTokenWithIdResponse is a complexType.
class tns__curseMediaTokenWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":deleteMediaAliasWithId is a complexType.
class tns__deleteMediaAliasWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":deleteMediaAliasWithIdResponse is a complexType.
class tns__deleteMediaAliasWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":deleteMediaAnnotationWithId is a complexType.
class tns__deleteMediaAnnotationWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":deleteMediaAnnotationWithIdResponse is a complexType.
class tns__deleteMediaAnnotationWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":isClientUpdated is a complexType.
class tns__isClientUpdated
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":isClientUpdatedResponse is a complexType.
class tns__isClientUpdatedResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":isConnected is a complexType.
class tns__isConnected
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":isConnectedResponse is a complexType.
class tns__isConnectedResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectLiveAnnotationsWithTokenId is a complexType.
class tns__selectLiveAnnotationsWithTokenId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectLiveAnnotationsWithTokenIdResponse is a complexType.
class tns__selectLiveAnnotationsWithTokenIdResponse
{ public:
/// Vector of tns__liveAnnotation* with length 0..unbounded
    std::vector<tns__liveAnnotation*   > return_                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectLiveTokenWithId is a complexType.
class tns__selectLiveTokenWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectLiveTokenWithIdResponse is a complexType.
class tns__selectLiveTokenWithIdResponse
{ public:
/// Element return of type "http://service.annot.me/":liveToken.
    tns__liveToken*                      return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectMediaAliasesWithTokenId is a complexType.
class tns__selectMediaAliasesWithTokenId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectMediaAliasesWithTokenIdResponse is a complexType.
class tns__selectMediaAliasesWithTokenIdResponse
{ public:
/// Vector of tns__mediaAlias* with length 0..unbounded
    std::vector<tns__mediaAlias*       > return_                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectMediaAnnotationsWithTokenId is a complexType.
class tns__selectMediaAnnotationsWithTokenId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectMediaAnnotationsWithTokenIdResponse is a complexType.
class tns__selectMediaAnnotationsWithTokenIdResponse
{ public:
/// Vector of tns__mediaAnnotation* with length 0..unbounded
    std::vector<tns__mediaAnnotation*  > return_                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectMediaTokenWithDigest is a complexType.
class tns__selectMediaTokenWithDigest
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectMediaTokenWithDigestResponse is a complexType.
class tns__selectMediaTokenWithDigestResponse
{ public:
/// Element return of type "http://service.annot.me/":mediaToken.
    tns__mediaToken*                     return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectMediaTokenWithId is a complexType.
class tns__selectMediaTokenWithId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectMediaTokenWithIdResponse is a complexType.
class tns__selectMediaTokenWithIdResponse
{ public:
/// Element return of type "http://service.annot.me/":mediaToken.
    tns__mediaToken*                     return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectRelatedMediaAnnotationsWithTokenId is a complexType.
class tns__selectRelatedMediaAnnotationsWithTokenId
{ public:
/// Element arg0 of type xs:long.
    LONG64                               arg0                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectRelatedMediaAnnotationsWithTokenIdResponse is a complexType.
class tns__selectRelatedMediaAnnotationsWithTokenIdResponse
{ public:
/// Vector of tns__mediaAnnotation* with length 0..unbounded
    std::vector<tns__mediaAnnotation*  > return_                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectUser is a complexType.
class tns__selectUser
{ public:
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":selectUserResponse is a complexType.
class tns__selectUserResponse
{ public:
/// Element return of type "http://service.annot.me/":user.
    tns__user*                           return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":setUserAnonymous is a complexType.
class tns__setUserAnonymous
{ public:
/// Element arg0 of type xs:boolean.
    bool                                 arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":setUserAnonymousResponse is a complexType.
class tns__setUserAnonymousResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":setUserLanguage is a complexType.
class tns__setUserLanguage
{ public:
/// Element arg0 of type xs:int.
    int                                  arg0                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":setUserLanguageResponse is a complexType.
class tns__setUserLanguageResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitLiveAnnotationTextWithTokenId is a complexType.
class tns__submitLiveAnnotationTextWithTokenId
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:long.
    LONG64                               arg1                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitLiveAnnotationTextWithTokenIdResponse is a complexType.
class tns__submitLiveAnnotationTextWithTokenIdResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAlias is a complexType.
class tns__submitMediaAlias
{ public:
/// Element arg0 of type "http://service.annot.me/":mediaAlias.
    tns__mediaAlias*                     arg0                           0;	///< Optional element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAliasResponse is a complexType.
class tns__submitMediaAliasResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAliasTextAndTokenDigest is a complexType.
class tns__submitMediaAliasTextAndTokenDigest
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:int.
    int                                  arg3                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAliasTextAndTokenDigestResponse is a complexType.
class tns__submitMediaAliasTextAndTokenDigestResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAliasTextWithTokenId is a complexType.
class tns__submitMediaAliasTextWithTokenId
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Element arg2 of type xs:long.
    LONG64                               arg2                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAliasTextWithTokenIdResponse is a complexType.
class tns__submitMediaAliasTextWithTokenIdResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAnnotation is a complexType.
class tns__submitMediaAnnotation
{ public:
/// Element arg0 of type "http://service.annot.me/":mediaAnnotation.
    tns__mediaAnnotation*                arg0                           0;	///< Optional element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAnnotationResponse is a complexType.
class tns__submitMediaAnnotationResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAnnotationTextAndTokenDigest is a complexType.
class tns__submitMediaAnnotationTextAndTokenDigest
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:long.
    LONG64                               arg1                           1;	///< Required element.
/// Element arg2 of type xs:int.
    int                                  arg2                           1;	///< Required element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// Element arg4 of type xs:int.
    int                                  arg4                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAnnotationTextAndTokenDigestResponse is a complexType.
class tns__submitMediaAnnotationTextAndTokenDigestResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAnnotationTextWithTokenId is a complexType.
class tns__submitMediaAnnotationTextWithTokenId
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:long.
    LONG64                               arg1                           1;	///< Required element.
/// Element arg2 of type xs:int.
    int                                  arg2                           1;	///< Required element.
/// Element arg3 of type xs:long.
    LONG64                               arg3                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaAnnotationTextWithTokenIdResponse is a complexType.
class tns__submitMediaAnnotationTextWithTokenIdResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaToken is a complexType.
class tns__submitMediaToken
{ public:
/// Element arg0 of type "http://service.annot.me/":mediaToken.
    tns__mediaToken*                     arg0                           0;	///< Optional element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaTokenResponse is a complexType.
class tns__submitMediaTokenResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaTokenDigest is a complexType.
class tns__submitMediaTokenDigest
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Element arg2 of type xs:int.
    int                                  arg2                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":submitMediaTokenDigestResponse is a complexType.
class tns__submitMediaTokenDigestResponse
{ public:
/// Element return of type xs:long.
    LONG64                               return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":updateMediaAnnotationTextWithId is a complexType.
class tns__updateMediaAnnotationTextWithId
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:long.
    LONG64                               arg1                           1;	///< Required element.
/// Element userName of type xs:string.
    std::string*                         userName                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.annot.me/":updateMediaAnnotationTextWithIdResponse is a complexType.
class tns__updateMediaAnnotationTextWithIdResponse
{ public:
/// Element return of type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://service.annot.me/":blessMediaAliasWithId of type "http://service.annot.me/":blessMediaAliasWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blessMediaAliasWithIdResponse of type "http://service.annot.me/":blessMediaAliasWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blessMediaAnnotationWithId of type "http://service.annot.me/":blessMediaAnnotationWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blessMediaAnnotationWithIdResponse of type "http://service.annot.me/":blessMediaAnnotationWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blessMediaTokenWithId of type "http://service.annot.me/":blessMediaTokenWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blessMediaTokenWithIdResponse of type "http://service.annot.me/":blessMediaTokenWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blockMediaAliasWithId of type "http://service.annot.me/":blockMediaAliasWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blockMediaAliasWithIdResponse of type "http://service.annot.me/":blockMediaAliasWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blockMediaAnnotationWithId of type "http://service.annot.me/":blockMediaAnnotationWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blockMediaAnnotationWithIdResponse of type "http://service.annot.me/":blockMediaAnnotationWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blockUserWithId of type "http://service.annot.me/":blockUserWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":blockUserWithIdResponse of type "http://service.annot.me/":blockUserWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":chat of type "http://service.annot.me/":chat.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":chatResponse of type "http://service.annot.me/":chatResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":curseMediaAliasWithId of type "http://service.annot.me/":curseMediaAliasWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":curseMediaAliasWithIdResponse of type "http://service.annot.me/":curseMediaAliasWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":curseMediaAnnotationWithId of type "http://service.annot.me/":curseMediaAnnotationWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":curseMediaAnnotationWithIdResponse of type "http://service.annot.me/":curseMediaAnnotationWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":curseMediaTokenWithId of type "http://service.annot.me/":curseMediaTokenWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":curseMediaTokenWithIdResponse of type "http://service.annot.me/":curseMediaTokenWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":deleteMediaAliasWithId of type "http://service.annot.me/":deleteMediaAliasWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":deleteMediaAliasWithIdResponse of type "http://service.annot.me/":deleteMediaAliasWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":deleteMediaAnnotationWithId of type "http://service.annot.me/":deleteMediaAnnotationWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":deleteMediaAnnotationWithIdResponse of type "http://service.annot.me/":deleteMediaAnnotationWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":isClientUpdated of type "http://service.annot.me/":isClientUpdated.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":isClientUpdatedResponse of type "http://service.annot.me/":isClientUpdatedResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":isConnected of type "http://service.annot.me/":isConnected.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":isConnectedResponse of type "http://service.annot.me/":isConnectedResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectLiveAnnotationsWithTokenId of type "http://service.annot.me/":selectLiveAnnotationsWithTokenId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectLiveAnnotationsWithTokenIdResponse of type "http://service.annot.me/":selectLiveAnnotationsWithTokenIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectLiveTokenWithId of type "http://service.annot.me/":selectLiveTokenWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectLiveTokenWithIdResponse of type "http://service.annot.me/":selectLiveTokenWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectMediaAliasesWithTokenId of type "http://service.annot.me/":selectMediaAliasesWithTokenId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectMediaAliasesWithTokenIdResponse of type "http://service.annot.me/":selectMediaAliasesWithTokenIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectMediaAnnotationsWithTokenId of type "http://service.annot.me/":selectMediaAnnotationsWithTokenId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectMediaAnnotationsWithTokenIdResponse of type "http://service.annot.me/":selectMediaAnnotationsWithTokenIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectMediaTokenWithDigest of type "http://service.annot.me/":selectMediaTokenWithDigest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectMediaTokenWithDigestResponse of type "http://service.annot.me/":selectMediaTokenWithDigestResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectMediaTokenWithId of type "http://service.annot.me/":selectMediaTokenWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectMediaTokenWithIdResponse of type "http://service.annot.me/":selectMediaTokenWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectRelatedMediaAnnotationsWithTokenId of type "http://service.annot.me/":selectRelatedMediaAnnotationsWithTokenId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectRelatedMediaAnnotationsWithTokenIdResponse of type "http://service.annot.me/":selectRelatedMediaAnnotationsWithTokenIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectUser of type "http://service.annot.me/":selectUser.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":selectUserResponse of type "http://service.annot.me/":selectUserResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":setUserAnonymous of type "http://service.annot.me/":setUserAnonymous.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":setUserAnonymousResponse of type "http://service.annot.me/":setUserAnonymousResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":setUserLanguage of type "http://service.annot.me/":setUserLanguage.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":setUserLanguageResponse of type "http://service.annot.me/":setUserLanguageResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitLiveAnnotationTextWithTokenId of type "http://service.annot.me/":submitLiveAnnotationTextWithTokenId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitLiveAnnotationTextWithTokenIdResponse of type "http://service.annot.me/":submitLiveAnnotationTextWithTokenIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAlias of type "http://service.annot.me/":submitMediaAlias.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAliasResponse of type "http://service.annot.me/":submitMediaAliasResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAliasTextAndTokenDigest of type "http://service.annot.me/":submitMediaAliasTextAndTokenDigest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAliasTextAndTokenDigestResponse of type "http://service.annot.me/":submitMediaAliasTextAndTokenDigestResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAliasTextWithTokenId of type "http://service.annot.me/":submitMediaAliasTextWithTokenId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAliasTextWithTokenIdResponse of type "http://service.annot.me/":submitMediaAliasTextWithTokenIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAnnotation of type "http://service.annot.me/":submitMediaAnnotation.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAnnotationResponse of type "http://service.annot.me/":submitMediaAnnotationResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAnnotationTextAndTokenDigest of type "http://service.annot.me/":submitMediaAnnotationTextAndTokenDigest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAnnotationTextAndTokenDigestResponse of type "http://service.annot.me/":submitMediaAnnotationTextAndTokenDigestResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAnnotationTextWithTokenId of type "http://service.annot.me/":submitMediaAnnotationTextWithTokenId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaAnnotationTextWithTokenIdResponse of type "http://service.annot.me/":submitMediaAnnotationTextWithTokenIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaToken of type "http://service.annot.me/":submitMediaToken.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaTokenResponse of type "http://service.annot.me/":submitMediaTokenResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaTokenDigest of type "http://service.annot.me/":submitMediaTokenDigest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":submitMediaTokenDigestResponse of type "http://service.annot.me/":submitMediaTokenDigestResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":updateMediaAnnotationTextWithId of type "http://service.annot.me/":updateMediaAnnotationTextWithId.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":updateMediaAnnotationTextWithIdResponse of type "http://service.annot.me/":updateMediaAnnotationTextWithIdResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":liveAnnotation of type "http://service.annot.me/":liveAnnotation.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":liveToken of type "http://service.annot.me/":liveToken.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":mediaAnnotation of type "http://service.annot.me/":mediaAnnotation.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":mediaToken of type "http://service.annot.me/":mediaToken.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":mediaAlias of type "http://service.annot.me/":mediaAlias.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.annot.me/":user of type "http://service.annot.me/":user.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://service.annot.me/                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap tns  service name:	ServerAgentServiceSoapBinding 
//gsoap tns  service type:	ServerAgent 
//gsoap tns  service port:	http://annotcloud.com/services/ServerAgentPort 
//gsoap tns  service namespace:	http://service.annot.me/ 
//gsoap tns  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ServerAgentService Definitions

@section ServerAgentService_bindings Service Bindings

  - @ref ServerAgentServiceSoapBinding

@section ServerAgentService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ServerAgentServiceSoapBinding Binding "ServerAgentServiceSoapBinding"

@section ServerAgentServiceSoapBinding_operations Operations of Binding  "ServerAgentServiceSoapBinding"

  - @ref __tns__blessMediaAliasWithId

  - @ref __tns__blessMediaAnnotationWithId

  - @ref __tns__blessMediaTokenWithId

  - @ref __tns__blockMediaAliasWithId

  - @ref __tns__blockMediaAnnotationWithId

  - @ref __tns__blockUserWithId

  - @ref __tns__chat

  - @ref __tns__curseMediaAliasWithId

  - @ref __tns__curseMediaAnnotationWithId

  - @ref __tns__curseMediaTokenWithId

  - @ref __tns__deleteMediaAliasWithId

  - @ref __tns__deleteMediaAnnotationWithId

  - @ref __tns__isClientUpdated

  - @ref __tns__isConnected

  - @ref __tns__selectLiveAnnotationsWithTokenId

  - @ref __tns__selectLiveTokenWithId

  - @ref __tns__selectMediaAliasesWithTokenId

  - @ref __tns__selectMediaAnnotationsWithTokenId

  - @ref __tns__selectMediaTokenWithDigest

  - @ref __tns__selectMediaTokenWithId

  - @ref __tns__selectRelatedMediaAnnotationsWithTokenId

  - @ref __tns__selectUser

  - @ref __tns__setUserAnonymous

  - @ref __tns__setUserLanguage

  - @ref __tns__submitLiveAnnotationTextWithTokenId

  - @ref __tns__submitMediaAlias

  - @ref __tns__submitMediaAliasTextAndTokenDigest

  - @ref __tns__submitMediaAliasTextWithTokenId

  - @ref __tns__submitMediaAnnotation

  - @ref __tns__submitMediaAnnotationTextAndTokenDigest

  - @ref __tns__submitMediaAnnotationTextWithTokenId

  - @ref __tns__submitMediaToken

  - @ref __tns__submitMediaTokenDigest

  - @ref __tns__updateMediaAnnotationTextWithId

@section ServerAgentServiceSoapBinding_ports Endpoints of Binding  "ServerAgentServiceSoapBinding"

  - http://annotcloud.com/services/ServerAgentPort

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ServerAgentServiceSoapBinding                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__blessMediaAliasWithId                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__blessMediaAliasWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/blessMediaAliasWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/blessMediaAliasWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__blessMediaAliasWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__blessMediaAliasWithId*         tns__blessMediaAliasWithId_,
    // response parameters:
    tns__blessMediaAliasWithIdResponse* tns__blessMediaAliasWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__blessMediaAliasWithId(
    struct soap *soap,
    // request parameters:
    tns__blessMediaAliasWithId*         tns__blessMediaAliasWithId_,
    // response parameters:
    tns__blessMediaAliasWithIdResponse* tns__blessMediaAliasWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	blessMediaAliasWithId document
//gsoap tns  service method-encoding:	blessMediaAliasWithId literal
//gsoap tns  service method-action:	blessMediaAliasWithId ""
//gsoap tns  service method-output-action:	blessMediaAliasWithId http://service.annot.me//ServerAgent/blessMediaAliasWithIdResponse
int __tns__blessMediaAliasWithId(
    tns__blessMediaAliasWithId*         tns__blessMediaAliasWithId_,	///< Request parameter
    tns__blessMediaAliasWithIdResponse* tns__blessMediaAliasWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__blessMediaAnnotationWithId                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__blessMediaAnnotationWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/blessMediaAnnotationWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/blessMediaAnnotationWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__blessMediaAnnotationWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__blessMediaAnnotationWithId*    tns__blessMediaAnnotationWithId_,
    // response parameters:
    tns__blessMediaAnnotationWithIdResponse* tns__blessMediaAnnotationWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__blessMediaAnnotationWithId(
    struct soap *soap,
    // request parameters:
    tns__blessMediaAnnotationWithId*    tns__blessMediaAnnotationWithId_,
    // response parameters:
    tns__blessMediaAnnotationWithIdResponse* tns__blessMediaAnnotationWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	blessMediaAnnotationWithId document
//gsoap tns  service method-encoding:	blessMediaAnnotationWithId literal
//gsoap tns  service method-action:	blessMediaAnnotationWithId ""
//gsoap tns  service method-output-action:	blessMediaAnnotationWithId http://service.annot.me//ServerAgent/blessMediaAnnotationWithIdResponse
int __tns__blessMediaAnnotationWithId(
    tns__blessMediaAnnotationWithId*    tns__blessMediaAnnotationWithId_,	///< Request parameter
    tns__blessMediaAnnotationWithIdResponse* tns__blessMediaAnnotationWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__blessMediaTokenWithId                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__blessMediaTokenWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/blessMediaTokenWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/blessMediaTokenWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__blessMediaTokenWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__blessMediaTokenWithId*         tns__blessMediaTokenWithId_,
    // response parameters:
    tns__blessMediaTokenWithIdResponse* tns__blessMediaTokenWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__blessMediaTokenWithId(
    struct soap *soap,
    // request parameters:
    tns__blessMediaTokenWithId*         tns__blessMediaTokenWithId_,
    // response parameters:
    tns__blessMediaTokenWithIdResponse* tns__blessMediaTokenWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	blessMediaTokenWithId document
//gsoap tns  service method-encoding:	blessMediaTokenWithId literal
//gsoap tns  service method-action:	blessMediaTokenWithId ""
//gsoap tns  service method-output-action:	blessMediaTokenWithId http://service.annot.me//ServerAgent/blessMediaTokenWithIdResponse
int __tns__blessMediaTokenWithId(
    tns__blessMediaTokenWithId*         tns__blessMediaTokenWithId_,	///< Request parameter
    tns__blessMediaTokenWithIdResponse* tns__blessMediaTokenWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__blockMediaAliasWithId                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__blockMediaAliasWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/blockMediaAliasWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/blockMediaAliasWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__blockMediaAliasWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__blockMediaAliasWithId*         tns__blockMediaAliasWithId_,
    // response parameters:
    tns__blockMediaAliasWithIdResponse* tns__blockMediaAliasWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__blockMediaAliasWithId(
    struct soap *soap,
    // request parameters:
    tns__blockMediaAliasWithId*         tns__blockMediaAliasWithId_,
    // response parameters:
    tns__blockMediaAliasWithIdResponse* tns__blockMediaAliasWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	blockMediaAliasWithId document
//gsoap tns  service method-encoding:	blockMediaAliasWithId literal
//gsoap tns  service method-action:	blockMediaAliasWithId ""
//gsoap tns  service method-output-action:	blockMediaAliasWithId http://service.annot.me//ServerAgent/blockMediaAliasWithIdResponse
int __tns__blockMediaAliasWithId(
    tns__blockMediaAliasWithId*         tns__blockMediaAliasWithId_,	///< Request parameter
    tns__blockMediaAliasWithIdResponse* tns__blockMediaAliasWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__blockMediaAnnotationWithId                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__blockMediaAnnotationWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/blockMediaAnnotationWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/blockMediaAnnotationWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__blockMediaAnnotationWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__blockMediaAnnotationWithId*    tns__blockMediaAnnotationWithId_,
    // response parameters:
    tns__blockMediaAnnotationWithIdResponse* tns__blockMediaAnnotationWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__blockMediaAnnotationWithId(
    struct soap *soap,
    // request parameters:
    tns__blockMediaAnnotationWithId*    tns__blockMediaAnnotationWithId_,
    // response parameters:
    tns__blockMediaAnnotationWithIdResponse* tns__blockMediaAnnotationWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	blockMediaAnnotationWithId document
//gsoap tns  service method-encoding:	blockMediaAnnotationWithId literal
//gsoap tns  service method-action:	blockMediaAnnotationWithId ""
//gsoap tns  service method-output-action:	blockMediaAnnotationWithId http://service.annot.me//ServerAgent/blockMediaAnnotationWithIdResponse
int __tns__blockMediaAnnotationWithId(
    tns__blockMediaAnnotationWithId*    tns__blockMediaAnnotationWithId_,	///< Request parameter
    tns__blockMediaAnnotationWithIdResponse* tns__blockMediaAnnotationWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__blockUserWithId                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__blockUserWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/blockUserWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/blockUserWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__blockUserWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__blockUserWithId*               tns__blockUserWithId_,
    // response parameters:
    tns__blockUserWithIdResponse*       tns__blockUserWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__blockUserWithId(
    struct soap *soap,
    // request parameters:
    tns__blockUserWithId*               tns__blockUserWithId_,
    // response parameters:
    tns__blockUserWithIdResponse*       tns__blockUserWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	blockUserWithId document
//gsoap tns  service method-encoding:	blockUserWithId literal
//gsoap tns  service method-action:	blockUserWithId ""
//gsoap tns  service method-output-action:	blockUserWithId http://service.annot.me//ServerAgent/blockUserWithIdResponse
int __tns__blockUserWithId(
    tns__blockUserWithId*               tns__blockUserWithId_,	///< Request parameter
    tns__blockUserWithIdResponse*       tns__blockUserWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__chat                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__chat" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/chat"

  - Addressing response action: "http://service.annot.me//ServerAgent/chatResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__chat(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__chat*                          tns__chat_,
    // response parameters:
    tns__chatResponse*                  tns__chatResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__chat(
    struct soap *soap,
    // request parameters:
    tns__chat*                          tns__chat_,
    // response parameters:
    tns__chatResponse*                  tns__chatResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	chat document
//gsoap tns  service method-encoding:	chat literal
//gsoap tns  service method-action:	chat ""
//gsoap tns  service method-output-action:	chat http://service.annot.me//ServerAgent/chatResponse
int __tns__chat(
    tns__chat*                          tns__chat_,	///< Request parameter
    tns__chatResponse*                  tns__chatResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__curseMediaAliasWithId                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__curseMediaAliasWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/curseMediaAliasWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/curseMediaAliasWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__curseMediaAliasWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__curseMediaAliasWithId*         tns__curseMediaAliasWithId_,
    // response parameters:
    tns__curseMediaAliasWithIdResponse* tns__curseMediaAliasWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__curseMediaAliasWithId(
    struct soap *soap,
    // request parameters:
    tns__curseMediaAliasWithId*         tns__curseMediaAliasWithId_,
    // response parameters:
    tns__curseMediaAliasWithIdResponse* tns__curseMediaAliasWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	curseMediaAliasWithId document
//gsoap tns  service method-encoding:	curseMediaAliasWithId literal
//gsoap tns  service method-action:	curseMediaAliasWithId ""
//gsoap tns  service method-output-action:	curseMediaAliasWithId http://service.annot.me//ServerAgent/curseMediaAliasWithIdResponse
int __tns__curseMediaAliasWithId(
    tns__curseMediaAliasWithId*         tns__curseMediaAliasWithId_,	///< Request parameter
    tns__curseMediaAliasWithIdResponse* tns__curseMediaAliasWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__curseMediaAnnotationWithId                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__curseMediaAnnotationWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/curseMediaAnnotationWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/curseMediaAnnotationWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__curseMediaAnnotationWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__curseMediaAnnotationWithId*    tns__curseMediaAnnotationWithId_,
    // response parameters:
    tns__curseMediaAnnotationWithIdResponse* tns__curseMediaAnnotationWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__curseMediaAnnotationWithId(
    struct soap *soap,
    // request parameters:
    tns__curseMediaAnnotationWithId*    tns__curseMediaAnnotationWithId_,
    // response parameters:
    tns__curseMediaAnnotationWithIdResponse* tns__curseMediaAnnotationWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	curseMediaAnnotationWithId document
//gsoap tns  service method-encoding:	curseMediaAnnotationWithId literal
//gsoap tns  service method-action:	curseMediaAnnotationWithId ""
//gsoap tns  service method-output-action:	curseMediaAnnotationWithId http://service.annot.me//ServerAgent/curseMediaAnnotationWithIdResponse
int __tns__curseMediaAnnotationWithId(
    tns__curseMediaAnnotationWithId*    tns__curseMediaAnnotationWithId_,	///< Request parameter
    tns__curseMediaAnnotationWithIdResponse* tns__curseMediaAnnotationWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__curseMediaTokenWithId                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__curseMediaTokenWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/curseMediaTokenWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/curseMediaTokenWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__curseMediaTokenWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__curseMediaTokenWithId*         tns__curseMediaTokenWithId_,
    // response parameters:
    tns__curseMediaTokenWithIdResponse* tns__curseMediaTokenWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__curseMediaTokenWithId(
    struct soap *soap,
    // request parameters:
    tns__curseMediaTokenWithId*         tns__curseMediaTokenWithId_,
    // response parameters:
    tns__curseMediaTokenWithIdResponse* tns__curseMediaTokenWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	curseMediaTokenWithId document
//gsoap tns  service method-encoding:	curseMediaTokenWithId literal
//gsoap tns  service method-action:	curseMediaTokenWithId ""
//gsoap tns  service method-output-action:	curseMediaTokenWithId http://service.annot.me//ServerAgent/curseMediaTokenWithIdResponse
int __tns__curseMediaTokenWithId(
    tns__curseMediaTokenWithId*         tns__curseMediaTokenWithId_,	///< Request parameter
    tns__curseMediaTokenWithIdResponse* tns__curseMediaTokenWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__deleteMediaAliasWithId                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__deleteMediaAliasWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/deleteMediaAliasWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/deleteMediaAliasWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__deleteMediaAliasWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__deleteMediaAliasWithId*        tns__deleteMediaAliasWithId_,
    // response parameters:
    tns__deleteMediaAliasWithIdResponse* tns__deleteMediaAliasWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__deleteMediaAliasWithId(
    struct soap *soap,
    // request parameters:
    tns__deleteMediaAliasWithId*        tns__deleteMediaAliasWithId_,
    // response parameters:
    tns__deleteMediaAliasWithIdResponse* tns__deleteMediaAliasWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	deleteMediaAliasWithId document
//gsoap tns  service method-encoding:	deleteMediaAliasWithId literal
//gsoap tns  service method-action:	deleteMediaAliasWithId ""
//gsoap tns  service method-output-action:	deleteMediaAliasWithId http://service.annot.me//ServerAgent/deleteMediaAliasWithIdResponse
int __tns__deleteMediaAliasWithId(
    tns__deleteMediaAliasWithId*        tns__deleteMediaAliasWithId_,	///< Request parameter
    tns__deleteMediaAliasWithIdResponse* tns__deleteMediaAliasWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__deleteMediaAnnotationWithId                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__deleteMediaAnnotationWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/deleteMediaAnnotationWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/deleteMediaAnnotationWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__deleteMediaAnnotationWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__deleteMediaAnnotationWithId*   tns__deleteMediaAnnotationWithId_,
    // response parameters:
    tns__deleteMediaAnnotationWithIdResponse* tns__deleteMediaAnnotationWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__deleteMediaAnnotationWithId(
    struct soap *soap,
    // request parameters:
    tns__deleteMediaAnnotationWithId*   tns__deleteMediaAnnotationWithId_,
    // response parameters:
    tns__deleteMediaAnnotationWithIdResponse* tns__deleteMediaAnnotationWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	deleteMediaAnnotationWithId document
//gsoap tns  service method-encoding:	deleteMediaAnnotationWithId literal
//gsoap tns  service method-action:	deleteMediaAnnotationWithId ""
//gsoap tns  service method-output-action:	deleteMediaAnnotationWithId http://service.annot.me//ServerAgent/deleteMediaAnnotationWithIdResponse
int __tns__deleteMediaAnnotationWithId(
    tns__deleteMediaAnnotationWithId*   tns__deleteMediaAnnotationWithId_,	///< Request parameter
    tns__deleteMediaAnnotationWithIdResponse* tns__deleteMediaAnnotationWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__isClientUpdated                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__isClientUpdated" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/isClientUpdated"

  - Addressing response action: "http://service.annot.me//ServerAgent/isClientUpdatedResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__isClientUpdated(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__isClientUpdated*               tns__isClientUpdated_,
    // response parameters:
    tns__isClientUpdatedResponse*       tns__isClientUpdatedResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__isClientUpdated(
    struct soap *soap,
    // request parameters:
    tns__isClientUpdated*               tns__isClientUpdated_,
    // response parameters:
    tns__isClientUpdatedResponse*       tns__isClientUpdatedResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	isClientUpdated document
//gsoap tns  service method-encoding:	isClientUpdated literal
//gsoap tns  service method-action:	isClientUpdated ""
//gsoap tns  service method-output-action:	isClientUpdated http://service.annot.me//ServerAgent/isClientUpdatedResponse
int __tns__isClientUpdated(
    tns__isClientUpdated*               tns__isClientUpdated_,	///< Request parameter
    tns__isClientUpdatedResponse*       tns__isClientUpdatedResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__isConnected                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__isConnected" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/isConnected"

  - Addressing response action: "http://service.annot.me//ServerAgent/isConnectedResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__isConnected(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__isConnected*                   tns__isConnected_,
    // response parameters:
    tns__isConnectedResponse*           tns__isConnectedResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__isConnected(
    struct soap *soap,
    // request parameters:
    tns__isConnected*                   tns__isConnected_,
    // response parameters:
    tns__isConnectedResponse*           tns__isConnectedResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	isConnected document
//gsoap tns  service method-encoding:	isConnected literal
//gsoap tns  service method-action:	isConnected ""
//gsoap tns  service method-output-action:	isConnected http://service.annot.me//ServerAgent/isConnectedResponse
int __tns__isConnected(
    tns__isConnected*                   tns__isConnected_,	///< Request parameter
    tns__isConnectedResponse*           tns__isConnectedResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__selectLiveAnnotationsWithTokenId                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__selectLiveAnnotationsWithTokenId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/selectLiveAnnotationsWithTokenId"

  - Addressing response action: "http://service.annot.me//ServerAgent/selectLiveAnnotationsWithTokenIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__selectLiveAnnotationsWithTokenId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__selectLiveAnnotationsWithTokenId* tns__selectLiveAnnotationsWithTokenId_,
    // response parameters:
    tns__selectLiveAnnotationsWithTokenIdResponse* tns__selectLiveAnnotationsWithTokenIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__selectLiveAnnotationsWithTokenId(
    struct soap *soap,
    // request parameters:
    tns__selectLiveAnnotationsWithTokenId* tns__selectLiveAnnotationsWithTokenId_,
    // response parameters:
    tns__selectLiveAnnotationsWithTokenIdResponse* tns__selectLiveAnnotationsWithTokenIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	selectLiveAnnotationsWithTokenId document
//gsoap tns  service method-encoding:	selectLiveAnnotationsWithTokenId literal
//gsoap tns  service method-action:	selectLiveAnnotationsWithTokenId ""
//gsoap tns  service method-output-action:	selectLiveAnnotationsWithTokenId http://service.annot.me//ServerAgent/selectLiveAnnotationsWithTokenIdResponse
int __tns__selectLiveAnnotationsWithTokenId(
    tns__selectLiveAnnotationsWithTokenId* tns__selectLiveAnnotationsWithTokenId_,	///< Request parameter
    tns__selectLiveAnnotationsWithTokenIdResponse* tns__selectLiveAnnotationsWithTokenIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__selectLiveTokenWithId                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__selectLiveTokenWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/selectLiveTokenWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/selectLiveTokenWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__selectLiveTokenWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__selectLiveTokenWithId*         tns__selectLiveTokenWithId_,
    // response parameters:
    tns__selectLiveTokenWithIdResponse* tns__selectLiveTokenWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__selectLiveTokenWithId(
    struct soap *soap,
    // request parameters:
    tns__selectLiveTokenWithId*         tns__selectLiveTokenWithId_,
    // response parameters:
    tns__selectLiveTokenWithIdResponse* tns__selectLiveTokenWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	selectLiveTokenWithId document
//gsoap tns  service method-encoding:	selectLiveTokenWithId literal
//gsoap tns  service method-action:	selectLiveTokenWithId ""
//gsoap tns  service method-output-action:	selectLiveTokenWithId http://service.annot.me//ServerAgent/selectLiveTokenWithIdResponse
int __tns__selectLiveTokenWithId(
    tns__selectLiveTokenWithId*         tns__selectLiveTokenWithId_,	///< Request parameter
    tns__selectLiveTokenWithIdResponse* tns__selectLiveTokenWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__selectMediaAliasesWithTokenId                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__selectMediaAliasesWithTokenId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/selectMediaAliasesWithTokenId"

  - Addressing response action: "http://service.annot.me//ServerAgent/selectMediaAliasesWithTokenIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__selectMediaAliasesWithTokenId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__selectMediaAliasesWithTokenId* tns__selectMediaAliasesWithTokenId_,
    // response parameters:
    tns__selectMediaAliasesWithTokenIdResponse* tns__selectMediaAliasesWithTokenIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__selectMediaAliasesWithTokenId(
    struct soap *soap,
    // request parameters:
    tns__selectMediaAliasesWithTokenId* tns__selectMediaAliasesWithTokenId_,
    // response parameters:
    tns__selectMediaAliasesWithTokenIdResponse* tns__selectMediaAliasesWithTokenIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	selectMediaAliasesWithTokenId document
//gsoap tns  service method-encoding:	selectMediaAliasesWithTokenId literal
//gsoap tns  service method-action:	selectMediaAliasesWithTokenId ""
//gsoap tns  service method-output-action:	selectMediaAliasesWithTokenId http://service.annot.me//ServerAgent/selectMediaAliasesWithTokenIdResponse
int __tns__selectMediaAliasesWithTokenId(
    tns__selectMediaAliasesWithTokenId* tns__selectMediaAliasesWithTokenId_,	///< Request parameter
    tns__selectMediaAliasesWithTokenIdResponse* tns__selectMediaAliasesWithTokenIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__selectMediaAnnotationsWithTokenId                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__selectMediaAnnotationsWithTokenId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/selectMediaAnnotationsWithTokenId"

  - Addressing response action: "http://service.annot.me//ServerAgent/selectMediaAnnotationsWithTokenIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__selectMediaAnnotationsWithTokenId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__selectMediaAnnotationsWithTokenId* tns__selectMediaAnnotationsWithTokenId_,
    // response parameters:
    tns__selectMediaAnnotationsWithTokenIdResponse* tns__selectMediaAnnotationsWithTokenIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__selectMediaAnnotationsWithTokenId(
    struct soap *soap,
    // request parameters:
    tns__selectMediaAnnotationsWithTokenId* tns__selectMediaAnnotationsWithTokenId_,
    // response parameters:
    tns__selectMediaAnnotationsWithTokenIdResponse* tns__selectMediaAnnotationsWithTokenIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	selectMediaAnnotationsWithTokenId document
//gsoap tns  service method-encoding:	selectMediaAnnotationsWithTokenId literal
//gsoap tns  service method-action:	selectMediaAnnotationsWithTokenId ""
//gsoap tns  service method-output-action:	selectMediaAnnotationsWithTokenId http://service.annot.me//ServerAgent/selectMediaAnnotationsWithTokenIdResponse
int __tns__selectMediaAnnotationsWithTokenId(
    tns__selectMediaAnnotationsWithTokenId* tns__selectMediaAnnotationsWithTokenId_,	///< Request parameter
    tns__selectMediaAnnotationsWithTokenIdResponse* tns__selectMediaAnnotationsWithTokenIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__selectMediaTokenWithDigest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__selectMediaTokenWithDigest" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/selectMediaTokenWithDigest"

  - Addressing response action: "http://service.annot.me//ServerAgent/selectMediaTokenWithDigestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__selectMediaTokenWithDigest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__selectMediaTokenWithDigest*    tns__selectMediaTokenWithDigest_,
    // response parameters:
    tns__selectMediaTokenWithDigestResponse* tns__selectMediaTokenWithDigestResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__selectMediaTokenWithDigest(
    struct soap *soap,
    // request parameters:
    tns__selectMediaTokenWithDigest*    tns__selectMediaTokenWithDigest_,
    // response parameters:
    tns__selectMediaTokenWithDigestResponse* tns__selectMediaTokenWithDigestResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	selectMediaTokenWithDigest document
//gsoap tns  service method-encoding:	selectMediaTokenWithDigest literal
//gsoap tns  service method-action:	selectMediaTokenWithDigest ""
//gsoap tns  service method-output-action:	selectMediaTokenWithDigest http://service.annot.me//ServerAgent/selectMediaTokenWithDigestResponse
int __tns__selectMediaTokenWithDigest(
    tns__selectMediaTokenWithDigest*    tns__selectMediaTokenWithDigest_,	///< Request parameter
    tns__selectMediaTokenWithDigestResponse* tns__selectMediaTokenWithDigestResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__selectMediaTokenWithId                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__selectMediaTokenWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/selectMediaTokenWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/selectMediaTokenWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__selectMediaTokenWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__selectMediaTokenWithId*        tns__selectMediaTokenWithId_,
    // response parameters:
    tns__selectMediaTokenWithIdResponse* tns__selectMediaTokenWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__selectMediaTokenWithId(
    struct soap *soap,
    // request parameters:
    tns__selectMediaTokenWithId*        tns__selectMediaTokenWithId_,
    // response parameters:
    tns__selectMediaTokenWithIdResponse* tns__selectMediaTokenWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	selectMediaTokenWithId document
//gsoap tns  service method-encoding:	selectMediaTokenWithId literal
//gsoap tns  service method-action:	selectMediaTokenWithId ""
//gsoap tns  service method-output-action:	selectMediaTokenWithId http://service.annot.me//ServerAgent/selectMediaTokenWithIdResponse
int __tns__selectMediaTokenWithId(
    tns__selectMediaTokenWithId*        tns__selectMediaTokenWithId_,	///< Request parameter
    tns__selectMediaTokenWithIdResponse* tns__selectMediaTokenWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__selectRelatedMediaAnnotationsWithTokenId                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__selectRelatedMediaAnnotationsWithTokenId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/selectRelatedMediaAnnotationsWithTokenId"

  - Addressing response action: "http://service.annot.me//ServerAgent/selectRelatedMediaAnnotationsWithTokenIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__selectRelatedMediaAnnotationsWithTokenId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__selectRelatedMediaAnnotationsWithTokenId* tns__selectRelatedMediaAnnotationsWithTokenId_,
    // response parameters:
    tns__selectRelatedMediaAnnotationsWithTokenIdResponse* tns__selectRelatedMediaAnnotationsWithTokenIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__selectRelatedMediaAnnotationsWithTokenId(
    struct soap *soap,
    // request parameters:
    tns__selectRelatedMediaAnnotationsWithTokenId* tns__selectRelatedMediaAnnotationsWithTokenId_,
    // response parameters:
    tns__selectRelatedMediaAnnotationsWithTokenIdResponse* tns__selectRelatedMediaAnnotationsWithTokenIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	selectRelatedMediaAnnotationsWithTokenId document
//gsoap tns  service method-encoding:	selectRelatedMediaAnnotationsWithTokenId literal
//gsoap tns  service method-action:	selectRelatedMediaAnnotationsWithTokenId ""
//gsoap tns  service method-output-action:	selectRelatedMediaAnnotationsWithTokenId http://service.annot.me//ServerAgent/selectRelatedMediaAnnotationsWithTokenIdResponse
int __tns__selectRelatedMediaAnnotationsWithTokenId(
    tns__selectRelatedMediaAnnotationsWithTokenId* tns__selectRelatedMediaAnnotationsWithTokenId_,	///< Request parameter
    tns__selectRelatedMediaAnnotationsWithTokenIdResponse* tns__selectRelatedMediaAnnotationsWithTokenIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__selectUser                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__selectUser" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/selectUser"

  - Addressing response action: "http://service.annot.me//ServerAgent/selectUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__selectUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__selectUser*                    tns__selectUser_,
    // response parameters:
    tns__selectUserResponse*            tns__selectUserResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__selectUser(
    struct soap *soap,
    // request parameters:
    tns__selectUser*                    tns__selectUser_,
    // response parameters:
    tns__selectUserResponse*            tns__selectUserResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	selectUser document
//gsoap tns  service method-encoding:	selectUser literal
//gsoap tns  service method-action:	selectUser ""
//gsoap tns  service method-output-action:	selectUser http://service.annot.me//ServerAgent/selectUserResponse
int __tns__selectUser(
    tns__selectUser*                    tns__selectUser_,	///< Request parameter
    tns__selectUserResponse*            tns__selectUserResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__setUserAnonymous                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__setUserAnonymous" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/setUserAnonymous"

  - Addressing response action: "http://service.annot.me//ServerAgent/setUserAnonymousResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__setUserAnonymous(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__setUserAnonymous*              tns__setUserAnonymous_,
    // response parameters:
    tns__setUserAnonymousResponse*      tns__setUserAnonymousResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__setUserAnonymous(
    struct soap *soap,
    // request parameters:
    tns__setUserAnonymous*              tns__setUserAnonymous_,
    // response parameters:
    tns__setUserAnonymousResponse*      tns__setUserAnonymousResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	setUserAnonymous document
//gsoap tns  service method-encoding:	setUserAnonymous literal
//gsoap tns  service method-action:	setUserAnonymous ""
//gsoap tns  service method-output-action:	setUserAnonymous http://service.annot.me//ServerAgent/setUserAnonymousResponse
int __tns__setUserAnonymous(
    tns__setUserAnonymous*              tns__setUserAnonymous_,	///< Request parameter
    tns__setUserAnonymousResponse*      tns__setUserAnonymousResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__setUserLanguage                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__setUserLanguage" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/setUserLanguage"

  - Addressing response action: "http://service.annot.me//ServerAgent/setUserLanguageResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__setUserLanguage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__setUserLanguage*               tns__setUserLanguage_,
    // response parameters:
    tns__setUserLanguageResponse*       tns__setUserLanguageResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__setUserLanguage(
    struct soap *soap,
    // request parameters:
    tns__setUserLanguage*               tns__setUserLanguage_,
    // response parameters:
    tns__setUserLanguageResponse*       tns__setUserLanguageResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	setUserLanguage document
//gsoap tns  service method-encoding:	setUserLanguage literal
//gsoap tns  service method-action:	setUserLanguage ""
//gsoap tns  service method-output-action:	setUserLanguage http://service.annot.me//ServerAgent/setUserLanguageResponse
int __tns__setUserLanguage(
    tns__setUserLanguage*               tns__setUserLanguage_,	///< Request parameter
    tns__setUserLanguageResponse*       tns__setUserLanguageResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitLiveAnnotationTextWithTokenId                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitLiveAnnotationTextWithTokenId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitLiveAnnotationTextWithTokenId"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitLiveAnnotationTextWithTokenIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitLiveAnnotationTextWithTokenId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitLiveAnnotationTextWithTokenId* tns__submitLiveAnnotationTextWithTokenId_,
    // response parameters:
    tns__submitLiveAnnotationTextWithTokenIdResponse* tns__submitLiveAnnotationTextWithTokenIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitLiveAnnotationTextWithTokenId(
    struct soap *soap,
    // request parameters:
    tns__submitLiveAnnotationTextWithTokenId* tns__submitLiveAnnotationTextWithTokenId_,
    // response parameters:
    tns__submitLiveAnnotationTextWithTokenIdResponse* tns__submitLiveAnnotationTextWithTokenIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitLiveAnnotationTextWithTokenId document
//gsoap tns  service method-encoding:	submitLiveAnnotationTextWithTokenId literal
//gsoap tns  service method-action:	submitLiveAnnotationTextWithTokenId ""
//gsoap tns  service method-output-action:	submitLiveAnnotationTextWithTokenId http://service.annot.me//ServerAgent/submitLiveAnnotationTextWithTokenIdResponse
int __tns__submitLiveAnnotationTextWithTokenId(
    tns__submitLiveAnnotationTextWithTokenId* tns__submitLiveAnnotationTextWithTokenId_,	///< Request parameter
    tns__submitLiveAnnotationTextWithTokenIdResponse* tns__submitLiveAnnotationTextWithTokenIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitMediaAlias                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitMediaAlias" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitMediaAlias"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitMediaAliasResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitMediaAlias(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitMediaAlias*              tns__submitMediaAlias_,
    // response parameters:
    tns__submitMediaAliasResponse*      tns__submitMediaAliasResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitMediaAlias(
    struct soap *soap,
    // request parameters:
    tns__submitMediaAlias*              tns__submitMediaAlias_,
    // response parameters:
    tns__submitMediaAliasResponse*      tns__submitMediaAliasResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitMediaAlias document
//gsoap tns  service method-encoding:	submitMediaAlias literal
//gsoap tns  service method-action:	submitMediaAlias ""
//gsoap tns  service method-output-action:	submitMediaAlias http://service.annot.me//ServerAgent/submitMediaAliasResponse
int __tns__submitMediaAlias(
    tns__submitMediaAlias*              tns__submitMediaAlias_,	///< Request parameter
    tns__submitMediaAliasResponse*      tns__submitMediaAliasResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitMediaAliasTextAndTokenDigest                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitMediaAliasTextAndTokenDigest" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitMediaAliasTextAndTokenDigest"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitMediaAliasTextAndTokenDigestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitMediaAliasTextAndTokenDigest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitMediaAliasTextAndTokenDigest* tns__submitMediaAliasTextAndTokenDigest_,
    // response parameters:
    tns__submitMediaAliasTextAndTokenDigestResponse* tns__submitMediaAliasTextAndTokenDigestResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitMediaAliasTextAndTokenDigest(
    struct soap *soap,
    // request parameters:
    tns__submitMediaAliasTextAndTokenDigest* tns__submitMediaAliasTextAndTokenDigest_,
    // response parameters:
    tns__submitMediaAliasTextAndTokenDigestResponse* tns__submitMediaAliasTextAndTokenDigestResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitMediaAliasTextAndTokenDigest document
//gsoap tns  service method-encoding:	submitMediaAliasTextAndTokenDigest literal
//gsoap tns  service method-action:	submitMediaAliasTextAndTokenDigest ""
//gsoap tns  service method-output-action:	submitMediaAliasTextAndTokenDigest http://service.annot.me//ServerAgent/submitMediaAliasTextAndTokenDigestResponse
int __tns__submitMediaAliasTextAndTokenDigest(
    tns__submitMediaAliasTextAndTokenDigest* tns__submitMediaAliasTextAndTokenDigest_,	///< Request parameter
    tns__submitMediaAliasTextAndTokenDigestResponse* tns__submitMediaAliasTextAndTokenDigestResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitMediaAliasTextWithTokenId                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitMediaAliasTextWithTokenId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitMediaAliasTextWithTokenId"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitMediaAliasTextWithTokenIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitMediaAliasTextWithTokenId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitMediaAliasTextWithTokenId* tns__submitMediaAliasTextWithTokenId_,
    // response parameters:
    tns__submitMediaAliasTextWithTokenIdResponse* tns__submitMediaAliasTextWithTokenIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitMediaAliasTextWithTokenId(
    struct soap *soap,
    // request parameters:
    tns__submitMediaAliasTextWithTokenId* tns__submitMediaAliasTextWithTokenId_,
    // response parameters:
    tns__submitMediaAliasTextWithTokenIdResponse* tns__submitMediaAliasTextWithTokenIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitMediaAliasTextWithTokenId document
//gsoap tns  service method-encoding:	submitMediaAliasTextWithTokenId literal
//gsoap tns  service method-action:	submitMediaAliasTextWithTokenId ""
//gsoap tns  service method-output-action:	submitMediaAliasTextWithTokenId http://service.annot.me//ServerAgent/submitMediaAliasTextWithTokenIdResponse
int __tns__submitMediaAliasTextWithTokenId(
    tns__submitMediaAliasTextWithTokenId* tns__submitMediaAliasTextWithTokenId_,	///< Request parameter
    tns__submitMediaAliasTextWithTokenIdResponse* tns__submitMediaAliasTextWithTokenIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitMediaAnnotation                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitMediaAnnotation" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitMediaAnnotation"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitMediaAnnotationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitMediaAnnotation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitMediaAnnotation*         tns__submitMediaAnnotation_,
    // response parameters:
    tns__submitMediaAnnotationResponse* tns__submitMediaAnnotationResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitMediaAnnotation(
    struct soap *soap,
    // request parameters:
    tns__submitMediaAnnotation*         tns__submitMediaAnnotation_,
    // response parameters:
    tns__submitMediaAnnotationResponse* tns__submitMediaAnnotationResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitMediaAnnotation document
//gsoap tns  service method-encoding:	submitMediaAnnotation literal
//gsoap tns  service method-action:	submitMediaAnnotation ""
//gsoap tns  service method-output-action:	submitMediaAnnotation http://service.annot.me//ServerAgent/submitMediaAnnotationResponse
int __tns__submitMediaAnnotation(
    tns__submitMediaAnnotation*         tns__submitMediaAnnotation_,	///< Request parameter
    tns__submitMediaAnnotationResponse* tns__submitMediaAnnotationResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitMediaAnnotationTextAndTokenDigest                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitMediaAnnotationTextAndTokenDigest" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitMediaAnnotationTextAndTokenDigest"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitMediaAnnotationTextAndTokenDigestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitMediaAnnotationTextAndTokenDigest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitMediaAnnotationTextAndTokenDigest* tns__submitMediaAnnotationTextAndTokenDigest_,
    // response parameters:
    tns__submitMediaAnnotationTextAndTokenDigestResponse* tns__submitMediaAnnotationTextAndTokenDigestResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitMediaAnnotationTextAndTokenDigest(
    struct soap *soap,
    // request parameters:
    tns__submitMediaAnnotationTextAndTokenDigest* tns__submitMediaAnnotationTextAndTokenDigest_,
    // response parameters:
    tns__submitMediaAnnotationTextAndTokenDigestResponse* tns__submitMediaAnnotationTextAndTokenDigestResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitMediaAnnotationTextAndTokenDigest document
//gsoap tns  service method-encoding:	submitMediaAnnotationTextAndTokenDigest literal
//gsoap tns  service method-action:	submitMediaAnnotationTextAndTokenDigest ""
//gsoap tns  service method-output-action:	submitMediaAnnotationTextAndTokenDigest http://service.annot.me//ServerAgent/submitMediaAnnotationTextAndTokenDigestResponse
int __tns__submitMediaAnnotationTextAndTokenDigest(
    tns__submitMediaAnnotationTextAndTokenDigest* tns__submitMediaAnnotationTextAndTokenDigest_,	///< Request parameter
    tns__submitMediaAnnotationTextAndTokenDigestResponse* tns__submitMediaAnnotationTextAndTokenDigestResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitMediaAnnotationTextWithTokenId                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitMediaAnnotationTextWithTokenId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitMediaAnnotationTextWithTokenId"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitMediaAnnotationTextWithTokenIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitMediaAnnotationTextWithTokenId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitMediaAnnotationTextWithTokenId* tns__submitMediaAnnotationTextWithTokenId_,
    // response parameters:
    tns__submitMediaAnnotationTextWithTokenIdResponse* tns__submitMediaAnnotationTextWithTokenIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitMediaAnnotationTextWithTokenId(
    struct soap *soap,
    // request parameters:
    tns__submitMediaAnnotationTextWithTokenId* tns__submitMediaAnnotationTextWithTokenId_,
    // response parameters:
    tns__submitMediaAnnotationTextWithTokenIdResponse* tns__submitMediaAnnotationTextWithTokenIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitMediaAnnotationTextWithTokenId document
//gsoap tns  service method-encoding:	submitMediaAnnotationTextWithTokenId literal
//gsoap tns  service method-action:	submitMediaAnnotationTextWithTokenId ""
//gsoap tns  service method-output-action:	submitMediaAnnotationTextWithTokenId http://service.annot.me//ServerAgent/submitMediaAnnotationTextWithTokenIdResponse
int __tns__submitMediaAnnotationTextWithTokenId(
    tns__submitMediaAnnotationTextWithTokenId* tns__submitMediaAnnotationTextWithTokenId_,	///< Request parameter
    tns__submitMediaAnnotationTextWithTokenIdResponse* tns__submitMediaAnnotationTextWithTokenIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitMediaToken                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitMediaToken" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitMediaToken"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitMediaTokenResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitMediaToken(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitMediaToken*              tns__submitMediaToken_,
    // response parameters:
    tns__submitMediaTokenResponse*      tns__submitMediaTokenResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitMediaToken(
    struct soap *soap,
    // request parameters:
    tns__submitMediaToken*              tns__submitMediaToken_,
    // response parameters:
    tns__submitMediaTokenResponse*      tns__submitMediaTokenResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitMediaToken document
//gsoap tns  service method-encoding:	submitMediaToken literal
//gsoap tns  service method-action:	submitMediaToken ""
//gsoap tns  service method-output-action:	submitMediaToken http://service.annot.me//ServerAgent/submitMediaTokenResponse
int __tns__submitMediaToken(
    tns__submitMediaToken*              tns__submitMediaToken_,	///< Request parameter
    tns__submitMediaTokenResponse*      tns__submitMediaTokenResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__submitMediaTokenDigest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__submitMediaTokenDigest" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/submitMediaTokenDigest"

  - Addressing response action: "http://service.annot.me//ServerAgent/submitMediaTokenDigestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__submitMediaTokenDigest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__submitMediaTokenDigest*        tns__submitMediaTokenDigest_,
    // response parameters:
    tns__submitMediaTokenDigestResponse* tns__submitMediaTokenDigestResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__submitMediaTokenDigest(
    struct soap *soap,
    // request parameters:
    tns__submitMediaTokenDigest*        tns__submitMediaTokenDigest_,
    // response parameters:
    tns__submitMediaTokenDigestResponse* tns__submitMediaTokenDigestResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	submitMediaTokenDigest document
//gsoap tns  service method-encoding:	submitMediaTokenDigest literal
//gsoap tns  service method-action:	submitMediaTokenDigest ""
//gsoap tns  service method-output-action:	submitMediaTokenDigest http://service.annot.me//ServerAgent/submitMediaTokenDigestResponse
int __tns__submitMediaTokenDigest(
    tns__submitMediaTokenDigest*        tns__submitMediaTokenDigest_,	///< Request parameter
    tns__submitMediaTokenDigestResponse* tns__submitMediaTokenDigestResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__updateMediaAnnotationTextWithId                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__tns__updateMediaAnnotationTextWithId" of service binding "ServerAgentServiceSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - Addressing action: "http://service.annot.me//ServerAgent/updateMediaAnnotationTextWithId"

  - Addressing response action: "http://service.annot.me//ServerAgent/updateMediaAnnotationTextWithIdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__updateMediaAnnotationTextWithId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    tns__updateMediaAnnotationTextWithId* tns__updateMediaAnnotationTextWithId_,
    // response parameters:
    tns__updateMediaAnnotationTextWithIdResponse* tns__updateMediaAnnotationTextWithIdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__updateMediaAnnotationTextWithId(
    struct soap *soap,
    // request parameters:
    tns__updateMediaAnnotationTextWithId* tns__updateMediaAnnotationTextWithId_,
    // response parameters:
    tns__updateMediaAnnotationTextWithIdResponse* tns__updateMediaAnnotationTextWithIdResponse_
  );
@endcode

C++ proxy class (defined in soapServerAgentServiceSoapBindingProxy.h):
@code
  class ServerAgentServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServerAgentServiceSoapBindingService.h):
@code
  class ServerAgentServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tns  service method-style:	updateMediaAnnotationTextWithId document
//gsoap tns  service method-encoding:	updateMediaAnnotationTextWithId literal
//gsoap tns  service method-action:	updateMediaAnnotationTextWithId ""
//gsoap tns  service method-output-action:	updateMediaAnnotationTextWithId http://service.annot.me//ServerAgent/updateMediaAnnotationTextWithIdResponse
int __tns__updateMediaAnnotationTextWithId(
    tns__updateMediaAnnotationTextWithId* tns__updateMediaAnnotationTextWithId_,	///< Request parameter
    tns__updateMediaAnnotationTextWithIdResponse* tns__updateMediaAnnotationTextWithIdResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema ""

@section tns Top-level root elements of schema "http://service.annot.me/"

  - <tns:blessMediaAliasWithId> (use wsdl2h option -g to auto-generate)

  - <tns:blessMediaAliasWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:blessMediaAnnotationWithId> (use wsdl2h option -g to auto-generate)

  - <tns:blessMediaAnnotationWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:blessMediaTokenWithId> (use wsdl2h option -g to auto-generate)

  - <tns:blessMediaTokenWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:blockMediaAliasWithId> (use wsdl2h option -g to auto-generate)

  - <tns:blockMediaAliasWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:blockMediaAnnotationWithId> (use wsdl2h option -g to auto-generate)

  - <tns:blockMediaAnnotationWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:blockUserWithId> (use wsdl2h option -g to auto-generate)

  - <tns:blockUserWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:chat> (use wsdl2h option -g to auto-generate)

  - <tns:chatResponse> (use wsdl2h option -g to auto-generate)

  - <tns:curseMediaAliasWithId> (use wsdl2h option -g to auto-generate)

  - <tns:curseMediaAliasWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:curseMediaAnnotationWithId> (use wsdl2h option -g to auto-generate)

  - <tns:curseMediaAnnotationWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:curseMediaTokenWithId> (use wsdl2h option -g to auto-generate)

  - <tns:curseMediaTokenWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:deleteMediaAliasWithId> (use wsdl2h option -g to auto-generate)

  - <tns:deleteMediaAliasWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:deleteMediaAnnotationWithId> (use wsdl2h option -g to auto-generate)

  - <tns:deleteMediaAnnotationWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:isClientUpdated> (use wsdl2h option -g to auto-generate)

  - <tns:isClientUpdatedResponse> (use wsdl2h option -g to auto-generate)

  - <tns:isConnected> (use wsdl2h option -g to auto-generate)

  - <tns:isConnectedResponse> (use wsdl2h option -g to auto-generate)

  - <tns:selectLiveAnnotationsWithTokenId> (use wsdl2h option -g to auto-generate)

  - <tns:selectLiveAnnotationsWithTokenIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:selectLiveTokenWithId> (use wsdl2h option -g to auto-generate)

  - <tns:selectLiveTokenWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:selectMediaAliasesWithTokenId> (use wsdl2h option -g to auto-generate)

  - <tns:selectMediaAliasesWithTokenIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:selectMediaAnnotationsWithTokenId> (use wsdl2h option -g to auto-generate)

  - <tns:selectMediaAnnotationsWithTokenIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:selectMediaTokenWithDigest> (use wsdl2h option -g to auto-generate)

  - <tns:selectMediaTokenWithDigestResponse> (use wsdl2h option -g to auto-generate)

  - <tns:selectMediaTokenWithId> (use wsdl2h option -g to auto-generate)

  - <tns:selectMediaTokenWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:selectRelatedMediaAnnotationsWithTokenId> (use wsdl2h option -g to auto-generate)

  - <tns:selectRelatedMediaAnnotationsWithTokenIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:selectUser> (use wsdl2h option -g to auto-generate)

  - <tns:selectUserResponse> (use wsdl2h option -g to auto-generate)

  - <tns:setUserAnonymous> (use wsdl2h option -g to auto-generate)

  - <tns:setUserAnonymousResponse> (use wsdl2h option -g to auto-generate)

  - <tns:setUserLanguage> (use wsdl2h option -g to auto-generate)

  - <tns:setUserLanguageResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitLiveAnnotationTextWithTokenId> (use wsdl2h option -g to auto-generate)

  - <tns:submitLiveAnnotationTextWithTokenIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAlias> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAliasResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAliasTextAndTokenDigest> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAliasTextAndTokenDigestResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAliasTextWithTokenId> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAliasTextWithTokenIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAnnotation> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAnnotationResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAnnotationTextAndTokenDigest> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAnnotationTextAndTokenDigestResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAnnotationTextWithTokenId> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaAnnotationTextWithTokenIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaToken> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaTokenResponse> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaTokenDigest> (use wsdl2h option -g to auto-generate)

  - <tns:submitMediaTokenDigestResponse> (use wsdl2h option -g to auto-generate)

  - <tns:updateMediaAnnotationTextWithId> (use wsdl2h option -g to auto-generate)

  - <tns:updateMediaAnnotationTextWithIdResponse> (use wsdl2h option -g to auto-generate)

  - <tns:liveAnnotation> (use wsdl2h option -g to auto-generate)

  - <tns:liveToken> (use wsdl2h option -g to auto-generate)

  - <tns:mediaAnnotation> (use wsdl2h option -g to auto-generate)

  - <tns:mediaToken> (use wsdl2h option -g to auto-generate)

  - <tns:mediaAlias> (use wsdl2h option -g to auto-generate)

  - <tns:user> (use wsdl2h option -g to auto-generate)

*/

} // namespace ServerSoap

/* End of _serversoap.h */
