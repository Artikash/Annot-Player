/* ServerSoapServerAgentServiceSoapBindingProxy.cpp
   Generated by gSOAP 2.8.3 from _serversoap.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "ServerSoapServerAgentServiceSoapBindingProxy.h"

namespace ServerSoap {

ServerAgentServiceSoapBindingProxy::ServerAgentServiceSoapBindingProxy()
{	ServerAgentServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ServerAgentServiceSoapBindingProxy::ServerAgentServiceSoapBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

ServerAgentServiceSoapBindingProxy::ServerAgentServiceSoapBindingProxy(const char *url)
{	ServerAgentServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

ServerAgentServiceSoapBindingProxy::ServerAgentServiceSoapBindingProxy(soap_mode iomode)
{	ServerAgentServiceSoapBindingProxy_init(iomode, iomode);
}

ServerAgentServiceSoapBindingProxy::ServerAgentServiceSoapBindingProxy(const char *url, soap_mode iomode)
{	ServerAgentServiceSoapBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

ServerAgentServiceSoapBindingProxy::ServerAgentServiceSoapBindingProxy(soap_mode imode, soap_mode omode)
{	ServerAgentServiceSoapBindingProxy_init(imode, omode);
}

ServerAgentServiceSoapBindingProxy::~ServerAgentServiceSoapBindingProxy()
{ }

void ServerAgentServiceSoapBindingProxy::ServerAgentServiceSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"tns", "http://service.annot.me/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void ServerAgentServiceSoapBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ServerAgentServiceSoapBindingProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *ServerAgentServiceSoapBindingProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *ServerAgentServiceSoapBindingProxy::soap_fault()
{	return this->fault;
}

const char *ServerAgentServiceSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ServerAgentServiceSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ServerAgentServiceSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void ServerAgentServiceSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void ServerAgentServiceSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *ServerAgentServiceSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ServerAgentServiceSoapBindingProxy::blessGameAnnotationWithId(const char *endpoint, const char *soap_action, tns__blessGameAnnotationWithId *tns__blessGameAnnotationWithId_, tns__blessGameAnnotationWithIdResponse *tns__blessGameAnnotationWithIdResponse_)
{	struct soap *soap = this;
	struct __tns__blessGameAnnotationWithId soap_tmp___tns__blessGameAnnotationWithId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__blessGameAnnotationWithId.tns__blessGameAnnotationWithId_ = tns__blessGameAnnotationWithId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__blessGameAnnotationWithId(soap, &soap_tmp___tns__blessGameAnnotationWithId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__blessGameAnnotationWithId(soap, &soap_tmp___tns__blessGameAnnotationWithId, "-tns:blessGameAnnotationWithId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__blessGameAnnotationWithId(soap, &soap_tmp___tns__blessGameAnnotationWithId, "-tns:blessGameAnnotationWithId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__blessGameAnnotationWithIdResponse_)
		return soap_closesock(soap);
	tns__blessGameAnnotationWithIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__blessGameAnnotationWithIdResponse_->soap_get(soap, "tns:blessGameAnnotationWithIdResponse", "tns:blessGameAnnotationWithIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::blessMediaAnnotationWithId(const char *endpoint, const char *soap_action, tns__blessMediaAnnotationWithId *tns__blessMediaAnnotationWithId_, tns__blessMediaAnnotationWithIdResponse *tns__blessMediaAnnotationWithIdResponse_)
{	struct soap *soap = this;
	struct __tns__blessMediaAnnotationWithId soap_tmp___tns__blessMediaAnnotationWithId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__blessMediaAnnotationWithId.tns__blessMediaAnnotationWithId_ = tns__blessMediaAnnotationWithId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__blessMediaAnnotationWithId(soap, &soap_tmp___tns__blessMediaAnnotationWithId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__blessMediaAnnotationWithId(soap, &soap_tmp___tns__blessMediaAnnotationWithId, "-tns:blessMediaAnnotationWithId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__blessMediaAnnotationWithId(soap, &soap_tmp___tns__blessMediaAnnotationWithId, "-tns:blessMediaAnnotationWithId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__blessMediaAnnotationWithIdResponse_)
		return soap_closesock(soap);
	tns__blessMediaAnnotationWithIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__blessMediaAnnotationWithIdResponse_->soap_get(soap, "tns:blessMediaAnnotationWithIdResponse", "tns:blessMediaAnnotationWithIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::chat(const char *endpoint, const char *soap_action, tns__chat *tns__chat_, tns__chatResponse *tns__chatResponse_)
{	struct soap *soap = this;
	struct __tns__chat soap_tmp___tns__chat;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__chat.tns__chat_ = tns__chat_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__chat(soap, &soap_tmp___tns__chat);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__chat(soap, &soap_tmp___tns__chat, "-tns:chat", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__chat(soap, &soap_tmp___tns__chat, "-tns:chat", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__chatResponse_)
		return soap_closesock(soap);
	tns__chatResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__chatResponse_->soap_get(soap, "tns:chatResponse", "tns:chatResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::isClientUpdated(const char *endpoint, const char *soap_action, tns__isClientUpdated *tns__isClientUpdated_, tns__isClientUpdatedResponse *tns__isClientUpdatedResponse_)
{	struct soap *soap = this;
	struct __tns__isClientUpdated soap_tmp___tns__isClientUpdated;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__isClientUpdated.tns__isClientUpdated_ = tns__isClientUpdated_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__isClientUpdated(soap, &soap_tmp___tns__isClientUpdated);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__isClientUpdated(soap, &soap_tmp___tns__isClientUpdated, "-tns:isClientUpdated", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__isClientUpdated(soap, &soap_tmp___tns__isClientUpdated, "-tns:isClientUpdated", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__isClientUpdatedResponse_)
		return soap_closesock(soap);
	tns__isClientUpdatedResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__isClientUpdatedResponse_->soap_get(soap, "tns:isClientUpdatedResponse", "tns:isClientUpdatedResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::isConnected(const char *endpoint, const char *soap_action, tns__isConnected *tns__isConnected_, tns__isConnectedResponse *tns__isConnectedResponse_)
{	struct soap *soap = this;
	struct __tns__isConnected soap_tmp___tns__isConnected;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__isConnected.tns__isConnected_ = tns__isConnected_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__isConnected(soap, &soap_tmp___tns__isConnected);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__isConnected(soap, &soap_tmp___tns__isConnected, "-tns:isConnected", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__isConnected(soap, &soap_tmp___tns__isConnected, "-tns:isConnected", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__isConnectedResponse_)
		return soap_closesock(soap);
	tns__isConnectedResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__isConnectedResponse_->soap_get(soap, "tns:isConnectedResponse", "tns:isConnectedResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectGameAliasesWithTokenId(const char *endpoint, const char *soap_action, tns__selectGameAliasesWithTokenId *tns__selectGameAliasesWithTokenId_, tns__selectGameAliasesWithTokenIdResponse *tns__selectGameAliasesWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__selectGameAliasesWithTokenId soap_tmp___tns__selectGameAliasesWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectGameAliasesWithTokenId.tns__selectGameAliasesWithTokenId_ = tns__selectGameAliasesWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectGameAliasesWithTokenId(soap, &soap_tmp___tns__selectGameAliasesWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectGameAliasesWithTokenId(soap, &soap_tmp___tns__selectGameAliasesWithTokenId, "-tns:selectGameAliasesWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectGameAliasesWithTokenId(soap, &soap_tmp___tns__selectGameAliasesWithTokenId, "-tns:selectGameAliasesWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectGameAliasesWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__selectGameAliasesWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectGameAliasesWithTokenIdResponse_->soap_get(soap, "tns:selectGameAliasesWithTokenIdResponse", "tns:selectGameAliasesWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectGameAnnotationsWithTokenId(const char *endpoint, const char *soap_action, tns__selectGameAnnotationsWithTokenId *tns__selectGameAnnotationsWithTokenId_, tns__selectGameAnnotationsWithTokenIdResponse *tns__selectGameAnnotationsWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__selectGameAnnotationsWithTokenId soap_tmp___tns__selectGameAnnotationsWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectGameAnnotationsWithTokenId.tns__selectGameAnnotationsWithTokenId_ = tns__selectGameAnnotationsWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectGameAnnotationsWithTokenId(soap, &soap_tmp___tns__selectGameAnnotationsWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectGameAnnotationsWithTokenId(soap, &soap_tmp___tns__selectGameAnnotationsWithTokenId, "-tns:selectGameAnnotationsWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectGameAnnotationsWithTokenId(soap, &soap_tmp___tns__selectGameAnnotationsWithTokenId, "-tns:selectGameAnnotationsWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectGameAnnotationsWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__selectGameAnnotationsWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectGameAnnotationsWithTokenIdResponse_->soap_get(soap, "tns:selectGameAnnotationsWithTokenIdResponse", "tns:selectGameAnnotationsWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectGameTokenWithDigest(const char *endpoint, const char *soap_action, tns__selectGameTokenWithDigest *tns__selectGameTokenWithDigest_, tns__selectGameTokenWithDigestResponse *tns__selectGameTokenWithDigestResponse_)
{	struct soap *soap = this;
	struct __tns__selectGameTokenWithDigest soap_tmp___tns__selectGameTokenWithDigest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectGameTokenWithDigest.tns__selectGameTokenWithDigest_ = tns__selectGameTokenWithDigest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectGameTokenWithDigest(soap, &soap_tmp___tns__selectGameTokenWithDigest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectGameTokenWithDigest(soap, &soap_tmp___tns__selectGameTokenWithDigest, "-tns:selectGameTokenWithDigest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectGameTokenWithDigest(soap, &soap_tmp___tns__selectGameTokenWithDigest, "-tns:selectGameTokenWithDigest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectGameTokenWithDigestResponse_)
		return soap_closesock(soap);
	tns__selectGameTokenWithDigestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectGameTokenWithDigestResponse_->soap_get(soap, "tns:selectGameTokenWithDigestResponse", "tns:selectGameTokenWithDigestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectGameTokenWithId(const char *endpoint, const char *soap_action, tns__selectGameTokenWithId *tns__selectGameTokenWithId_, tns__selectGameTokenWithIdResponse *tns__selectGameTokenWithIdResponse_)
{	struct soap *soap = this;
	struct __tns__selectGameTokenWithId soap_tmp___tns__selectGameTokenWithId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectGameTokenWithId.tns__selectGameTokenWithId_ = tns__selectGameTokenWithId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectGameTokenWithId(soap, &soap_tmp___tns__selectGameTokenWithId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectGameTokenWithId(soap, &soap_tmp___tns__selectGameTokenWithId, "-tns:selectGameTokenWithId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectGameTokenWithId(soap, &soap_tmp___tns__selectGameTokenWithId, "-tns:selectGameTokenWithId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectGameTokenWithIdResponse_)
		return soap_closesock(soap);
	tns__selectGameTokenWithIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectGameTokenWithIdResponse_->soap_get(soap, "tns:selectGameTokenWithIdResponse", "tns:selectGameTokenWithIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectMediaAliasesWithTokenId(const char *endpoint, const char *soap_action, tns__selectMediaAliasesWithTokenId *tns__selectMediaAliasesWithTokenId_, tns__selectMediaAliasesWithTokenIdResponse *tns__selectMediaAliasesWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__selectMediaAliasesWithTokenId soap_tmp___tns__selectMediaAliasesWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectMediaAliasesWithTokenId.tns__selectMediaAliasesWithTokenId_ = tns__selectMediaAliasesWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectMediaAliasesWithTokenId(soap, &soap_tmp___tns__selectMediaAliasesWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectMediaAliasesWithTokenId(soap, &soap_tmp___tns__selectMediaAliasesWithTokenId, "-tns:selectMediaAliasesWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectMediaAliasesWithTokenId(soap, &soap_tmp___tns__selectMediaAliasesWithTokenId, "-tns:selectMediaAliasesWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectMediaAliasesWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__selectMediaAliasesWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectMediaAliasesWithTokenIdResponse_->soap_get(soap, "tns:selectMediaAliasesWithTokenIdResponse", "tns:selectMediaAliasesWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectMediaAnnotationsWithTokenId(const char *endpoint, const char *soap_action, tns__selectMediaAnnotationsWithTokenId *tns__selectMediaAnnotationsWithTokenId_, tns__selectMediaAnnotationsWithTokenIdResponse *tns__selectMediaAnnotationsWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__selectMediaAnnotationsWithTokenId soap_tmp___tns__selectMediaAnnotationsWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectMediaAnnotationsWithTokenId.tns__selectMediaAnnotationsWithTokenId_ = tns__selectMediaAnnotationsWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectMediaAnnotationsWithTokenId(soap, &soap_tmp___tns__selectMediaAnnotationsWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectMediaAnnotationsWithTokenId(soap, &soap_tmp___tns__selectMediaAnnotationsWithTokenId, "-tns:selectMediaAnnotationsWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectMediaAnnotationsWithTokenId(soap, &soap_tmp___tns__selectMediaAnnotationsWithTokenId, "-tns:selectMediaAnnotationsWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectMediaAnnotationsWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__selectMediaAnnotationsWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectMediaAnnotationsWithTokenIdResponse_->soap_get(soap, "tns:selectMediaAnnotationsWithTokenIdResponse", "tns:selectMediaAnnotationsWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectMediaTokenWithDigest(const char *endpoint, const char *soap_action, tns__selectMediaTokenWithDigest *tns__selectMediaTokenWithDigest_, tns__selectMediaTokenWithDigestResponse *tns__selectMediaTokenWithDigestResponse_)
{	struct soap *soap = this;
	struct __tns__selectMediaTokenWithDigest soap_tmp___tns__selectMediaTokenWithDigest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectMediaTokenWithDigest.tns__selectMediaTokenWithDigest_ = tns__selectMediaTokenWithDigest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectMediaTokenWithDigest(soap, &soap_tmp___tns__selectMediaTokenWithDigest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectMediaTokenWithDigest(soap, &soap_tmp___tns__selectMediaTokenWithDigest, "-tns:selectMediaTokenWithDigest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectMediaTokenWithDigest(soap, &soap_tmp___tns__selectMediaTokenWithDigest, "-tns:selectMediaTokenWithDigest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectMediaTokenWithDigestResponse_)
		return soap_closesock(soap);
	tns__selectMediaTokenWithDigestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectMediaTokenWithDigestResponse_->soap_get(soap, "tns:selectMediaTokenWithDigestResponse", "tns:selectMediaTokenWithDigestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectMediaTokenWithId(const char *endpoint, const char *soap_action, tns__selectMediaTokenWithId *tns__selectMediaTokenWithId_, tns__selectMediaTokenWithIdResponse *tns__selectMediaTokenWithIdResponse_)
{	struct soap *soap = this;
	struct __tns__selectMediaTokenWithId soap_tmp___tns__selectMediaTokenWithId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectMediaTokenWithId.tns__selectMediaTokenWithId_ = tns__selectMediaTokenWithId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectMediaTokenWithId(soap, &soap_tmp___tns__selectMediaTokenWithId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectMediaTokenWithId(soap, &soap_tmp___tns__selectMediaTokenWithId, "-tns:selectMediaTokenWithId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectMediaTokenWithId(soap, &soap_tmp___tns__selectMediaTokenWithId, "-tns:selectMediaTokenWithId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectMediaTokenWithIdResponse_)
		return soap_closesock(soap);
	tns__selectMediaTokenWithIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectMediaTokenWithIdResponse_->soap_get(soap, "tns:selectMediaTokenWithIdResponse", "tns:selectMediaTokenWithIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectRelatedGameAnnotationsWithTokenId(const char *endpoint, const char *soap_action, tns__selectRelatedGameAnnotationsWithTokenId *tns__selectRelatedGameAnnotationsWithTokenId_, tns__selectRelatedGameAnnotationsWithTokenIdResponse *tns__selectRelatedGameAnnotationsWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__selectRelatedGameAnnotationsWithTokenId soap_tmp___tns__selectRelatedGameAnnotationsWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectRelatedGameAnnotationsWithTokenId.tns__selectRelatedGameAnnotationsWithTokenId_ = tns__selectRelatedGameAnnotationsWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectRelatedGameAnnotationsWithTokenId(soap, &soap_tmp___tns__selectRelatedGameAnnotationsWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectRelatedGameAnnotationsWithTokenId(soap, &soap_tmp___tns__selectRelatedGameAnnotationsWithTokenId, "-tns:selectRelatedGameAnnotationsWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectRelatedGameAnnotationsWithTokenId(soap, &soap_tmp___tns__selectRelatedGameAnnotationsWithTokenId, "-tns:selectRelatedGameAnnotationsWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectRelatedGameAnnotationsWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__selectRelatedGameAnnotationsWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectRelatedGameAnnotationsWithTokenIdResponse_->soap_get(soap, "tns:selectRelatedGameAnnotationsWithTokenIdResponse", "tns:selectRelatedGameAnnotationsWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectRelatedMediaAnnotationsWithTokenId(const char *endpoint, const char *soap_action, tns__selectRelatedMediaAnnotationsWithTokenId *tns__selectRelatedMediaAnnotationsWithTokenId_, tns__selectRelatedMediaAnnotationsWithTokenIdResponse *tns__selectRelatedMediaAnnotationsWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__selectRelatedMediaAnnotationsWithTokenId soap_tmp___tns__selectRelatedMediaAnnotationsWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectRelatedMediaAnnotationsWithTokenId.tns__selectRelatedMediaAnnotationsWithTokenId_ = tns__selectRelatedMediaAnnotationsWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectRelatedMediaAnnotationsWithTokenId(soap, &soap_tmp___tns__selectRelatedMediaAnnotationsWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectRelatedMediaAnnotationsWithTokenId(soap, &soap_tmp___tns__selectRelatedMediaAnnotationsWithTokenId, "-tns:selectRelatedMediaAnnotationsWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectRelatedMediaAnnotationsWithTokenId(soap, &soap_tmp___tns__selectRelatedMediaAnnotationsWithTokenId, "-tns:selectRelatedMediaAnnotationsWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectRelatedMediaAnnotationsWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__selectRelatedMediaAnnotationsWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectRelatedMediaAnnotationsWithTokenIdResponse_->soap_get(soap, "tns:selectRelatedMediaAnnotationsWithTokenIdResponse", "tns:selectRelatedMediaAnnotationsWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::selectUser(const char *endpoint, const char *soap_action, tns__selectUser *tns__selectUser_, tns__selectUserResponse *tns__selectUserResponse_)
{	struct soap *soap = this;
	struct __tns__selectUser soap_tmp___tns__selectUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__selectUser.tns__selectUser_ = tns__selectUser_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__selectUser(soap, &soap_tmp___tns__selectUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__selectUser(soap, &soap_tmp___tns__selectUser, "-tns:selectUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__selectUser(soap, &soap_tmp___tns__selectUser, "-tns:selectUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__selectUserResponse_)
		return soap_closesock(soap);
	tns__selectUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__selectUserResponse_->soap_get(soap, "tns:selectUserResponse", "tns:selectUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::setUserAnonymous(const char *endpoint, const char *soap_action, tns__setUserAnonymous *tns__setUserAnonymous_, tns__setUserAnonymousResponse *tns__setUserAnonymousResponse_)
{	struct soap *soap = this;
	struct __tns__setUserAnonymous soap_tmp___tns__setUserAnonymous;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__setUserAnonymous.tns__setUserAnonymous_ = tns__setUserAnonymous_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__setUserAnonymous(soap, &soap_tmp___tns__setUserAnonymous);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__setUserAnonymous(soap, &soap_tmp___tns__setUserAnonymous, "-tns:setUserAnonymous", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__setUserAnonymous(soap, &soap_tmp___tns__setUserAnonymous, "-tns:setUserAnonymous", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__setUserAnonymousResponse_)
		return soap_closesock(soap);
	tns__setUserAnonymousResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__setUserAnonymousResponse_->soap_get(soap, "tns:setUserAnonymousResponse", "tns:setUserAnonymousResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::setUserLanguage(const char *endpoint, const char *soap_action, tns__setUserLanguage *tns__setUserLanguage_, tns__setUserLanguageResponse *tns__setUserLanguageResponse_)
{	struct soap *soap = this;
	struct __tns__setUserLanguage soap_tmp___tns__setUserLanguage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__setUserLanguage.tns__setUserLanguage_ = tns__setUserLanguage_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__setUserLanguage(soap, &soap_tmp___tns__setUserLanguage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__setUserLanguage(soap, &soap_tmp___tns__setUserLanguage, "-tns:setUserLanguage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__setUserLanguage(soap, &soap_tmp___tns__setUserLanguage, "-tns:setUserLanguage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__setUserLanguageResponse_)
		return soap_closesock(soap);
	tns__setUserLanguageResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__setUserLanguageResponse_->soap_get(soap, "tns:setUserLanguageResponse", "tns:setUserLanguageResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitGameAlias(const char *endpoint, const char *soap_action, tns__submitGameAlias *tns__submitGameAlias_, tns__submitGameAliasResponse *tns__submitGameAliasResponse_)
{	struct soap *soap = this;
	struct __tns__submitGameAlias soap_tmp___tns__submitGameAlias;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitGameAlias.tns__submitGameAlias_ = tns__submitGameAlias_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitGameAlias(soap, &soap_tmp___tns__submitGameAlias);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitGameAlias(soap, &soap_tmp___tns__submitGameAlias, "-tns:submitGameAlias", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitGameAlias(soap, &soap_tmp___tns__submitGameAlias, "-tns:submitGameAlias", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitGameAliasResponse_)
		return soap_closesock(soap);
	tns__submitGameAliasResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitGameAliasResponse_->soap_get(soap, "tns:submitGameAliasResponse", "tns:submitGameAliasResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitGameAliasTextAndTokenDigest(const char *endpoint, const char *soap_action, tns__submitGameAliasTextAndTokenDigest *tns__submitGameAliasTextAndTokenDigest_, tns__submitGameAliasTextAndTokenDigestResponse *tns__submitGameAliasTextAndTokenDigestResponse_)
{	struct soap *soap = this;
	struct __tns__submitGameAliasTextAndTokenDigest soap_tmp___tns__submitGameAliasTextAndTokenDigest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitGameAliasTextAndTokenDigest.tns__submitGameAliasTextAndTokenDigest_ = tns__submitGameAliasTextAndTokenDigest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitGameAliasTextAndTokenDigest(soap, &soap_tmp___tns__submitGameAliasTextAndTokenDigest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitGameAliasTextAndTokenDigest(soap, &soap_tmp___tns__submitGameAliasTextAndTokenDigest, "-tns:submitGameAliasTextAndTokenDigest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitGameAliasTextAndTokenDigest(soap, &soap_tmp___tns__submitGameAliasTextAndTokenDigest, "-tns:submitGameAliasTextAndTokenDigest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitGameAliasTextAndTokenDigestResponse_)
		return soap_closesock(soap);
	tns__submitGameAliasTextAndTokenDigestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitGameAliasTextAndTokenDigestResponse_->soap_get(soap, "tns:submitGameAliasTextAndTokenDigestResponse", "tns:submitGameAliasTextAndTokenDigestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitGameAliasTextWithTokenId(const char *endpoint, const char *soap_action, tns__submitGameAliasTextWithTokenId *tns__submitGameAliasTextWithTokenId_, tns__submitGameAliasTextWithTokenIdResponse *tns__submitGameAliasTextWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__submitGameAliasTextWithTokenId soap_tmp___tns__submitGameAliasTextWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitGameAliasTextWithTokenId.tns__submitGameAliasTextWithTokenId_ = tns__submitGameAliasTextWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitGameAliasTextWithTokenId(soap, &soap_tmp___tns__submitGameAliasTextWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitGameAliasTextWithTokenId(soap, &soap_tmp___tns__submitGameAliasTextWithTokenId, "-tns:submitGameAliasTextWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitGameAliasTextWithTokenId(soap, &soap_tmp___tns__submitGameAliasTextWithTokenId, "-tns:submitGameAliasTextWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitGameAliasTextWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__submitGameAliasTextWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitGameAliasTextWithTokenIdResponse_->soap_get(soap, "tns:submitGameAliasTextWithTokenIdResponse", "tns:submitGameAliasTextWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitGameAnnotation(const char *endpoint, const char *soap_action, tns__submitGameAnnotation *tns__submitGameAnnotation_, tns__submitGameAnnotationResponse *tns__submitGameAnnotationResponse_)
{	struct soap *soap = this;
	struct __tns__submitGameAnnotation soap_tmp___tns__submitGameAnnotation;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitGameAnnotation.tns__submitGameAnnotation_ = tns__submitGameAnnotation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitGameAnnotation(soap, &soap_tmp___tns__submitGameAnnotation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitGameAnnotation(soap, &soap_tmp___tns__submitGameAnnotation, "-tns:submitGameAnnotation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitGameAnnotation(soap, &soap_tmp___tns__submitGameAnnotation, "-tns:submitGameAnnotation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitGameAnnotationResponse_)
		return soap_closesock(soap);
	tns__submitGameAnnotationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitGameAnnotationResponse_->soap_get(soap, "tns:submitGameAnnotationResponse", "tns:submitGameAnnotationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitGameAnnotationTextAndTokenDigest(const char *endpoint, const char *soap_action, tns__submitGameAnnotationTextAndTokenDigest *tns__submitGameAnnotationTextAndTokenDigest_, tns__submitGameAnnotationTextAndTokenDigestResponse *tns__submitGameAnnotationTextAndTokenDigestResponse_)
{	struct soap *soap = this;
	struct __tns__submitGameAnnotationTextAndTokenDigest soap_tmp___tns__submitGameAnnotationTextAndTokenDigest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitGameAnnotationTextAndTokenDigest.tns__submitGameAnnotationTextAndTokenDigest_ = tns__submitGameAnnotationTextAndTokenDigest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitGameAnnotationTextAndTokenDigest(soap, &soap_tmp___tns__submitGameAnnotationTextAndTokenDigest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitGameAnnotationTextAndTokenDigest(soap, &soap_tmp___tns__submitGameAnnotationTextAndTokenDigest, "-tns:submitGameAnnotationTextAndTokenDigest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitGameAnnotationTextAndTokenDigest(soap, &soap_tmp___tns__submitGameAnnotationTextAndTokenDigest, "-tns:submitGameAnnotationTextAndTokenDigest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitGameAnnotationTextAndTokenDigestResponse_)
		return soap_closesock(soap);
	tns__submitGameAnnotationTextAndTokenDigestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitGameAnnotationTextAndTokenDigestResponse_->soap_get(soap, "tns:submitGameAnnotationTextAndTokenDigestResponse", "tns:submitGameAnnotationTextAndTokenDigestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitGameAnnotationTextWithTokenId(const char *endpoint, const char *soap_action, tns__submitGameAnnotationTextWithTokenId *tns__submitGameAnnotationTextWithTokenId_, tns__submitGameAnnotationTextWithTokenIdResponse *tns__submitGameAnnotationTextWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__submitGameAnnotationTextWithTokenId soap_tmp___tns__submitGameAnnotationTextWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitGameAnnotationTextWithTokenId.tns__submitGameAnnotationTextWithTokenId_ = tns__submitGameAnnotationTextWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitGameAnnotationTextWithTokenId(soap, &soap_tmp___tns__submitGameAnnotationTextWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitGameAnnotationTextWithTokenId(soap, &soap_tmp___tns__submitGameAnnotationTextWithTokenId, "-tns:submitGameAnnotationTextWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitGameAnnotationTextWithTokenId(soap, &soap_tmp___tns__submitGameAnnotationTextWithTokenId, "-tns:submitGameAnnotationTextWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitGameAnnotationTextWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__submitGameAnnotationTextWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitGameAnnotationTextWithTokenIdResponse_->soap_get(soap, "tns:submitGameAnnotationTextWithTokenIdResponse", "tns:submitGameAnnotationTextWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitGameToken(const char *endpoint, const char *soap_action, tns__submitGameToken *tns__submitGameToken_, tns__submitGameTokenResponse *tns__submitGameTokenResponse_)
{	struct soap *soap = this;
	struct __tns__submitGameToken soap_tmp___tns__submitGameToken;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitGameToken.tns__submitGameToken_ = tns__submitGameToken_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitGameToken(soap, &soap_tmp___tns__submitGameToken);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitGameToken(soap, &soap_tmp___tns__submitGameToken, "-tns:submitGameToken", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitGameToken(soap, &soap_tmp___tns__submitGameToken, "-tns:submitGameToken", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitGameTokenResponse_)
		return soap_closesock(soap);
	tns__submitGameTokenResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitGameTokenResponse_->soap_get(soap, "tns:submitGameTokenResponse", "tns:submitGameTokenResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitGameTokenDigest(const char *endpoint, const char *soap_action, tns__submitGameTokenDigest *tns__submitGameTokenDigest_, tns__submitGameTokenDigestResponse *tns__submitGameTokenDigestResponse_)
{	struct soap *soap = this;
	struct __tns__submitGameTokenDigest soap_tmp___tns__submitGameTokenDigest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitGameTokenDigest.tns__submitGameTokenDigest_ = tns__submitGameTokenDigest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitGameTokenDigest(soap, &soap_tmp___tns__submitGameTokenDigest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitGameTokenDigest(soap, &soap_tmp___tns__submitGameTokenDigest, "-tns:submitGameTokenDigest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitGameTokenDigest(soap, &soap_tmp___tns__submitGameTokenDigest, "-tns:submitGameTokenDigest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitGameTokenDigestResponse_)
		return soap_closesock(soap);
	tns__submitGameTokenDigestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitGameTokenDigestResponse_->soap_get(soap, "tns:submitGameTokenDigestResponse", "tns:submitGameTokenDigestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitMediaAlias(const char *endpoint, const char *soap_action, tns__submitMediaAlias *tns__submitMediaAlias_, tns__submitMediaAliasResponse *tns__submitMediaAliasResponse_)
{	struct soap *soap = this;
	struct __tns__submitMediaAlias soap_tmp___tns__submitMediaAlias;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitMediaAlias.tns__submitMediaAlias_ = tns__submitMediaAlias_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitMediaAlias(soap, &soap_tmp___tns__submitMediaAlias);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitMediaAlias(soap, &soap_tmp___tns__submitMediaAlias, "-tns:submitMediaAlias", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitMediaAlias(soap, &soap_tmp___tns__submitMediaAlias, "-tns:submitMediaAlias", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitMediaAliasResponse_)
		return soap_closesock(soap);
	tns__submitMediaAliasResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitMediaAliasResponse_->soap_get(soap, "tns:submitMediaAliasResponse", "tns:submitMediaAliasResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitMediaAliasTextAndTokenDigest(const char *endpoint, const char *soap_action, tns__submitMediaAliasTextAndTokenDigest *tns__submitMediaAliasTextAndTokenDigest_, tns__submitMediaAliasTextAndTokenDigestResponse *tns__submitMediaAliasTextAndTokenDigestResponse_)
{	struct soap *soap = this;
	struct __tns__submitMediaAliasTextAndTokenDigest soap_tmp___tns__submitMediaAliasTextAndTokenDigest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitMediaAliasTextAndTokenDigest.tns__submitMediaAliasTextAndTokenDigest_ = tns__submitMediaAliasTextAndTokenDigest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitMediaAliasTextAndTokenDigest(soap, &soap_tmp___tns__submitMediaAliasTextAndTokenDigest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitMediaAliasTextAndTokenDigest(soap, &soap_tmp___tns__submitMediaAliasTextAndTokenDigest, "-tns:submitMediaAliasTextAndTokenDigest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitMediaAliasTextAndTokenDigest(soap, &soap_tmp___tns__submitMediaAliasTextAndTokenDigest, "-tns:submitMediaAliasTextAndTokenDigest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitMediaAliasTextAndTokenDigestResponse_)
		return soap_closesock(soap);
	tns__submitMediaAliasTextAndTokenDigestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitMediaAliasTextAndTokenDigestResponse_->soap_get(soap, "tns:submitMediaAliasTextAndTokenDigestResponse", "tns:submitMediaAliasTextAndTokenDigestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitMediaAliasTextWithTokenId(const char *endpoint, const char *soap_action, tns__submitMediaAliasTextWithTokenId *tns__submitMediaAliasTextWithTokenId_, tns__submitMediaAliasTextWithTokenIdResponse *tns__submitMediaAliasTextWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__submitMediaAliasTextWithTokenId soap_tmp___tns__submitMediaAliasTextWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitMediaAliasTextWithTokenId.tns__submitMediaAliasTextWithTokenId_ = tns__submitMediaAliasTextWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitMediaAliasTextWithTokenId(soap, &soap_tmp___tns__submitMediaAliasTextWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitMediaAliasTextWithTokenId(soap, &soap_tmp___tns__submitMediaAliasTextWithTokenId, "-tns:submitMediaAliasTextWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitMediaAliasTextWithTokenId(soap, &soap_tmp___tns__submitMediaAliasTextWithTokenId, "-tns:submitMediaAliasTextWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitMediaAliasTextWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__submitMediaAliasTextWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitMediaAliasTextWithTokenIdResponse_->soap_get(soap, "tns:submitMediaAliasTextWithTokenIdResponse", "tns:submitMediaAliasTextWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitMediaAnnotation(const char *endpoint, const char *soap_action, tns__submitMediaAnnotation *tns__submitMediaAnnotation_, tns__submitMediaAnnotationResponse *tns__submitMediaAnnotationResponse_)
{	struct soap *soap = this;
	struct __tns__submitMediaAnnotation soap_tmp___tns__submitMediaAnnotation;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitMediaAnnotation.tns__submitMediaAnnotation_ = tns__submitMediaAnnotation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitMediaAnnotation(soap, &soap_tmp___tns__submitMediaAnnotation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitMediaAnnotation(soap, &soap_tmp___tns__submitMediaAnnotation, "-tns:submitMediaAnnotation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitMediaAnnotation(soap, &soap_tmp___tns__submitMediaAnnotation, "-tns:submitMediaAnnotation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitMediaAnnotationResponse_)
		return soap_closesock(soap);
	tns__submitMediaAnnotationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitMediaAnnotationResponse_->soap_get(soap, "tns:submitMediaAnnotationResponse", "tns:submitMediaAnnotationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitMediaAnnotationTextAndTokenDigest(const char *endpoint, const char *soap_action, tns__submitMediaAnnotationTextAndTokenDigest *tns__submitMediaAnnotationTextAndTokenDigest_, tns__submitMediaAnnotationTextAndTokenDigestResponse *tns__submitMediaAnnotationTextAndTokenDigestResponse_)
{	struct soap *soap = this;
	struct __tns__submitMediaAnnotationTextAndTokenDigest soap_tmp___tns__submitMediaAnnotationTextAndTokenDigest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitMediaAnnotationTextAndTokenDigest.tns__submitMediaAnnotationTextAndTokenDigest_ = tns__submitMediaAnnotationTextAndTokenDigest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitMediaAnnotationTextAndTokenDigest(soap, &soap_tmp___tns__submitMediaAnnotationTextAndTokenDigest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitMediaAnnotationTextAndTokenDigest(soap, &soap_tmp___tns__submitMediaAnnotationTextAndTokenDigest, "-tns:submitMediaAnnotationTextAndTokenDigest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitMediaAnnotationTextAndTokenDigest(soap, &soap_tmp___tns__submitMediaAnnotationTextAndTokenDigest, "-tns:submitMediaAnnotationTextAndTokenDigest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitMediaAnnotationTextAndTokenDigestResponse_)
		return soap_closesock(soap);
	tns__submitMediaAnnotationTextAndTokenDigestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitMediaAnnotationTextAndTokenDigestResponse_->soap_get(soap, "tns:submitMediaAnnotationTextAndTokenDigestResponse", "tns:submitMediaAnnotationTextAndTokenDigestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitMediaAnnotationTextWithTokenId(const char *endpoint, const char *soap_action, tns__submitMediaAnnotationTextWithTokenId *tns__submitMediaAnnotationTextWithTokenId_, tns__submitMediaAnnotationTextWithTokenIdResponse *tns__submitMediaAnnotationTextWithTokenIdResponse_)
{	struct soap *soap = this;
	struct __tns__submitMediaAnnotationTextWithTokenId soap_tmp___tns__submitMediaAnnotationTextWithTokenId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitMediaAnnotationTextWithTokenId.tns__submitMediaAnnotationTextWithTokenId_ = tns__submitMediaAnnotationTextWithTokenId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitMediaAnnotationTextWithTokenId(soap, &soap_tmp___tns__submitMediaAnnotationTextWithTokenId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitMediaAnnotationTextWithTokenId(soap, &soap_tmp___tns__submitMediaAnnotationTextWithTokenId, "-tns:submitMediaAnnotationTextWithTokenId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitMediaAnnotationTextWithTokenId(soap, &soap_tmp___tns__submitMediaAnnotationTextWithTokenId, "-tns:submitMediaAnnotationTextWithTokenId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitMediaAnnotationTextWithTokenIdResponse_)
		return soap_closesock(soap);
	tns__submitMediaAnnotationTextWithTokenIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitMediaAnnotationTextWithTokenIdResponse_->soap_get(soap, "tns:submitMediaAnnotationTextWithTokenIdResponse", "tns:submitMediaAnnotationTextWithTokenIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitMediaToken(const char *endpoint, const char *soap_action, tns__submitMediaToken *tns__submitMediaToken_, tns__submitMediaTokenResponse *tns__submitMediaTokenResponse_)
{	struct soap *soap = this;
	struct __tns__submitMediaToken soap_tmp___tns__submitMediaToken;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitMediaToken.tns__submitMediaToken_ = tns__submitMediaToken_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitMediaToken(soap, &soap_tmp___tns__submitMediaToken);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitMediaToken(soap, &soap_tmp___tns__submitMediaToken, "-tns:submitMediaToken", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitMediaToken(soap, &soap_tmp___tns__submitMediaToken, "-tns:submitMediaToken", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitMediaTokenResponse_)
		return soap_closesock(soap);
	tns__submitMediaTokenResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitMediaTokenResponse_->soap_get(soap, "tns:submitMediaTokenResponse", "tns:submitMediaTokenResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::submitMediaTokenDigest(const char *endpoint, const char *soap_action, tns__submitMediaTokenDigest *tns__submitMediaTokenDigest_, tns__submitMediaTokenDigestResponse *tns__submitMediaTokenDigestResponse_)
{	struct soap *soap = this;
	struct __tns__submitMediaTokenDigest soap_tmp___tns__submitMediaTokenDigest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__submitMediaTokenDigest.tns__submitMediaTokenDigest_ = tns__submitMediaTokenDigest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__submitMediaTokenDigest(soap, &soap_tmp___tns__submitMediaTokenDigest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__submitMediaTokenDigest(soap, &soap_tmp___tns__submitMediaTokenDigest, "-tns:submitMediaTokenDigest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__submitMediaTokenDigest(soap, &soap_tmp___tns__submitMediaTokenDigest, "-tns:submitMediaTokenDigest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__submitMediaTokenDigestResponse_)
		return soap_closesock(soap);
	tns__submitMediaTokenDigestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__submitMediaTokenDigestResponse_->soap_get(soap, "tns:submitMediaTokenDigestResponse", "tns:submitMediaTokenDigestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::updateGameAnnotationTextWithId(const char *endpoint, const char *soap_action, tns__updateGameAnnotationTextWithId *tns__updateGameAnnotationTextWithId_, tns__updateGameAnnotationTextWithIdResponse *tns__updateGameAnnotationTextWithIdResponse_)
{	struct soap *soap = this;
	struct __tns__updateGameAnnotationTextWithId soap_tmp___tns__updateGameAnnotationTextWithId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__updateGameAnnotationTextWithId.tns__updateGameAnnotationTextWithId_ = tns__updateGameAnnotationTextWithId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__updateGameAnnotationTextWithId(soap, &soap_tmp___tns__updateGameAnnotationTextWithId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__updateGameAnnotationTextWithId(soap, &soap_tmp___tns__updateGameAnnotationTextWithId, "-tns:updateGameAnnotationTextWithId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__updateGameAnnotationTextWithId(soap, &soap_tmp___tns__updateGameAnnotationTextWithId, "-tns:updateGameAnnotationTextWithId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__updateGameAnnotationTextWithIdResponse_)
		return soap_closesock(soap);
	tns__updateGameAnnotationTextWithIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__updateGameAnnotationTextWithIdResponse_->soap_get(soap, "tns:updateGameAnnotationTextWithIdResponse", "tns:updateGameAnnotationTextWithIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerAgentServiceSoapBindingProxy::updateMediaAnnotationTextWithId(const char *endpoint, const char *soap_action, tns__updateMediaAnnotationTextWithId *tns__updateMediaAnnotationTextWithId_, tns__updateMediaAnnotationTextWithIdResponse *tns__updateMediaAnnotationTextWithIdResponse_)
{	struct soap *soap = this;
	struct __tns__updateMediaAnnotationTextWithId soap_tmp___tns__updateMediaAnnotationTextWithId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/services/ServerAgentPort";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___tns__updateMediaAnnotationTextWithId.tns__updateMediaAnnotationTextWithId_ = tns__updateMediaAnnotationTextWithId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tns__updateMediaAnnotationTextWithId(soap, &soap_tmp___tns__updateMediaAnnotationTextWithId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tns__updateMediaAnnotationTextWithId(soap, &soap_tmp___tns__updateMediaAnnotationTextWithId, "-tns:updateMediaAnnotationTextWithId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tns__updateMediaAnnotationTextWithId(soap, &soap_tmp___tns__updateMediaAnnotationTextWithId, "-tns:updateMediaAnnotationTextWithId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tns__updateMediaAnnotationTextWithIdResponse_)
		return soap_closesock(soap);
	tns__updateMediaAnnotationTextWithIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tns__updateMediaAnnotationTextWithIdResponse_->soap_get(soap, "tns:updateMediaAnnotationTextWithIdResponse", "tns:updateMediaAnnotationTextWithIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace ServerSoap

/* End of client proxy code */
