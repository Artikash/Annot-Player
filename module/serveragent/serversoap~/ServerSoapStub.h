/* ServerSoapStub.h
   Generated by gSOAP 2.8.3 from _serversoap.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef ServerSoapStub_H
#define ServerSoapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	""
#define SOAP_NAMESPACE_OF_tns	"http://service.annot.me/"
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace ServerSoap {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ServerSoap_tns__gameAnnotation
#define SOAP_TYPE_ServerSoap_tns__gameAnnotation (8)
/* tns:gameAnnotation */
class SOAP_CMAC tns__gameAnnotation
{
public:
	int blessedCount;	/* required element of type xsd:int */
	int blockedCount;	/* required element of type xsd:int */
	LONG64 createTime;	/* required element of type xsd:long */
	int cursedCount;	/* required element of type xsd:int */
	LONG64 flags;	/* required element of type xsd:long */
	LONG64 id;	/* required element of type xsd:long */
	int language;	/* required element of type xsd:int */
	LONG64 pos;	/* required element of type xsd:long */
	int posType;	/* required element of type xsd:int */
	LONG64 userId;	/* required element of type xsd:long */
	std::string *userAlias;	/* optional element of type xsd:string */
	int status;	/* required element of type xsd:int */
	std::string *text;	/* optional element of type xsd:string */
	LONG64 tokenId;	/* required element of type xsd:long */
	LONG64 updateTime;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ServerSoap_tns__gameAnnotation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__gameAnnotation() { tns__gameAnnotation::soap_default(NULL); }
	virtual ~tns__gameAnnotation() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__gameToken
#define SOAP_TYPE_ServerSoap_tns__gameToken (9)
/* tns:gameToken */
class SOAP_CMAC tns__gameToken
{
public:
	int blessedCount;	/* required element of type xsd:int */
	int blockedCount;	/* required element of type xsd:int */
	LONG64 createTime;	/* required element of type xsd:long */
	int cursedCount;	/* required element of type xsd:int */
	std::string *digest;	/* optional element of type xsd:string */
	LONG64 flags;	/* required element of type xsd:long */
	LONG64 id;	/* required element of type xsd:long */
	LONG64 userId;	/* required element of type xsd:long */
	int status;	/* required element of type xsd:int */
	int visitedCount;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ServerSoap_tns__gameToken */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__gameToken() { tns__gameToken::soap_default(NULL); }
	virtual ~tns__gameToken() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__gameAlias
#define SOAP_TYPE_ServerSoap_tns__gameAlias (10)
/* tns:gameAlias */
class SOAP_CMAC tns__gameAlias
{
public:
	int blessedCount;	/* required element of type xsd:int */
	int blockedCount;	/* required element of type xsd:int */
	int cursedCount;	/* required element of type xsd:int */
	std::string *digest;	/* optional element of type xsd:string */
	LONG64 flags;	/* required element of type xsd:long */
	LONG64 id;	/* required element of type xsd:long */
	int language;	/* required element of type xsd:int */
	LONG64 userId;	/* required element of type xsd:long */
	int status;	/* required element of type xsd:int */
	std::string *text;	/* optional element of type xsd:string */
	LONG64 tokenId;	/* required element of type xsd:long */
	int type;	/* required element of type xsd:int */
	LONG64 updateTime;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ServerSoap_tns__gameAlias */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__gameAlias() { tns__gameAlias::soap_default(NULL); }
	virtual ~tns__gameAlias() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__mediaAnnotation
#define SOAP_TYPE_ServerSoap_tns__mediaAnnotation (11)
/* tns:mediaAnnotation */
class SOAP_CMAC tns__mediaAnnotation
{
public:
	int blessedCount;	/* required element of type xsd:int */
	int blockedCount;	/* required element of type xsd:int */
	LONG64 createTime;	/* required element of type xsd:long */
	int cursedCount;	/* required element of type xsd:int */
	LONG64 flags;	/* required element of type xsd:long */
	LONG64 id;	/* required element of type xsd:long */
	int language;	/* required element of type xsd:int */
	LONG64 pos;	/* required element of type xsd:long */
	int posType;	/* required element of type xsd:int */
	LONG64 userId;	/* required element of type xsd:long */
	std::string *userAlias;	/* optional element of type xsd:string */
	int status;	/* required element of type xsd:int */
	std::string *text;	/* optional element of type xsd:string */
	LONG64 tokenId;	/* required element of type xsd:long */
	LONG64 updateTime;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ServerSoap_tns__mediaAnnotation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__mediaAnnotation() { tns__mediaAnnotation::soap_default(NULL); }
	virtual ~tns__mediaAnnotation() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__mediaToken
#define SOAP_TYPE_ServerSoap_tns__mediaToken (12)
/* tns:mediaToken */
class SOAP_CMAC tns__mediaToken
{
public:
	int blessedCount;	/* required element of type xsd:int */
	int blockedCount;	/* required element of type xsd:int */
	LONG64 createTime;	/* required element of type xsd:long */
	int cursedCount;	/* required element of type xsd:int */
	std::string *digest;	/* optional element of type xsd:string */
	LONG64 flags;	/* required element of type xsd:long */
	LONG64 id;	/* required element of type xsd:long */
	LONG64 userId;	/* required element of type xsd:long */
	int status;	/* required element of type xsd:int */
	int visitedCount;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ServerSoap_tns__mediaToken */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__mediaToken() { tns__mediaToken::soap_default(NULL); }
	virtual ~tns__mediaToken() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__mediaAlias
#define SOAP_TYPE_ServerSoap_tns__mediaAlias (13)
/* tns:mediaAlias */
class SOAP_CMAC tns__mediaAlias
{
public:
	int blessedCount;	/* required element of type xsd:int */
	int blockedCount;	/* required element of type xsd:int */
	int cursedCount;	/* required element of type xsd:int */
	std::string *digest;	/* optional element of type xsd:string */
	LONG64 flags;	/* required element of type xsd:long */
	LONG64 id;	/* required element of type xsd:long */
	int language;	/* required element of type xsd:int */
	LONG64 userId;	/* required element of type xsd:long */
	int status;	/* required element of type xsd:int */
	std::string *text;	/* optional element of type xsd:string */
	LONG64 tokenId;	/* required element of type xsd:long */
	int type;	/* required element of type xsd:int */
	LONG64 updateTime;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ServerSoap_tns__mediaAlias */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__mediaAlias() { tns__mediaAlias::soap_default(NULL); }
	virtual ~tns__mediaAlias() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__user
#define SOAP_TYPE_ServerSoap_tns__user (14)
/* tns:user */
class SOAP_CMAC tns__user
{
public:
	int blessedCount;	/* required element of type xsd:int */
	int blockedCount;	/* required element of type xsd:int */
	LONG64 createTime;	/* required element of type xsd:long */
	int cursedCount;	/* required element of type xsd:int */
	std::string *email;	/* optional element of type xsd:string */
	LONG64 flags;	/* required element of type xsd:long */
	LONG64 groupId;	/* required element of type xsd:long */
	LONG64 id;	/* required element of type xsd:long */
	int language;	/* required element of type xsd:int */
	LONG64 loginTime;	/* required element of type xsd:long */
	std::string *name;	/* optional element of type xsd:string */
	std::string *nickname;	/* optional element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
	int status;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ServerSoap_tns__user */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__user() { tns__user::soap_default(NULL); }
	virtual ~tns__user() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__blessGameAnnotationWithId
#define SOAP_TYPE_ServerSoap_tns__blessGameAnnotationWithId (15)
/* tns:blessGameAnnotationWithId */
class SOAP_CMAC tns__blessGameAnnotationWithId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ServerSoap_tns__blessGameAnnotationWithId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__blessGameAnnotationWithId() { tns__blessGameAnnotationWithId::soap_default(NULL); }
	virtual ~tns__blessGameAnnotationWithId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__blessGameAnnotationWithIdResponse
#define SOAP_TYPE_ServerSoap_tns__blessGameAnnotationWithIdResponse (16)
/* tns:blessGameAnnotationWithIdResponse */
class SOAP_CMAC tns__blessGameAnnotationWithIdResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ServerSoap_tns__blessGameAnnotationWithIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__blessGameAnnotationWithIdResponse() { tns__blessGameAnnotationWithIdResponse::soap_default(NULL); }
	virtual ~tns__blessGameAnnotationWithIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__blessMediaAnnotationWithId
#define SOAP_TYPE_ServerSoap_tns__blessMediaAnnotationWithId (17)
/* tns:blessMediaAnnotationWithId */
class SOAP_CMAC tns__blessMediaAnnotationWithId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ServerSoap_tns__blessMediaAnnotationWithId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__blessMediaAnnotationWithId() { tns__blessMediaAnnotationWithId::soap_default(NULL); }
	virtual ~tns__blessMediaAnnotationWithId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__blessMediaAnnotationWithIdResponse
#define SOAP_TYPE_ServerSoap_tns__blessMediaAnnotationWithIdResponse (18)
/* tns:blessMediaAnnotationWithIdResponse */
class SOAP_CMAC tns__blessMediaAnnotationWithIdResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ServerSoap_tns__blessMediaAnnotationWithIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__blessMediaAnnotationWithIdResponse() { tns__blessMediaAnnotationWithIdResponse::soap_default(NULL); }
	virtual ~tns__blessMediaAnnotationWithIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__chat
#define SOAP_TYPE_ServerSoap_tns__chat (19)
/* tns:chat */
class SOAP_CMAC tns__chat
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ServerSoap_tns__chat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__chat() { tns__chat::soap_default(NULL); }
	virtual ~tns__chat() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__chatResponse
#define SOAP_TYPE_ServerSoap_tns__chatResponse (20)
/* tns:chatResponse */
class SOAP_CMAC tns__chatResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ServerSoap_tns__chatResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__chatResponse() { tns__chatResponse::soap_default(NULL); }
	virtual ~tns__chatResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__getUser
#define SOAP_TYPE_ServerSoap_tns__getUser (21)
/* tns:getUser */
class SOAP_CMAC tns__getUser
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ServerSoap_tns__getUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__getUser() { tns__getUser::soap_default(NULL); }
	virtual ~tns__getUser() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__getUserResponse
#define SOAP_TYPE_ServerSoap_tns__getUserResponse (22)
/* tns:getUserResponse */
class SOAP_CMAC tns__getUserResponse
{
public:
	tns__user *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:user */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ServerSoap_tns__getUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__getUserResponse() { tns__getUserResponse::soap_default(NULL); }
	virtual ~tns__getUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__isAuthorized
#define SOAP_TYPE_ServerSoap_tns__isAuthorized (23)
/* tns:isAuthorized */
class SOAP_CMAC tns__isAuthorized
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ServerSoap_tns__isAuthorized */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__isAuthorized() { tns__isAuthorized::soap_default(NULL); }
	virtual ~tns__isAuthorized() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__isAuthorizedResponse
#define SOAP_TYPE_ServerSoap_tns__isAuthorizedResponse (24)
/* tns:isAuthorizedResponse */
class SOAP_CMAC tns__isAuthorizedResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ServerSoap_tns__isAuthorizedResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__isAuthorizedResponse() { tns__isAuthorizedResponse::soap_default(NULL); }
	virtual ~tns__isAuthorizedResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__isConnected
#define SOAP_TYPE_ServerSoap_tns__isConnected (25)
/* tns:isConnected */
class SOAP_CMAC tns__isConnected
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ServerSoap_tns__isConnected */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__isConnected() { tns__isConnected::soap_default(NULL); }
	virtual ~tns__isConnected() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__isConnectedResponse
#define SOAP_TYPE_ServerSoap_tns__isConnectedResponse (26)
/* tns:isConnectedResponse */
class SOAP_CMAC tns__isConnectedResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ServerSoap_tns__isConnectedResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__isConnectedResponse() { tns__isConnectedResponse::soap_default(NULL); }
	virtual ~tns__isConnectedResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__login
#define SOAP_TYPE_ServerSoap_tns__login (27)
/* tns:login */
class SOAP_CMAC tns__login
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	std::string *arg1;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ServerSoap_tns__login */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__login() { tns__login::soap_default(NULL); }
	virtual ~tns__login() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__loginResponse
#define SOAP_TYPE_ServerSoap_tns__loginResponse (28)
/* tns:loginResponse */
class SOAP_CMAC tns__loginResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ServerSoap_tns__loginResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__loginResponse() { tns__loginResponse::soap_default(NULL); }
	virtual ~tns__loginResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__logout
#define SOAP_TYPE_ServerSoap_tns__logout (29)
/* tns:logout */
class SOAP_CMAC tns__logout
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ServerSoap_tns__logout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__logout() { tns__logout::soap_default(NULL); }
	virtual ~tns__logout() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__logoutResponse
#define SOAP_TYPE_ServerSoap_tns__logoutResponse (30)
/* tns:logoutResponse */
class SOAP_CMAC tns__logoutResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ServerSoap_tns__logoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__logoutResponse() { tns__logoutResponse::soap_default(NULL); }
	virtual ~tns__logoutResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectGameAliasesWithTokenId
#define SOAP_TYPE_ServerSoap_tns__selectGameAliasesWithTokenId (31)
/* tns:selectGameAliasesWithTokenId */
class SOAP_CMAC tns__selectGameAliasesWithTokenId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectGameAliasesWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectGameAliasesWithTokenId() { tns__selectGameAliasesWithTokenId::soap_default(NULL); }
	virtual ~tns__selectGameAliasesWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectGameAliasesWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__selectGameAliasesWithTokenIdResponse (32)
/* tns:selectGameAliasesWithTokenIdResponse */
class SOAP_CMAC tns__selectGameAliasesWithTokenIdResponse
{
public:
	std::vector<tns__gameAlias * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:gameAlias */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectGameAliasesWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectGameAliasesWithTokenIdResponse() { tns__selectGameAliasesWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__selectGameAliasesWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectGameAnnotationsWithTokenId
#define SOAP_TYPE_ServerSoap_tns__selectGameAnnotationsWithTokenId (33)
/* tns:selectGameAnnotationsWithTokenId */
class SOAP_CMAC tns__selectGameAnnotationsWithTokenId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectGameAnnotationsWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectGameAnnotationsWithTokenId() { tns__selectGameAnnotationsWithTokenId::soap_default(NULL); }
	virtual ~tns__selectGameAnnotationsWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectGameAnnotationsWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__selectGameAnnotationsWithTokenIdResponse (34)
/* tns:selectGameAnnotationsWithTokenIdResponse */
class SOAP_CMAC tns__selectGameAnnotationsWithTokenIdResponse
{
public:
	std::vector<tns__gameAnnotation * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:gameAnnotation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectGameAnnotationsWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectGameAnnotationsWithTokenIdResponse() { tns__selectGameAnnotationsWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__selectGameAnnotationsWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectGameTokenWithDigest
#define SOAP_TYPE_ServerSoap_tns__selectGameTokenWithDigest (35)
/* tns:selectGameTokenWithDigest */
class SOAP_CMAC tns__selectGameTokenWithDigest
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectGameTokenWithDigest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectGameTokenWithDigest() { tns__selectGameTokenWithDigest::soap_default(NULL); }
	virtual ~tns__selectGameTokenWithDigest() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectGameTokenWithDigestResponse
#define SOAP_TYPE_ServerSoap_tns__selectGameTokenWithDigestResponse (36)
/* tns:selectGameTokenWithDigestResponse */
class SOAP_CMAC tns__selectGameTokenWithDigestResponse
{
public:
	tns__gameToken *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:gameToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectGameTokenWithDigestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectGameTokenWithDigestResponse() { tns__selectGameTokenWithDigestResponse::soap_default(NULL); }
	virtual ~tns__selectGameTokenWithDigestResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectGameTokenWithId
#define SOAP_TYPE_ServerSoap_tns__selectGameTokenWithId (37)
/* tns:selectGameTokenWithId */
class SOAP_CMAC tns__selectGameTokenWithId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectGameTokenWithId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectGameTokenWithId() { tns__selectGameTokenWithId::soap_default(NULL); }
	virtual ~tns__selectGameTokenWithId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectGameTokenWithIdResponse
#define SOAP_TYPE_ServerSoap_tns__selectGameTokenWithIdResponse (38)
/* tns:selectGameTokenWithIdResponse */
class SOAP_CMAC tns__selectGameTokenWithIdResponse
{
public:
	tns__gameToken *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:gameToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectGameTokenWithIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectGameTokenWithIdResponse() { tns__selectGameTokenWithIdResponse::soap_default(NULL); }
	virtual ~tns__selectGameTokenWithIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectMediaAliasesWithTokenId
#define SOAP_TYPE_ServerSoap_tns__selectMediaAliasesWithTokenId (39)
/* tns:selectMediaAliasesWithTokenId */
class SOAP_CMAC tns__selectMediaAliasesWithTokenId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectMediaAliasesWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectMediaAliasesWithTokenId() { tns__selectMediaAliasesWithTokenId::soap_default(NULL); }
	virtual ~tns__selectMediaAliasesWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectMediaAliasesWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__selectMediaAliasesWithTokenIdResponse (40)
/* tns:selectMediaAliasesWithTokenIdResponse */
class SOAP_CMAC tns__selectMediaAliasesWithTokenIdResponse
{
public:
	std::vector<tns__mediaAlias * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:mediaAlias */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectMediaAliasesWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectMediaAliasesWithTokenIdResponse() { tns__selectMediaAliasesWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__selectMediaAliasesWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectMediaAnnotationsWithTokenId
#define SOAP_TYPE_ServerSoap_tns__selectMediaAnnotationsWithTokenId (41)
/* tns:selectMediaAnnotationsWithTokenId */
class SOAP_CMAC tns__selectMediaAnnotationsWithTokenId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectMediaAnnotationsWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectMediaAnnotationsWithTokenId() { tns__selectMediaAnnotationsWithTokenId::soap_default(NULL); }
	virtual ~tns__selectMediaAnnotationsWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectMediaAnnotationsWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__selectMediaAnnotationsWithTokenIdResponse (42)
/* tns:selectMediaAnnotationsWithTokenIdResponse */
class SOAP_CMAC tns__selectMediaAnnotationsWithTokenIdResponse
{
public:
	std::vector<tns__mediaAnnotation * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:mediaAnnotation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectMediaAnnotationsWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectMediaAnnotationsWithTokenIdResponse() { tns__selectMediaAnnotationsWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__selectMediaAnnotationsWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithDigest
#define SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithDigest (43)
/* tns:selectMediaTokenWithDigest */
class SOAP_CMAC tns__selectMediaTokenWithDigest
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithDigest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectMediaTokenWithDigest() { tns__selectMediaTokenWithDigest::soap_default(NULL); }
	virtual ~tns__selectMediaTokenWithDigest() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithDigestResponse
#define SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithDigestResponse (44)
/* tns:selectMediaTokenWithDigestResponse */
class SOAP_CMAC tns__selectMediaTokenWithDigestResponse
{
public:
	tns__mediaToken *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:mediaToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithDigestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectMediaTokenWithDigestResponse() { tns__selectMediaTokenWithDigestResponse::soap_default(NULL); }
	virtual ~tns__selectMediaTokenWithDigestResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithId
#define SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithId (45)
/* tns:selectMediaTokenWithId */
class SOAP_CMAC tns__selectMediaTokenWithId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectMediaTokenWithId() { tns__selectMediaTokenWithId::soap_default(NULL); }
	virtual ~tns__selectMediaTokenWithId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithIdResponse
#define SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithIdResponse (46)
/* tns:selectMediaTokenWithIdResponse */
class SOAP_CMAC tns__selectMediaTokenWithIdResponse
{
public:
	tns__mediaToken *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:mediaToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectMediaTokenWithIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectMediaTokenWithIdResponse() { tns__selectMediaTokenWithIdResponse::soap_default(NULL); }
	virtual ~tns__selectMediaTokenWithIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectRelatedGameAnnotationsWithTokenId
#define SOAP_TYPE_ServerSoap_tns__selectRelatedGameAnnotationsWithTokenId (47)
/* tns:selectRelatedGameAnnotationsWithTokenId */
class SOAP_CMAC tns__selectRelatedGameAnnotationsWithTokenId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectRelatedGameAnnotationsWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectRelatedGameAnnotationsWithTokenId() { tns__selectRelatedGameAnnotationsWithTokenId::soap_default(NULL); }
	virtual ~tns__selectRelatedGameAnnotationsWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectRelatedGameAnnotationsWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__selectRelatedGameAnnotationsWithTokenIdResponse (48)
/* tns:selectRelatedGameAnnotationsWithTokenIdResponse */
class SOAP_CMAC tns__selectRelatedGameAnnotationsWithTokenIdResponse
{
public:
	std::vector<tns__gameAnnotation * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:gameAnnotation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectRelatedGameAnnotationsWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectRelatedGameAnnotationsWithTokenIdResponse() { tns__selectRelatedGameAnnotationsWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__selectRelatedGameAnnotationsWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectRelatedMediaAnnotationsWithTokenId
#define SOAP_TYPE_ServerSoap_tns__selectRelatedMediaAnnotationsWithTokenId (49)
/* tns:selectRelatedMediaAnnotationsWithTokenId */
class SOAP_CMAC tns__selectRelatedMediaAnnotationsWithTokenId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectRelatedMediaAnnotationsWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectRelatedMediaAnnotationsWithTokenId() { tns__selectRelatedMediaAnnotationsWithTokenId::soap_default(NULL); }
	virtual ~tns__selectRelatedMediaAnnotationsWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__selectRelatedMediaAnnotationsWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__selectRelatedMediaAnnotationsWithTokenIdResponse (50)
/* tns:selectRelatedMediaAnnotationsWithTokenIdResponse */
class SOAP_CMAC tns__selectRelatedMediaAnnotationsWithTokenIdResponse
{
public:
	std::vector<tns__mediaAnnotation * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:mediaAnnotation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ServerSoap_tns__selectRelatedMediaAnnotationsWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__selectRelatedMediaAnnotationsWithTokenIdResponse() { tns__selectRelatedMediaAnnotationsWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__selectRelatedMediaAnnotationsWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__setCallback
#define SOAP_TYPE_ServerSoap_tns__setCallback (51)
/* tns:setCallback */
class SOAP_CMAC tns__setCallback
{
public:
	int arg0;	/* required element of type xsd:int */
	LONG64 arg1;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ServerSoap_tns__setCallback */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__setCallback() { tns__setCallback::soap_default(NULL); }
	virtual ~tns__setCallback() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__setCallbackResponse
#define SOAP_TYPE_ServerSoap_tns__setCallbackResponse (52)
/* tns:setCallbackResponse */
class SOAP_CMAC tns__setCallbackResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ServerSoap_tns__setCallbackResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__setCallbackResponse() { tns__setCallbackResponse::soap_default(NULL); }
	virtual ~tns__setCallbackResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__setClientType
#define SOAP_TYPE_ServerSoap_tns__setClientType (53)
/* tns:setClientType */
class SOAP_CMAC tns__setClientType
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ServerSoap_tns__setClientType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__setClientType() { tns__setClientType::soap_default(NULL); }
	virtual ~tns__setClientType() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__setClientTypeResponse
#define SOAP_TYPE_ServerSoap_tns__setClientTypeResponse (54)
/* tns:setClientTypeResponse */
class SOAP_CMAC tns__setClientTypeResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ServerSoap_tns__setClientTypeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__setClientTypeResponse() { tns__setClientTypeResponse::soap_default(NULL); }
	virtual ~tns__setClientTypeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__setUserAnonymous
#define SOAP_TYPE_ServerSoap_tns__setUserAnonymous (55)
/* tns:setUserAnonymous */
class SOAP_CMAC tns__setUserAnonymous
{
public:
	bool arg0;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ServerSoap_tns__setUserAnonymous */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__setUserAnonymous() { tns__setUserAnonymous::soap_default(NULL); }
	virtual ~tns__setUserAnonymous() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__setUserAnonymousResponse
#define SOAP_TYPE_ServerSoap_tns__setUserAnonymousResponse (56)
/* tns:setUserAnonymousResponse */
class SOAP_CMAC tns__setUserAnonymousResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ServerSoap_tns__setUserAnonymousResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__setUserAnonymousResponse() { tns__setUserAnonymousResponse::soap_default(NULL); }
	virtual ~tns__setUserAnonymousResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__setUserLanguage
#define SOAP_TYPE_ServerSoap_tns__setUserLanguage (57)
/* tns:setUserLanguage */
class SOAP_CMAC tns__setUserLanguage
{
public:
	int arg0;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ServerSoap_tns__setUserLanguage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__setUserLanguage() { tns__setUserLanguage::soap_default(NULL); }
	virtual ~tns__setUserLanguage() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__setUserLanguageResponse
#define SOAP_TYPE_ServerSoap_tns__setUserLanguageResponse (58)
/* tns:setUserLanguageResponse */
class SOAP_CMAC tns__setUserLanguageResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ServerSoap_tns__setUserLanguageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__setUserLanguageResponse() { tns__setUserLanguageResponse::soap_default(NULL); }
	virtual ~tns__setUserLanguageResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAlias
#define SOAP_TYPE_ServerSoap_tns__submitGameAlias (59)
/* tns:submitGameAlias */
class SOAP_CMAC tns__submitGameAlias
{
public:
	tns__gameAlias *arg0;	/* optional element of type tns:gameAlias */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAlias */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAlias() { tns__submitGameAlias::soap_default(NULL); }
	virtual ~tns__submitGameAlias() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAliasResponse
#define SOAP_TYPE_ServerSoap_tns__submitGameAliasResponse (60)
/* tns:submitGameAliasResponse */
class SOAP_CMAC tns__submitGameAliasResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAliasResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAliasResponse() { tns__submitGameAliasResponse::soap_default(NULL); }
	virtual ~tns__submitGameAliasResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAliasTextAndTokenDigest
#define SOAP_TYPE_ServerSoap_tns__submitGameAliasTextAndTokenDigest (61)
/* tns:submitGameAliasTextAndTokenDigest */
class SOAP_CMAC tns__submitGameAliasTextAndTokenDigest
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	int arg1;	/* required element of type xsd:int */
	std::string *arg2;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAliasTextAndTokenDigest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAliasTextAndTokenDigest() { tns__submitGameAliasTextAndTokenDigest::soap_default(NULL); }
	virtual ~tns__submitGameAliasTextAndTokenDigest() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAliasTextAndTokenDigestResponse
#define SOAP_TYPE_ServerSoap_tns__submitGameAliasTextAndTokenDigestResponse (62)
/* tns:submitGameAliasTextAndTokenDigestResponse */
class SOAP_CMAC tns__submitGameAliasTextAndTokenDigestResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAliasTextAndTokenDigestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAliasTextAndTokenDigestResponse() { tns__submitGameAliasTextAndTokenDigestResponse::soap_default(NULL); }
	virtual ~tns__submitGameAliasTextAndTokenDigestResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAliasTextWithTokenId
#define SOAP_TYPE_ServerSoap_tns__submitGameAliasTextWithTokenId (63)
/* tns:submitGameAliasTextWithTokenId */
class SOAP_CMAC tns__submitGameAliasTextWithTokenId
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	int arg1;	/* required element of type xsd:int */
	LONG64 arg2;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAliasTextWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAliasTextWithTokenId() { tns__submitGameAliasTextWithTokenId::soap_default(NULL); }
	virtual ~tns__submitGameAliasTextWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAliasTextWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__submitGameAliasTextWithTokenIdResponse (64)
/* tns:submitGameAliasTextWithTokenIdResponse */
class SOAP_CMAC tns__submitGameAliasTextWithTokenIdResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAliasTextWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAliasTextWithTokenIdResponse() { tns__submitGameAliasTextWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__submitGameAliasTextWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAnnotation
#define SOAP_TYPE_ServerSoap_tns__submitGameAnnotation (65)
/* tns:submitGameAnnotation */
class SOAP_CMAC tns__submitGameAnnotation
{
public:
	tns__gameAnnotation *arg0;	/* optional element of type tns:gameAnnotation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAnnotation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAnnotation() { tns__submitGameAnnotation::soap_default(NULL); }
	virtual ~tns__submitGameAnnotation() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAnnotationResponse
#define SOAP_TYPE_ServerSoap_tns__submitGameAnnotationResponse (66)
/* tns:submitGameAnnotationResponse */
class SOAP_CMAC tns__submitGameAnnotationResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAnnotationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAnnotationResponse() { tns__submitGameAnnotationResponse::soap_default(NULL); }
	virtual ~tns__submitGameAnnotationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextAndTokenDigest
#define SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextAndTokenDigest (67)
/* tns:submitGameAnnotationTextAndTokenDigest */
class SOAP_CMAC tns__submitGameAnnotationTextAndTokenDigest
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	LONG64 arg1;	/* required element of type xsd:long */
	int arg2;	/* required element of type xsd:int */
	std::string *arg3;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextAndTokenDigest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAnnotationTextAndTokenDigest() { tns__submitGameAnnotationTextAndTokenDigest::soap_default(NULL); }
	virtual ~tns__submitGameAnnotationTextAndTokenDigest() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextAndTokenDigestResponse
#define SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextAndTokenDigestResponse (68)
/* tns:submitGameAnnotationTextAndTokenDigestResponse */
class SOAP_CMAC tns__submitGameAnnotationTextAndTokenDigestResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextAndTokenDigestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAnnotationTextAndTokenDigestResponse() { tns__submitGameAnnotationTextAndTokenDigestResponse::soap_default(NULL); }
	virtual ~tns__submitGameAnnotationTextAndTokenDigestResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextWithTokenId
#define SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextWithTokenId (69)
/* tns:submitGameAnnotationTextWithTokenId */
class SOAP_CMAC tns__submitGameAnnotationTextWithTokenId
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	LONG64 arg1;	/* required element of type xsd:long */
	int arg2;	/* required element of type xsd:int */
	LONG64 arg3;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAnnotationTextWithTokenId() { tns__submitGameAnnotationTextWithTokenId::soap_default(NULL); }
	virtual ~tns__submitGameAnnotationTextWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextWithTokenIdResponse (70)
/* tns:submitGameAnnotationTextWithTokenIdResponse */
class SOAP_CMAC tns__submitGameAnnotationTextWithTokenIdResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameAnnotationTextWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameAnnotationTextWithTokenIdResponse() { tns__submitGameAnnotationTextWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__submitGameAnnotationTextWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameToken
#define SOAP_TYPE_ServerSoap_tns__submitGameToken (71)
/* tns:submitGameToken */
class SOAP_CMAC tns__submitGameToken
{
public:
	tns__gameToken *arg0;	/* optional element of type tns:gameToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameToken */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameToken() { tns__submitGameToken::soap_default(NULL); }
	virtual ~tns__submitGameToken() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameTokenResponse
#define SOAP_TYPE_ServerSoap_tns__submitGameTokenResponse (72)
/* tns:submitGameTokenResponse */
class SOAP_CMAC tns__submitGameTokenResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameTokenResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameTokenResponse() { tns__submitGameTokenResponse::soap_default(NULL); }
	virtual ~tns__submitGameTokenResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameTokenDigest
#define SOAP_TYPE_ServerSoap_tns__submitGameTokenDigest (73)
/* tns:submitGameTokenDigest */
class SOAP_CMAC tns__submitGameTokenDigest
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameTokenDigest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameTokenDigest() { tns__submitGameTokenDigest::soap_default(NULL); }
	virtual ~tns__submitGameTokenDigest() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitGameTokenDigestResponse
#define SOAP_TYPE_ServerSoap_tns__submitGameTokenDigestResponse (74)
/* tns:submitGameTokenDigestResponse */
class SOAP_CMAC tns__submitGameTokenDigestResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitGameTokenDigestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitGameTokenDigestResponse() { tns__submitGameTokenDigestResponse::soap_default(NULL); }
	virtual ~tns__submitGameTokenDigestResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAlias
#define SOAP_TYPE_ServerSoap_tns__submitMediaAlias (75)
/* tns:submitMediaAlias */
class SOAP_CMAC tns__submitMediaAlias
{
public:
	tns__mediaAlias *arg0;	/* optional element of type tns:mediaAlias */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAlias */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAlias() { tns__submitMediaAlias::soap_default(NULL); }
	virtual ~tns__submitMediaAlias() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAliasResponse
#define SOAP_TYPE_ServerSoap_tns__submitMediaAliasResponse (76)
/* tns:submitMediaAliasResponse */
class SOAP_CMAC tns__submitMediaAliasResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAliasResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAliasResponse() { tns__submitMediaAliasResponse::soap_default(NULL); }
	virtual ~tns__submitMediaAliasResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextAndTokenDigest
#define SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextAndTokenDigest (77)
/* tns:submitMediaAliasTextAndTokenDigest */
class SOAP_CMAC tns__submitMediaAliasTextAndTokenDigest
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	int arg1;	/* required element of type xsd:int */
	std::string *arg2;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextAndTokenDigest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAliasTextAndTokenDigest() { tns__submitMediaAliasTextAndTokenDigest::soap_default(NULL); }
	virtual ~tns__submitMediaAliasTextAndTokenDigest() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextAndTokenDigestResponse
#define SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextAndTokenDigestResponse (78)
/* tns:submitMediaAliasTextAndTokenDigestResponse */
class SOAP_CMAC tns__submitMediaAliasTextAndTokenDigestResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextAndTokenDigestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAliasTextAndTokenDigestResponse() { tns__submitMediaAliasTextAndTokenDigestResponse::soap_default(NULL); }
	virtual ~tns__submitMediaAliasTextAndTokenDigestResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextWithTokenId
#define SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextWithTokenId (79)
/* tns:submitMediaAliasTextWithTokenId */
class SOAP_CMAC tns__submitMediaAliasTextWithTokenId
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	int arg1;	/* required element of type xsd:int */
	LONG64 arg2;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAliasTextWithTokenId() { tns__submitMediaAliasTextWithTokenId::soap_default(NULL); }
	virtual ~tns__submitMediaAliasTextWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextWithTokenIdResponse (80)
/* tns:submitMediaAliasTextWithTokenIdResponse */
class SOAP_CMAC tns__submitMediaAliasTextWithTokenIdResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAliasTextWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAliasTextWithTokenIdResponse() { tns__submitMediaAliasTextWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__submitMediaAliasTextWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAnnotation
#define SOAP_TYPE_ServerSoap_tns__submitMediaAnnotation (81)
/* tns:submitMediaAnnotation */
class SOAP_CMAC tns__submitMediaAnnotation
{
public:
	tns__mediaAnnotation *arg0;	/* optional element of type tns:mediaAnnotation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAnnotation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAnnotation() { tns__submitMediaAnnotation::soap_default(NULL); }
	virtual ~tns__submitMediaAnnotation() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationResponse
#define SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationResponse (82)
/* tns:submitMediaAnnotationResponse */
class SOAP_CMAC tns__submitMediaAnnotationResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAnnotationResponse() { tns__submitMediaAnnotationResponse::soap_default(NULL); }
	virtual ~tns__submitMediaAnnotationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextAndTokenDigest
#define SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextAndTokenDigest (83)
/* tns:submitMediaAnnotationTextAndTokenDigest */
class SOAP_CMAC tns__submitMediaAnnotationTextAndTokenDigest
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	LONG64 arg1;	/* required element of type xsd:long */
	int arg2;	/* required element of type xsd:int */
	std::string *arg3;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextAndTokenDigest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAnnotationTextAndTokenDigest() { tns__submitMediaAnnotationTextAndTokenDigest::soap_default(NULL); }
	virtual ~tns__submitMediaAnnotationTextAndTokenDigest() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextAndTokenDigestResponse
#define SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextAndTokenDigestResponse (84)
/* tns:submitMediaAnnotationTextAndTokenDigestResponse */
class SOAP_CMAC tns__submitMediaAnnotationTextAndTokenDigestResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextAndTokenDigestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAnnotationTextAndTokenDigestResponse() { tns__submitMediaAnnotationTextAndTokenDigestResponse::soap_default(NULL); }
	virtual ~tns__submitMediaAnnotationTextAndTokenDigestResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextWithTokenId
#define SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextWithTokenId (85)
/* tns:submitMediaAnnotationTextWithTokenId */
class SOAP_CMAC tns__submitMediaAnnotationTextWithTokenId
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	LONG64 arg1;	/* required element of type xsd:long */
	int arg2;	/* required element of type xsd:int */
	LONG64 arg3;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextWithTokenId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAnnotationTextWithTokenId() { tns__submitMediaAnnotationTextWithTokenId::soap_default(NULL); }
	virtual ~tns__submitMediaAnnotationTextWithTokenId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextWithTokenIdResponse
#define SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextWithTokenIdResponse (86)
/* tns:submitMediaAnnotationTextWithTokenIdResponse */
class SOAP_CMAC tns__submitMediaAnnotationTextWithTokenIdResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaAnnotationTextWithTokenIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaAnnotationTextWithTokenIdResponse() { tns__submitMediaAnnotationTextWithTokenIdResponse::soap_default(NULL); }
	virtual ~tns__submitMediaAnnotationTextWithTokenIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaToken
#define SOAP_TYPE_ServerSoap_tns__submitMediaToken (87)
/* tns:submitMediaToken */
class SOAP_CMAC tns__submitMediaToken
{
public:
	tns__mediaToken *arg0;	/* optional element of type tns:mediaToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaToken */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaToken() { tns__submitMediaToken::soap_default(NULL); }
	virtual ~tns__submitMediaToken() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaTokenResponse
#define SOAP_TYPE_ServerSoap_tns__submitMediaTokenResponse (88)
/* tns:submitMediaTokenResponse */
class SOAP_CMAC tns__submitMediaTokenResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaTokenResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaTokenResponse() { tns__submitMediaTokenResponse::soap_default(NULL); }
	virtual ~tns__submitMediaTokenResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaTokenDigest
#define SOAP_TYPE_ServerSoap_tns__submitMediaTokenDigest (89)
/* tns:submitMediaTokenDigest */
class SOAP_CMAC tns__submitMediaTokenDigest
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaTokenDigest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaTokenDigest() { tns__submitMediaTokenDigest::soap_default(NULL); }
	virtual ~tns__submitMediaTokenDigest() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__submitMediaTokenDigestResponse
#define SOAP_TYPE_ServerSoap_tns__submitMediaTokenDigestResponse (90)
/* tns:submitMediaTokenDigestResponse */
class SOAP_CMAC tns__submitMediaTokenDigestResponse
{
public:
	LONG64 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_ServerSoap_tns__submitMediaTokenDigestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__submitMediaTokenDigestResponse() { tns__submitMediaTokenDigestResponse::soap_default(NULL); }
	virtual ~tns__submitMediaTokenDigestResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__updateGameAnnotationTextWithId
#define SOAP_TYPE_ServerSoap_tns__updateGameAnnotationTextWithId (91)
/* tns:updateGameAnnotationTextWithId */
class SOAP_CMAC tns__updateGameAnnotationTextWithId
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	LONG64 arg1;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_ServerSoap_tns__updateGameAnnotationTextWithId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__updateGameAnnotationTextWithId() { tns__updateGameAnnotationTextWithId::soap_default(NULL); }
	virtual ~tns__updateGameAnnotationTextWithId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__updateGameAnnotationTextWithIdResponse
#define SOAP_TYPE_ServerSoap_tns__updateGameAnnotationTextWithIdResponse (92)
/* tns:updateGameAnnotationTextWithIdResponse */
class SOAP_CMAC tns__updateGameAnnotationTextWithIdResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_ServerSoap_tns__updateGameAnnotationTextWithIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__updateGameAnnotationTextWithIdResponse() { tns__updateGameAnnotationTextWithIdResponse::soap_default(NULL); }
	virtual ~tns__updateGameAnnotationTextWithIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__updateMediaAnnotationTextWithId
#define SOAP_TYPE_ServerSoap_tns__updateMediaAnnotationTextWithId (93)
/* tns:updateMediaAnnotationTextWithId */
class SOAP_CMAC tns__updateMediaAnnotationTextWithId
{
public:
	std::string *arg0;	/* optional element of type xsd:string */
	LONG64 arg1;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_ServerSoap_tns__updateMediaAnnotationTextWithId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__updateMediaAnnotationTextWithId() { tns__updateMediaAnnotationTextWithId::soap_default(NULL); }
	virtual ~tns__updateMediaAnnotationTextWithId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__updateMediaAnnotationTextWithIdResponse
#define SOAP_TYPE_ServerSoap_tns__updateMediaAnnotationTextWithIdResponse (94)
/* tns:updateMediaAnnotationTextWithIdResponse */
class SOAP_CMAC tns__updateMediaAnnotationTextWithIdResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE_ServerSoap_tns__updateMediaAnnotationTextWithIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__updateMediaAnnotationTextWithIdResponse() { tns__updateMediaAnnotationTextWithIdResponse::soap_default(NULL); }
	virtual ~tns__updateMediaAnnotationTextWithIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__visitGameTokenWithId
#define SOAP_TYPE_ServerSoap_tns__visitGameTokenWithId (95)
/* tns:visitGameTokenWithId */
class SOAP_CMAC tns__visitGameTokenWithId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_ServerSoap_tns__visitGameTokenWithId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__visitGameTokenWithId() { tns__visitGameTokenWithId::soap_default(NULL); }
	virtual ~tns__visitGameTokenWithId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__visitGameTokenWithIdResponse
#define SOAP_TYPE_ServerSoap_tns__visitGameTokenWithIdResponse (96)
/* tns:visitGameTokenWithIdResponse */
class SOAP_CMAC tns__visitGameTokenWithIdResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_ServerSoap_tns__visitGameTokenWithIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__visitGameTokenWithIdResponse() { tns__visitGameTokenWithIdResponse::soap_default(NULL); }
	virtual ~tns__visitGameTokenWithIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__visitMediaTokenWithId
#define SOAP_TYPE_ServerSoap_tns__visitMediaTokenWithId (97)
/* tns:visitMediaTokenWithId */
class SOAP_CMAC tns__visitMediaTokenWithId
{
public:
	LONG64 arg0;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE_ServerSoap_tns__visitMediaTokenWithId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__visitMediaTokenWithId() { tns__visitMediaTokenWithId::soap_default(NULL); }
	virtual ~tns__visitMediaTokenWithId() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap_tns__visitMediaTokenWithIdResponse
#define SOAP_TYPE_ServerSoap_tns__visitMediaTokenWithIdResponse (98)
/* tns:visitMediaTokenWithIdResponse */
class SOAP_CMAC tns__visitMediaTokenWithIdResponse
{
public:
	bool return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE_ServerSoap_tns__visitMediaTokenWithIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__visitMediaTokenWithIdResponse() { tns__visitMediaTokenWithIdResponse::soap_default(NULL); }
	virtual ~tns__visitMediaTokenWithIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__blessGameAnnotationWithId
#define SOAP_TYPE_ServerSoap___tns__blessGameAnnotationWithId (118)
/* Operation wrapper: */
struct __tns__blessGameAnnotationWithId
{
public:
	tns__blessGameAnnotationWithId *tns__blessGameAnnotationWithId_;	/* optional element of type tns:blessGameAnnotationWithId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__blessMediaAnnotationWithId
#define SOAP_TYPE_ServerSoap___tns__blessMediaAnnotationWithId (122)
/* Operation wrapper: */
struct __tns__blessMediaAnnotationWithId
{
public:
	tns__blessMediaAnnotationWithId *tns__blessMediaAnnotationWithId_;	/* optional element of type tns:blessMediaAnnotationWithId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__chat
#define SOAP_TYPE_ServerSoap___tns__chat (126)
/* Operation wrapper: */
struct __tns__chat
{
public:
	tns__chat *tns__chat_;	/* optional element of type tns:chat */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__getUser
#define SOAP_TYPE_ServerSoap___tns__getUser (130)
/* Operation wrapper: */
struct __tns__getUser
{
public:
	tns__getUser *tns__getUser_;	/* optional element of type tns:getUser */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__isAuthorized
#define SOAP_TYPE_ServerSoap___tns__isAuthorized (134)
/* Operation wrapper: */
struct __tns__isAuthorized
{
public:
	tns__isAuthorized *tns__isAuthorized_;	/* optional element of type tns:isAuthorized */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__isConnected
#define SOAP_TYPE_ServerSoap___tns__isConnected (138)
/* Operation wrapper: */
struct __tns__isConnected
{
public:
	tns__isConnected *tns__isConnected_;	/* optional element of type tns:isConnected */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__login
#define SOAP_TYPE_ServerSoap___tns__login (142)
/* Operation wrapper: */
struct __tns__login
{
public:
	tns__login *tns__login_;	/* optional element of type tns:login */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__logout
#define SOAP_TYPE_ServerSoap___tns__logout (146)
/* Operation wrapper: */
struct __tns__logout
{
public:
	tns__logout *tns__logout_;	/* optional element of type tns:logout */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectGameAliasesWithTokenId
#define SOAP_TYPE_ServerSoap___tns__selectGameAliasesWithTokenId (150)
/* Operation wrapper: */
struct __tns__selectGameAliasesWithTokenId
{
public:
	tns__selectGameAliasesWithTokenId *tns__selectGameAliasesWithTokenId_;	/* optional element of type tns:selectGameAliasesWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectGameAnnotationsWithTokenId
#define SOAP_TYPE_ServerSoap___tns__selectGameAnnotationsWithTokenId (154)
/* Operation wrapper: */
struct __tns__selectGameAnnotationsWithTokenId
{
public:
	tns__selectGameAnnotationsWithTokenId *tns__selectGameAnnotationsWithTokenId_;	/* optional element of type tns:selectGameAnnotationsWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectGameTokenWithDigest
#define SOAP_TYPE_ServerSoap___tns__selectGameTokenWithDigest (158)
/* Operation wrapper: */
struct __tns__selectGameTokenWithDigest
{
public:
	tns__selectGameTokenWithDigest *tns__selectGameTokenWithDigest_;	/* optional element of type tns:selectGameTokenWithDigest */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectGameTokenWithId
#define SOAP_TYPE_ServerSoap___tns__selectGameTokenWithId (162)
/* Operation wrapper: */
struct __tns__selectGameTokenWithId
{
public:
	tns__selectGameTokenWithId *tns__selectGameTokenWithId_;	/* optional element of type tns:selectGameTokenWithId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectMediaAliasesWithTokenId
#define SOAP_TYPE_ServerSoap___tns__selectMediaAliasesWithTokenId (166)
/* Operation wrapper: */
struct __tns__selectMediaAliasesWithTokenId
{
public:
	tns__selectMediaAliasesWithTokenId *tns__selectMediaAliasesWithTokenId_;	/* optional element of type tns:selectMediaAliasesWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectMediaAnnotationsWithTokenId
#define SOAP_TYPE_ServerSoap___tns__selectMediaAnnotationsWithTokenId (170)
/* Operation wrapper: */
struct __tns__selectMediaAnnotationsWithTokenId
{
public:
	tns__selectMediaAnnotationsWithTokenId *tns__selectMediaAnnotationsWithTokenId_;	/* optional element of type tns:selectMediaAnnotationsWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectMediaTokenWithDigest
#define SOAP_TYPE_ServerSoap___tns__selectMediaTokenWithDigest (174)
/* Operation wrapper: */
struct __tns__selectMediaTokenWithDigest
{
public:
	tns__selectMediaTokenWithDigest *tns__selectMediaTokenWithDigest_;	/* optional element of type tns:selectMediaTokenWithDigest */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectMediaTokenWithId
#define SOAP_TYPE_ServerSoap___tns__selectMediaTokenWithId (178)
/* Operation wrapper: */
struct __tns__selectMediaTokenWithId
{
public:
	tns__selectMediaTokenWithId *tns__selectMediaTokenWithId_;	/* optional element of type tns:selectMediaTokenWithId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectRelatedGameAnnotationsWithTokenId
#define SOAP_TYPE_ServerSoap___tns__selectRelatedGameAnnotationsWithTokenId (182)
/* Operation wrapper: */
struct __tns__selectRelatedGameAnnotationsWithTokenId
{
public:
	tns__selectRelatedGameAnnotationsWithTokenId *tns__selectRelatedGameAnnotationsWithTokenId_;	/* optional element of type tns:selectRelatedGameAnnotationsWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__selectRelatedMediaAnnotationsWithTokenId
#define SOAP_TYPE_ServerSoap___tns__selectRelatedMediaAnnotationsWithTokenId (186)
/* Operation wrapper: */
struct __tns__selectRelatedMediaAnnotationsWithTokenId
{
public:
	tns__selectRelatedMediaAnnotationsWithTokenId *tns__selectRelatedMediaAnnotationsWithTokenId_;	/* optional element of type tns:selectRelatedMediaAnnotationsWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__setCallback
#define SOAP_TYPE_ServerSoap___tns__setCallback (190)
/* Operation wrapper: */
struct __tns__setCallback
{
public:
	tns__setCallback *tns__setCallback_;	/* optional element of type tns:setCallback */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__setClientType
#define SOAP_TYPE_ServerSoap___tns__setClientType (194)
/* Operation wrapper: */
struct __tns__setClientType
{
public:
	tns__setClientType *tns__setClientType_;	/* optional element of type tns:setClientType */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__setUserAnonymous
#define SOAP_TYPE_ServerSoap___tns__setUserAnonymous (198)
/* Operation wrapper: */
struct __tns__setUserAnonymous
{
public:
	tns__setUserAnonymous *tns__setUserAnonymous_;	/* optional element of type tns:setUserAnonymous */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__setUserLanguage
#define SOAP_TYPE_ServerSoap___tns__setUserLanguage (202)
/* Operation wrapper: */
struct __tns__setUserLanguage
{
public:
	tns__setUserLanguage *tns__setUserLanguage_;	/* optional element of type tns:setUserLanguage */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitGameAlias
#define SOAP_TYPE_ServerSoap___tns__submitGameAlias (206)
/* Operation wrapper: */
struct __tns__submitGameAlias
{
public:
	tns__submitGameAlias *tns__submitGameAlias_;	/* optional element of type tns:submitGameAlias */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitGameAliasTextAndTokenDigest
#define SOAP_TYPE_ServerSoap___tns__submitGameAliasTextAndTokenDigest (210)
/* Operation wrapper: */
struct __tns__submitGameAliasTextAndTokenDigest
{
public:
	tns__submitGameAliasTextAndTokenDigest *tns__submitGameAliasTextAndTokenDigest_;	/* optional element of type tns:submitGameAliasTextAndTokenDigest */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitGameAliasTextWithTokenId
#define SOAP_TYPE_ServerSoap___tns__submitGameAliasTextWithTokenId (214)
/* Operation wrapper: */
struct __tns__submitGameAliasTextWithTokenId
{
public:
	tns__submitGameAliasTextWithTokenId *tns__submitGameAliasTextWithTokenId_;	/* optional element of type tns:submitGameAliasTextWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitGameAnnotation
#define SOAP_TYPE_ServerSoap___tns__submitGameAnnotation (218)
/* Operation wrapper: */
struct __tns__submitGameAnnotation
{
public:
	tns__submitGameAnnotation *tns__submitGameAnnotation_;	/* optional element of type tns:submitGameAnnotation */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitGameAnnotationTextAndTokenDigest
#define SOAP_TYPE_ServerSoap___tns__submitGameAnnotationTextAndTokenDigest (222)
/* Operation wrapper: */
struct __tns__submitGameAnnotationTextAndTokenDigest
{
public:
	tns__submitGameAnnotationTextAndTokenDigest *tns__submitGameAnnotationTextAndTokenDigest_;	/* optional element of type tns:submitGameAnnotationTextAndTokenDigest */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitGameAnnotationTextWithTokenId
#define SOAP_TYPE_ServerSoap___tns__submitGameAnnotationTextWithTokenId (226)
/* Operation wrapper: */
struct __tns__submitGameAnnotationTextWithTokenId
{
public:
	tns__submitGameAnnotationTextWithTokenId *tns__submitGameAnnotationTextWithTokenId_;	/* optional element of type tns:submitGameAnnotationTextWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitGameToken
#define SOAP_TYPE_ServerSoap___tns__submitGameToken (230)
/* Operation wrapper: */
struct __tns__submitGameToken
{
public:
	tns__submitGameToken *tns__submitGameToken_;	/* optional element of type tns:submitGameToken */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitGameTokenDigest
#define SOAP_TYPE_ServerSoap___tns__submitGameTokenDigest (234)
/* Operation wrapper: */
struct __tns__submitGameTokenDigest
{
public:
	tns__submitGameTokenDigest *tns__submitGameTokenDigest_;	/* optional element of type tns:submitGameTokenDigest */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitMediaAlias
#define SOAP_TYPE_ServerSoap___tns__submitMediaAlias (238)
/* Operation wrapper: */
struct __tns__submitMediaAlias
{
public:
	tns__submitMediaAlias *tns__submitMediaAlias_;	/* optional element of type tns:submitMediaAlias */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitMediaAliasTextAndTokenDigest
#define SOAP_TYPE_ServerSoap___tns__submitMediaAliasTextAndTokenDigest (242)
/* Operation wrapper: */
struct __tns__submitMediaAliasTextAndTokenDigest
{
public:
	tns__submitMediaAliasTextAndTokenDigest *tns__submitMediaAliasTextAndTokenDigest_;	/* optional element of type tns:submitMediaAliasTextAndTokenDigest */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitMediaAliasTextWithTokenId
#define SOAP_TYPE_ServerSoap___tns__submitMediaAliasTextWithTokenId (246)
/* Operation wrapper: */
struct __tns__submitMediaAliasTextWithTokenId
{
public:
	tns__submitMediaAliasTextWithTokenId *tns__submitMediaAliasTextWithTokenId_;	/* optional element of type tns:submitMediaAliasTextWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitMediaAnnotation
#define SOAP_TYPE_ServerSoap___tns__submitMediaAnnotation (250)
/* Operation wrapper: */
struct __tns__submitMediaAnnotation
{
public:
	tns__submitMediaAnnotation *tns__submitMediaAnnotation_;	/* optional element of type tns:submitMediaAnnotation */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitMediaAnnotationTextAndTokenDigest
#define SOAP_TYPE_ServerSoap___tns__submitMediaAnnotationTextAndTokenDigest (254)
/* Operation wrapper: */
struct __tns__submitMediaAnnotationTextAndTokenDigest
{
public:
	tns__submitMediaAnnotationTextAndTokenDigest *tns__submitMediaAnnotationTextAndTokenDigest_;	/* optional element of type tns:submitMediaAnnotationTextAndTokenDigest */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitMediaAnnotationTextWithTokenId
#define SOAP_TYPE_ServerSoap___tns__submitMediaAnnotationTextWithTokenId (258)
/* Operation wrapper: */
struct __tns__submitMediaAnnotationTextWithTokenId
{
public:
	tns__submitMediaAnnotationTextWithTokenId *tns__submitMediaAnnotationTextWithTokenId_;	/* optional element of type tns:submitMediaAnnotationTextWithTokenId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitMediaToken
#define SOAP_TYPE_ServerSoap___tns__submitMediaToken (262)
/* Operation wrapper: */
struct __tns__submitMediaToken
{
public:
	tns__submitMediaToken *tns__submitMediaToken_;	/* optional element of type tns:submitMediaToken */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__submitMediaTokenDigest
#define SOAP_TYPE_ServerSoap___tns__submitMediaTokenDigest (266)
/* Operation wrapper: */
struct __tns__submitMediaTokenDigest
{
public:
	tns__submitMediaTokenDigest *tns__submitMediaTokenDigest_;	/* optional element of type tns:submitMediaTokenDigest */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__updateGameAnnotationTextWithId
#define SOAP_TYPE_ServerSoap___tns__updateGameAnnotationTextWithId (270)
/* Operation wrapper: */
struct __tns__updateGameAnnotationTextWithId
{
public:
	tns__updateGameAnnotationTextWithId *tns__updateGameAnnotationTextWithId_;	/* optional element of type tns:updateGameAnnotationTextWithId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__updateMediaAnnotationTextWithId
#define SOAP_TYPE_ServerSoap___tns__updateMediaAnnotationTextWithId (274)
/* Operation wrapper: */
struct __tns__updateMediaAnnotationTextWithId
{
public:
	tns__updateMediaAnnotationTextWithId *tns__updateMediaAnnotationTextWithId_;	/* optional element of type tns:updateMediaAnnotationTextWithId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__visitGameTokenWithId
#define SOAP_TYPE_ServerSoap___tns__visitGameTokenWithId (278)
/* Operation wrapper: */
struct __tns__visitGameTokenWithId
{
public:
	tns__visitGameTokenWithId *tns__visitGameTokenWithId_;	/* optional element of type tns:visitGameTokenWithId */
};
#endif

#ifndef SOAP_TYPE_ServerSoap___tns__visitMediaTokenWithId
#define SOAP_TYPE_ServerSoap___tns__visitMediaTokenWithId (282)
/* Operation wrapper: */
struct __tns__visitMediaTokenWithId
{
public:
	tns__visitMediaTokenWithId *tns__visitMediaTokenWithId_;	/* optional element of type tns:visitMediaTokenWithId */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ServerSoap_SOAP_ENV__Header
#define SOAP_TYPE_ServerSoap_SOAP_ENV__Header (283)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ServerSoap_SOAP_ENV__Code
#define SOAP_TYPE_ServerSoap_SOAP_ENV__Code (284)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ServerSoap_SOAP_ENV__Detail
#define SOAP_TYPE_ServerSoap_SOAP_ENV__Detail (286)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ServerSoap_SOAP_ENV__Reason
#define SOAP_TYPE_ServerSoap_SOAP_ENV__Reason (289)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ServerSoap_SOAP_ENV__Fault
#define SOAP_TYPE_ServerSoap_SOAP_ENV__Fault (290)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_ServerSoap__QName
#define SOAP_TYPE_ServerSoap__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_ServerSoap__XML
#define SOAP_TYPE_ServerSoap__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace ServerSoap


#endif

/* End of ServerSoapStub.h */
